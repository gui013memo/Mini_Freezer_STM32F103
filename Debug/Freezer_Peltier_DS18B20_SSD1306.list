
Freezer_Peltier_DS18B20_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000348c  08007040  08007040  00017040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4cc  0800a4cc  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a4cc  0800a4cc  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a4cc  0800a4cc  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4d0  0800a4d0  0001a4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800a4d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  200001fc  0800a6d0  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  0800a6d0  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010230  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002401  00000000  00000000  00030455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00032858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  000336b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019235  00000000  00000000  00034430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001054a  00000000  00000000  0004d665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c652  00000000  00000000  0005dbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea201  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e8c  00000000  00000000  000ea254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007024 	.word	0x08007024

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	08007024 	.word	0x08007024

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <DS18B20_Run>:
//	#define DS18B20_GPIO_Port 	DS18B20_PORT
//	#define DS18B20_Pin			DS18B20_PIN

/* ----- FUNCTIONS GUILHERME ----- */

float DS18B20_Run(uint8_t *Presence) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

	//uint8_t Presence = 0;
	uint8_t Temp_byte1, Temp_byte2;
	uint16_t TEMP;

	float Temperature = 0;
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]

	*Presence = DS18B20_Start();
 800103e:	f000 f841 	bl	80010c4 <DS18B20_Start>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f001 fb04 	bl	8002658 <HAL_Delay>
	DS18B20_Write(0xCC);  // skip ROM
 8001050:	20cc      	movs	r0, #204	; 0xcc
 8001052:	f000 f86b 	bl	800112c <DS18B20_Write>
	DS18B20_Write(0x44);  // convert t
 8001056:	2044      	movs	r0, #68	; 0x44
 8001058:	f000 f868 	bl	800112c <DS18B20_Write>
	HAL_Delay(800);
 800105c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001060:	f001 fafa 	bl	8002658 <HAL_Delay>

	*Presence = DS18B20_Start();
 8001064:	f000 f82e 	bl	80010c4 <DS18B20_Start>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f001 faf1 	bl	8002658 <HAL_Delay>
	DS18B20_Write(0xCC);  // skip ROM
 8001076:	20cc      	movs	r0, #204	; 0xcc
 8001078:	f000 f858 	bl	800112c <DS18B20_Write>
	DS18B20_Write(0xBE);  // Read Scratch-pad
 800107c:	20be      	movs	r0, #190	; 0xbe
 800107e:	f000 f855 	bl	800112c <DS18B20_Write>

	Temp_byte1 = DS18B20_Read();
 8001082:	f000 f89f 	bl	80011c4 <DS18B20_Read>
 8001086:	4603      	mov	r3, r0
 8001088:	72fb      	strb	r3, [r7, #11]
	Temp_byte2 = DS18B20_Read();
 800108a:	f000 f89b 	bl	80011c4 <DS18B20_Read>
 800108e:	4603      	mov	r3, r0
 8001090:	72bb      	strb	r3, [r7, #10]
	TEMP = (Temp_byte2 << 8) | Temp_byte1;
 8001092:	7abb      	ldrb	r3, [r7, #10]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	7afb      	ldrb	r3, [r7, #11]
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21b      	sxth	r3, r3
 80010a0:	813b      	strh	r3, [r7, #8]
	Temperature = (float) TEMP / 16;
 80010a2:	893b      	ldrh	r3, [r7, #8]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fda5 	bl	8000bf4 <__aeabi_ui2f>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff feab 	bl	8000e0c <__aeabi_fdiv>
 80010b6:	4603      	mov	r3, r0
 80010b8:	60fb      	str	r3, [r7, #12]

	return Temperature;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <DS18B20_Start>:

/* ----- FUNCTIONS GUILHERME END----- */

uint8_t DS18B20_Start(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0

	uint8_t Response = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 80010ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d2:	4815      	ldr	r0, [pc, #84]	; (8001128 <DS18B20_Start+0x64>)
 80010d4:	f000 f8b8 	bl	8001248 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010de:	4812      	ldr	r0, [pc, #72]	; (8001128 <DS18B20_Start+0x64>)
 80010e0:	f001 fd87 	bl	8002bf2 <HAL_GPIO_WritePin>
	delay_us(480);   // delay according to datasheet
 80010e4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80010e8:	f001 fa16 	bl	8002518 <delay_us>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80010ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <DS18B20_Start+0x64>)
 80010f2:	f000 f8c6 	bl	8001282 <Set_Pin_Input>
	delay_us(80);    // delay according to datasheet
 80010f6:	2050      	movs	r0, #80	; 0x50
 80010f8:	f001 fa0e 	bl	8002518 <delay_us>

	if (!(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)))
 80010fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <DS18B20_Start+0x64>)
 8001102:	f001 fd5f 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <DS18B20_Start+0x4e>
		Response = 1;    // if the pin is low i.e the presence pulse is detected
 800110c:	2301      	movs	r3, #1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	e001      	b.n	8001116 <DS18B20_Start+0x52>
	else
		Response = -1;
 8001112:	23ff      	movs	r3, #255	; 0xff
 8001114:	71fb      	strb	r3, [r7, #7]

	delay_us(400); // 480 us delay totally.
 8001116:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800111a:	f001 f9fd 	bl	8002518 <delay_us>

	return Response;
 800111e:	79fb      	ldrb	r3, [r7, #7]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40010c00 	.word	0x40010c00

0800112c <DS18B20_Write>:

void DS18B20_Write(uint8_t data) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001136:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800113a:	4821      	ldr	r0, [pc, #132]	; (80011c0 <DS18B20_Write+0x94>)
 800113c:	f000 f884 	bl	8001248 <Set_Pin_Output>

	for (int i = 0; i < 8; i++) {
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e034      	b.n	80011b0 <DS18B20_Write+0x84>

		if ((data & (1 << i)) != 0)  // if the bit is high
 8001146:	79fa      	ldrb	r2, [r7, #7]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	fa42 f303 	asr.w	r3, r2, r3
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d016      	beq.n	8001184 <DS18B20_Write+0x58>
				{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001156:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800115a:	4819      	ldr	r0, [pc, #100]	; (80011c0 <DS18B20_Write+0x94>)
 800115c:	f000 f874 	bl	8001248 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001166:	4816      	ldr	r0, [pc, #88]	; (80011c0 <DS18B20_Write+0x94>)
 8001168:	f001 fd43 	bl	8002bf2 <HAL_GPIO_WritePin>
			delay_us(1);  // wait for 1 us
 800116c:	2001      	movs	r0, #1
 800116e:	f001 f9d3 	bl	8002518 <delay_us>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001172:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001176:	4812      	ldr	r0, [pc, #72]	; (80011c0 <DS18B20_Write+0x94>)
 8001178:	f000 f883 	bl	8001282 <Set_Pin_Input>
			delay_us(50);  // wait for 60 us
 800117c:	2032      	movs	r0, #50	; 0x32
 800117e:	f001 f9cb 	bl	8002518 <delay_us>
 8001182:	e012      	b.n	80011aa <DS18B20_Write+0x7e>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8001184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <DS18B20_Write+0x94>)
 800118a:	f000 f85d 	bl	8001248 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <DS18B20_Write+0x94>)
 8001196:	f001 fd2c 	bl	8002bf2 <HAL_GPIO_WritePin>
			delay_us(50);  // wait for 60 us
 800119a:	2032      	movs	r0, #50	; 0x32
 800119c:	f001 f9bc 	bl	8002518 <delay_us>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80011a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a4:	4806      	ldr	r0, [pc, #24]	; (80011c0 <DS18B20_Write+0x94>)
 80011a6:	f000 f86c 	bl	8001282 <Set_Pin_Input>
	for (int i = 0; i < 8; i++) {
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3301      	adds	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b07      	cmp	r3, #7
 80011b4:	ddc7      	ble.n	8001146 <DS18B20_Write+0x1a>
		}
	}
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40010c00 	.word	0x40010c00

080011c4 <DS18B20_Read>:

uint8_t DS18B20_Read(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80011ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d2:	481c      	ldr	r0, [pc, #112]	; (8001244 <DS18B20_Read+0x80>)
 80011d4:	f000 f855 	bl	8001282 <Set_Pin_Input>

	for (int i = 0; i < 8; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	e02a      	b.n	8001234 <DS18B20_Read+0x70>
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80011de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e2:	4818      	ldr	r0, [pc, #96]	; (8001244 <DS18B20_Read+0x80>)
 80011e4:	f000 f830 	bl	8001248 <Set_Pin_Output>

		HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the data pin LOW
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ee:	4815      	ldr	r0, [pc, #84]	; (8001244 <DS18B20_Read+0x80>)
 80011f0:	f001 fcff 	bl	8002bf2 <HAL_GPIO_WritePin>
		delay_us(1);  // wait for > 1us
 80011f4:	2001      	movs	r0, #1
 80011f6:	f001 f98f 	bl	8002518 <delay_us>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80011fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <DS18B20_Read+0x80>)
 8001200:	f000 f83f 	bl	8001282 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8001204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001208:	480e      	ldr	r0, [pc, #56]	; (8001244 <DS18B20_Read+0x80>)
 800120a:	f001 fcdb 	bl	8002bc4 <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d009      	beq.n	8001228 <DS18B20_Read+0x64>
				{
			value |= 1 << i;  // read = 1
 8001214:	2201      	movs	r2, #1
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	b25a      	sxtb	r2, r3
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	4313      	orrs	r3, r2
 8001224:	b25b      	sxtb	r3, r3
 8001226:	71fb      	strb	r3, [r7, #7]
		}
		delay_us(50);  // wait for 60 us
 8001228:	2032      	movs	r0, #50	; 0x32
 800122a:	f001 f975 	bl	8002518 <delay_us>
	for (int i = 0; i < 8; i++) {
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2b07      	cmp	r3, #7
 8001238:	ddd1      	ble.n	80011de <DS18B20_Read+0x1a>
	}
	return value;
 800123a:	79fb      	ldrb	r3, [r7, #7]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40010c00 	.word	0x40010c00

08001248 <Set_Pin_Output>:

/*	--- Auxiliar functions ---	*/

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2302      	movs	r3, #2
 800126c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	4619      	mov	r1, r3
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f001 fb21 	bl	80028bc <HAL_GPIO_Init>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800129c:	887b      	ldrh	r3, [r7, #2]
 800129e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f001 fb04 	bl	80028bc <HAL_GPIO_Init>
}
 80012b4:	bf00      	nop
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012c0:	f001 f968 	bl	8002594 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012c4:	f000 f92a 	bl	800151c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012c8:	f000 f9ec 	bl	80016a4 <MX_GPIO_Init>
	MX_I2C1_Init();
 80012cc:	f000 f96c 	bl	80015a8 <MX_I2C1_Init>
	MX_TIM1_Init();
 80012d0:	f000 f998 	bl	8001604 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 80012d4:	485e      	ldr	r0, [pc, #376]	; (8001450 <main+0x194>)
 80012d6:	f002 fd75 	bl	8003dc4 <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(SSD_VCC_GPIO_Port, SSD_VCC_Pin, 1);
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e0:	485c      	ldr	r0, [pc, #368]	; (8001454 <main+0x198>)
 80012e2:	f001 fc86 	bl	8002bf2 <HAL_GPIO_WritePin>
	OLED_INIT();
 80012e6:	f000 fbbb 	bl	8001a60 <OLED_INIT>
	SSD1306_UpdateScreen();
 80012ea:	f000 fc17 	bl	8001b1c <SSD1306_UpdateScreen>
	/* USER CODE BEGIN WHILE */

	/*	--- INTRO ---	*/

	if (1) {
		SSD1306_InvertDisplay(1);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f000 fb0a 	bl	8001908 <SSD1306_InvertDisplay>
		SSD1306_Draw_intrologo(catito, 1);
 80012f4:	2101      	movs	r1, #1
 80012f6:	4858      	ldr	r0, [pc, #352]	; (8001458 <main+0x19c>)
 80012f8:	f000 fa7b 	bl	80017f2 <SSD1306_Draw_intrologo>
		SSD1306_InvertDisplay(0);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f000 fb03 	bl	8001908 <SSD1306_InvertDisplay>
		SSD1306_Draw_intrologo(catito, 1);
 8001302:	2101      	movs	r1, #1
 8001304:	4854      	ldr	r0, [pc, #336]	; (8001458 <main+0x19c>)
 8001306:	f000 fa74 	bl	80017f2 <SSD1306_Draw_intrologo>

		SSD1306_InvertDisplay(0);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 fafc 	bl	8001908 <SSD1306_InvertDisplay>
		SSD1306_DrawIntroFreezer(3000);
 8001310:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001314:	f000 faa0 	bl	8001858 <SSD1306_DrawIntroFreezer>

	/*	--- PAINEL DE TEMPERATURA --- */

	//Temperature = DS18B20_Run(&Presence);
	//SUPERIOR AREA - TENSAO PELTIER  // TODO: Create a function to get the voltage of the peltier
	SSD1306_GotoXY(2, 0);
 8001318:	2100      	movs	r1, #0
 800131a:	2002      	movs	r0, #2
 800131c:	f000 fc8c 	bl	8001c38 <SSD1306_GotoXY>
	SSD1306_Puts("Vpeltier:  ", &Font_7x10, 1);
 8001320:	2201      	movs	r2, #1
 8001322:	494e      	ldr	r1, [pc, #312]	; (800145c <main+0x1a0>)
 8001324:	484e      	ldr	r0, [pc, #312]	; (8001460 <main+0x1a4>)
 8001326:	f000 fd0b 	bl	8001d40 <SSD1306_Puts>
	SSD1306_Puts(Vpeltier_txt, &Font_7x10, 1);
 800132a:	2201      	movs	r2, #1
 800132c:	494b      	ldr	r1, [pc, #300]	; (800145c <main+0x1a0>)
 800132e:	484d      	ldr	r0, [pc, #308]	; (8001464 <main+0x1a8>)
 8001330:	f000 fd06 	bl	8001d40 <SSD1306_Puts>

	//CENTRAL AREA - TEMPERATURA
	sprintf(Temperature_txt, "%.1f", Temperature); /* Converts number to string */
 8001334:	4b4c      	ldr	r3, [pc, #304]	; (8001468 <main+0x1ac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f875 	bl	8000428 <__aeabi_f2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	494a      	ldr	r1, [pc, #296]	; (800146c <main+0x1b0>)
 8001344:	484a      	ldr	r0, [pc, #296]	; (8001470 <main+0x1b4>)
 8001346:	f003 fc33 	bl	8004bb0 <siprintf>

	SSD1306_GotoXY(5, 15);
 800134a:	210f      	movs	r1, #15
 800134c:	2005      	movs	r0, #5
 800134e:	f000 fc73 	bl	8001c38 <SSD1306_GotoXY>
	SSD1306_Puts("--", &Font_16x26, 1);
 8001352:	2201      	movs	r2, #1
 8001354:	4947      	ldr	r1, [pc, #284]	; (8001474 <main+0x1b8>)
 8001356:	4848      	ldr	r0, [pc, #288]	; (8001478 <main+0x1bc>)
 8001358:	f000 fcf2 	bl	8001d40 <SSD1306_Puts>
	SSD1306_Puts(" C", &Font_16x26, 1);
 800135c:	2201      	movs	r2, #1
 800135e:	4945      	ldr	r1, [pc, #276]	; (8001474 <main+0x1b8>)
 8001360:	4846      	ldr	r0, [pc, #280]	; (800147c <main+0x1c0>)
 8001362:	f000 fced 	bl	8001d40 <SSD1306_Puts>
	SSD1306_DrawCircle(SSD1306.CurrentX + 4, SSD1306.CurrentY + 4, 2, 1); /* Draws the grade sign -> "°" <- */
 8001366:	4b46      	ldr	r3, [pc, #280]	; (8001480 <main+0x1c4>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	3304      	adds	r3, #4
 800136c:	b29b      	uxth	r3, r3
 800136e:	b218      	sxth	r0, r3
 8001370:	4b43      	ldr	r3, [pc, #268]	; (8001480 <main+0x1c4>)
 8001372:	885b      	ldrh	r3, [r3, #2]
 8001374:	3304      	adds	r3, #4
 8001376:	b29b      	uxth	r3, r3
 8001378:	b219      	sxth	r1, r3
 800137a:	2301      	movs	r3, #1
 800137c:	2202      	movs	r2, #2
 800137e:	f000 fe4c 	bl	800201a <SSD1306_DrawCircle>

	//INFERIOR AREA - MENU
	SSD1306_GotoXY(1, 64 - 18);
 8001382:	212e      	movs	r1, #46	; 0x2e
 8001384:	2001      	movs	r0, #1
 8001386:	f000 fc57 	bl	8001c38 <SSD1306_GotoXY>
	SSD1306_Puts("Menu", &Font_11x18, 1);
 800138a:	2201      	movs	r2, #1
 800138c:	493d      	ldr	r1, [pc, #244]	; (8001484 <main+0x1c8>)
 800138e:	483e      	ldr	r0, [pc, #248]	; (8001488 <main+0x1cc>)
 8001390:	f000 fcd6 	bl	8001d40 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001394:	f000 fbc2 	bl	8001b1c <SSD1306_UpdateScreen>

	while (1) {

		/*	TESTES 	*/

		while (0) {
 8001398:	bf00      	nop
		}

		/*	TESTES END	*/

		/* ------------ DS18B20 ------------ */
		Temperature = DS18B20_Run(&Presence);
 800139a:	483c      	ldr	r0, [pc, #240]	; (800148c <main+0x1d0>)
 800139c:	f7ff fe48 	bl	8001030 <DS18B20_Run>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4a31      	ldr	r2, [pc, #196]	; (8001468 <main+0x1ac>)
 80013a4:	6013      	str	r3, [r2, #0]
		//TODO: Create a function to get the voltage of the peltier
		/* --- PELTIER VOLTAGE END --- */

		/* --- PANEL DRAW --- */

		sprintf(Temperature_txt, "%.1f", Temperature); /* Converts number to string */
 80013a6:	4b30      	ldr	r3, [pc, #192]	; (8001468 <main+0x1ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f83c 	bl	8000428 <__aeabi_f2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	492d      	ldr	r1, [pc, #180]	; (800146c <main+0x1b0>)
 80013b6:	482e      	ldr	r0, [pc, #184]	; (8001470 <main+0x1b4>)
 80013b8:	f003 fbfa 	bl	8004bb0 <siprintf>

		SSD1306_GotoXY(5, 15);
 80013bc:	210f      	movs	r1, #15
 80013be:	2005      	movs	r0, #5
 80013c0:	f000 fc3a 	bl	8001c38 <SSD1306_GotoXY>
		SSD1306_Puts(Temperature_txt, &Font_16x26, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	492b      	ldr	r1, [pc, #172]	; (8001474 <main+0x1b8>)
 80013c8:	4829      	ldr	r0, [pc, #164]	; (8001470 <main+0x1b4>)
 80013ca:	f000 fcb9 	bl	8001d40 <SSD1306_Puts>
		SSD1306_Puts(" C", &Font_16x26, 1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	4928      	ldr	r1, [pc, #160]	; (8001474 <main+0x1b8>)
 80013d2:	482a      	ldr	r0, [pc, #168]	; (800147c <main+0x1c0>)
 80013d4:	f000 fcb4 	bl	8001d40 <SSD1306_Puts>
		SSD1306_DrawCircle(SSD1306.CurrentX + 4, SSD1306.CurrentY + 4, 2, 1); /* Draws the grade sign -> "°" <- */
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <main+0x1c4>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	3304      	adds	r3, #4
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b218      	sxth	r0, r3
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <main+0x1c4>)
 80013e4:	885b      	ldrh	r3, [r3, #2]
 80013e6:	3304      	adds	r3, #4
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	b219      	sxth	r1, r3
 80013ec:	2301      	movs	r3, #1
 80013ee:	2202      	movs	r2, #2
 80013f0:	f000 fe13 	bl	800201a <SSD1306_DrawCircle>
		/* --- PANEL DRAW END --- */

		/* --- */

		/* --- ACTUATORS --- */
		if (Temperature > 25) {
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <main+0x1ac>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4925      	ldr	r1, [pc, #148]	; (8001490 <main+0x1d4>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fe0e 	bl	800101c <__aeabi_fcmpgt>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d011      	beq.n	800142a <main+0x16e>
			//HAL_GPIO_WritePin(RELE_GPIO_Port, RELE_Pin, 1);
			HAL_GPIO_WritePin(LED_ONB_GPIO_Port, LED_ONB_Pin, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140c:	4821      	ldr	r0, [pc, #132]	; (8001494 <main+0x1d8>)
 800140e:	f001 fbf0 	bl	8002bf2 <HAL_GPIO_WritePin>
			SSD1306_GotoXY(75, 64 - 18);
 8001412:	212e      	movs	r1, #46	; 0x2e
 8001414:	204b      	movs	r0, #75	; 0x4b
 8001416:	f000 fc0f 	bl	8001c38 <SSD1306_GotoXY>
			SSD1306_Puts("ON ", &Font_11x18, 1);
 800141a:	2201      	movs	r2, #1
 800141c:	4919      	ldr	r1, [pc, #100]	; (8001484 <main+0x1c8>)
 800141e:	481e      	ldr	r0, [pc, #120]	; (8001498 <main+0x1dc>)
 8001420:	f000 fc8e 	bl	8001d40 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001424:	f000 fb7a 	bl	8001b1c <SSD1306_UpdateScreen>
 8001428:	e7b6      	b.n	8001398 <main+0xdc>
		} else {
			//HAL_GPIO_WritePin(RELE_GPIO_Port, RELE_Pin, 0);
			HAL_GPIO_WritePin(LED_ONB_GPIO_Port, LED_ONB_Pin, 1);
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001430:	4818      	ldr	r0, [pc, #96]	; (8001494 <main+0x1d8>)
 8001432:	f001 fbde 	bl	8002bf2 <HAL_GPIO_WritePin>
			SSD1306_GotoXY(75, 64 - 18);
 8001436:	212e      	movs	r1, #46	; 0x2e
 8001438:	204b      	movs	r0, #75	; 0x4b
 800143a:	f000 fbfd 	bl	8001c38 <SSD1306_GotoXY>
			SSD1306_Puts("OFF", &Font_11x18, 1);
 800143e:	2201      	movs	r2, #1
 8001440:	4910      	ldr	r1, [pc, #64]	; (8001484 <main+0x1c8>)
 8001442:	4816      	ldr	r0, [pc, #88]	; (800149c <main+0x1e0>)
 8001444:	f000 fc7c 	bl	8001d40 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001448:	f000 fb68 	bl	8001b1c <SSD1306_UpdateScreen>
		while (0) {
 800144c:	e7a4      	b.n	8001398 <main+0xdc>
 800144e:	bf00      	nop
 8001450:	2000028c 	.word	0x2000028c
 8001454:	40010c00 	.word	0x40010c00
 8001458:	080098d4 	.word	0x080098d4
 800145c:	20000000 	.word	0x20000000
 8001460:	08007040 	.word	0x08007040
 8001464:	20000018 	.word	0x20000018
 8001468:	20000218 	.word	0x20000218
 800146c:	0800704c 	.word	0x0800704c
 8001470:	20000288 	.word	0x20000288
 8001474:	20000010 	.word	0x20000010
 8001478:	08007054 	.word	0x08007054
 800147c:	08007058 	.word	0x08007058
 8001480:	20000280 	.word	0x20000280
 8001484:	20000008 	.word	0x20000008
 8001488:	0800705c 	.word	0x0800705c
 800148c:	2000021c 	.word	0x2000021c
 8001490:	41c80000 	.word	0x41c80000
 8001494:	40011000 	.word	0x40011000
 8001498:	08007064 	.word	0x08007064
 800149c:	08007068 	.word	0x08007068

080014a0 <HAL_GPIO_EXTI_Callback>:
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == B_SW_Pin) {
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014b0:	d128      	bne.n	8001504 <HAL_GPIO_EXTI_Callback+0x64>
		delay_us(1000);
 80014b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b6:	f001 f82f 	bl	8002518 <delay_us>
		HAL_GPIO_TogglePin(RELE_GPIO_Port, RELE_Pin);
 80014ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014be:	4813      	ldr	r0, [pc, #76]	; (800150c <HAL_GPIO_EXTI_Callback+0x6c>)
 80014c0:	f001 fbaf 	bl	8002c22 <HAL_GPIO_TogglePin>

		SSD1306_DrawFilledRectangle(1, 64 - 18, (11 * 4) - 1, 18, 0);
 80014c4:	2300      	movs	r3, #0
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2312      	movs	r3, #18
 80014ca:	222b      	movs	r2, #43	; 0x2b
 80014cc:	212e      	movs	r1, #46	; 0x2e
 80014ce:	2001      	movs	r0, #1
 80014d0:	f000 fd56 	bl	8001f80 <SSD1306_DrawFilledRectangle>
		SSD1306_GotoXY(1, 64 - 18);
 80014d4:	212e      	movs	r1, #46	; 0x2e
 80014d6:	2001      	movs	r0, #1
 80014d8:	f000 fbae 	bl	8001c38 <SSD1306_GotoXY>
		SSD1306_Puts("Menu", &Font_11x18, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	490c      	ldr	r1, [pc, #48]	; (8001510 <HAL_GPIO_EXTI_Callback+0x70>)
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <HAL_GPIO_EXTI_Callback+0x74>)
 80014e2:	f000 fc2d 	bl	8001d40 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80014e6:	f000 fb19 	bl	8001b1c <SSD1306_UpdateScreen>

		SSD1306_GotoXY(65, 64 - 18);
 80014ea:	212e      	movs	r1, #46	; 0x2e
 80014ec:	2041      	movs	r0, #65	; 0x41
 80014ee:	f000 fba3 	bl	8001c38 <SSD1306_GotoXY>
		SSD1306_Puts("XABLAUUU", &Font_11x18, 1);
 80014f2:	2201      	movs	r2, #1
 80014f4:	4906      	ldr	r1, [pc, #24]	; (8001510 <HAL_GPIO_EXTI_Callback+0x70>)
 80014f6:	4808      	ldr	r0, [pc, #32]	; (8001518 <HAL_GPIO_EXTI_Callback+0x78>)
 80014f8:	f000 fc22 	bl	8001d40 <SSD1306_Puts>

		delay_us(1000);
 80014fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001500:	f001 f80a 	bl	8002518 <delay_us>
	}

}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40011000 	.word	0x40011000
 8001510:	20000008 	.word	0x20000008
 8001514:	0800705c 	.word	0x0800705c
 8001518:	0800706c 	.word	0x0800706c

0800151c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b090      	sub	sp, #64	; 0x40
 8001520:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	2228      	movs	r2, #40	; 0x28
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f002 fed8 	bl	80042e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153e:	2301      	movs	r3, #1
 8001540:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001546:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154c:	2301      	movs	r3, #1
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001550:	2302      	movs	r3, #2
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001558:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800155a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800155e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001560:	f107 0318 	add.w	r3, r7, #24
 8001564:	4618      	mov	r0, r3
 8001566:	f001 ffd7 	bl	8003518 <HAL_RCC_OscConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0x58>
		Error_Handler();
 8001570:	f000 f93a 	bl	80017e8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001574:	230f      	movs	r3, #15
 8001576:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001578:	2302      	movs	r3, #2
 800157a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001584:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fa42 	bl	8003a18 <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x82>
		Error_Handler();
 800159a:	f000 f925 	bl	80017e8 <Error_Handler>
	}
}
 800159e:	bf00      	nop
 80015a0:	3740      	adds	r7, #64	; 0x40
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <MX_I2C1_Init+0x54>)
 80015ae:	4a14      	ldr	r2, [pc, #80]	; (8001600 <MX_I2C1_Init+0x58>)
 80015b0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 50000;
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <MX_I2C1_Init+0x54>)
 80015b4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80015b8:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_I2C1_Init+0x54>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_I2C1_Init+0x54>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <MX_I2C1_Init+0x54>)
 80015c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015cc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_I2C1_Init+0x54>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_I2C1_Init+0x54>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_I2C1_Init+0x54>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_I2C1_Init+0x54>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_I2C1_Init+0x54>)
 80015e8:	f001 fb4c 	bl	8002c84 <HAL_I2C_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_I2C1_Init+0x4e>
		Error_Handler();
 80015f2:	f000 f8f9 	bl	80017e8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000022c 	.word	0x2000022c
 8001600:	40005400 	.word	0x40005400

08001604 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <MX_TIM1_Init+0x98>)
 8001622:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <MX_TIM1_Init+0x9c>)
 8001624:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <MX_TIM1_Init+0x98>)
 8001628:	2247      	movs	r2, #71	; 0x47
 800162a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MX_TIM1_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0xffff - 1;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <MX_TIM1_Init+0x98>)
 8001634:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001638:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_TIM1_Init+0x98>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <MX_TIM1_Init+0x98>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_TIM1_Init+0x98>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800164c:	4813      	ldr	r0, [pc, #76]	; (800169c <MX_TIM1_Init+0x98>)
 800164e:	f002 fb69 	bl	8003d24 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM1_Init+0x58>
		Error_Handler();
 8001658:	f000 f8c6 	bl	80017e8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <MX_TIM1_Init+0x98>)
 800166a:	f002 fbf5 	bl	8003e58 <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM1_Init+0x74>
		Error_Handler();
 8001674:	f000 f8b8 	bl	80017e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_TIM1_Init+0x98>)
 8001686:	f002 fda3 	bl	80041d0 <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8001690:	f000 f8aa 	bl	80017e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000028c 	.word	0x2000028c
 80016a0:	40012c00 	.word	0x40012c00

080016a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016b8:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <MX_GPIO_Init+0x134>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a46      	ldr	r2, [pc, #280]	; (80017d8 <MX_GPIO_Init+0x134>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <MX_GPIO_Init+0x134>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80016d0:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <MX_GPIO_Init+0x134>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a40      	ldr	r2, [pc, #256]	; (80017d8 <MX_GPIO_Init+0x134>)
 80016d6:	f043 0320 	orr.w	r3, r3, #32
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <MX_GPIO_Init+0x134>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016e8:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <MX_GPIO_Init+0x134>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a3a      	ldr	r2, [pc, #232]	; (80017d8 <MX_GPIO_Init+0x134>)
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <MX_GPIO_Init+0x134>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001700:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <MX_GPIO_Init+0x134>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a34      	ldr	r2, [pc, #208]	; (80017d8 <MX_GPIO_Init+0x134>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <MX_GPIO_Init+0x134>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED_ONB_Pin | RELE_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800171e:	482f      	ldr	r0, [pc, #188]	; (80017dc <MX_GPIO_Init+0x138>)
 8001720:	f001 fa67 	bl	8002bf2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11 | SSD_VCC_Pin, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800172a:	482d      	ldr	r0, [pc, #180]	; (80017e0 <MX_GPIO_Init+0x13c>)
 800172c:	f001 fa61 	bl	8002bf2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_ONB_Pin */
	GPIO_InitStruct.Pin = LED_ONB_Pin;
 8001730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001734:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2302      	movs	r3, #2
 8001740:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_ONB_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4619      	mov	r1, r3
 8001748:	4824      	ldr	r0, [pc, #144]	; (80017dc <MX_GPIO_Init+0x138>)
 800174a:	f001 f8b7 	bl	80028bc <HAL_GPIO_Init>

	/*Configure GPIO pin : RELE_Pin */
	GPIO_InitStruct.Pin = RELE_Pin;
 800174e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001752:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001758:	2301      	movs	r3, #1
 800175a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2302      	movs	r3, #2
 800175e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RELE_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	481d      	ldr	r0, [pc, #116]	; (80017dc <MX_GPIO_Init+0x138>)
 8001768:	f001 f8a8 	bl	80028bc <HAL_GPIO_Init>

	/*Configure GPIO pins : PB11 SSD_VCC_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | SSD_VCC_Pin;
 800176c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001770:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2302      	movs	r3, #2
 800177c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4619      	mov	r1, r3
 8001784:	4816      	ldr	r0, [pc, #88]	; (80017e0 <MX_GPIO_Init+0x13c>)
 8001786:	f001 f899 	bl	80028bc <HAL_GPIO_Init>

	/*Configure GPIO pin : B_SW_Pin */
	GPIO_InitStruct.Pin = B_SW_Pin;
 800178a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_GPIO_Init+0x140>)
 8001792:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B_SW_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	4619      	mov	r1, r3
 800179e:	4810      	ldr	r0, [pc, #64]	; (80017e0 <MX_GPIO_Init+0x13c>)
 80017a0:	f001 f88c 	bl	80028bc <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 80017a4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80017a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	4619      	mov	r1, r3
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <MX_GPIO_Init+0x13c>)
 80017ba:	f001 f87f 	bl	80028bc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2028      	movs	r0, #40	; 0x28
 80017c4:	f001 f843 	bl	800284e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017c8:	2028      	movs	r0, #40	; 0x28
 80017ca:	f001 f85c 	bl	8002886 <HAL_NVIC_EnableIRQ>

}
 80017ce:	bf00      	nop
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40011000 	.word	0x40011000
 80017e0:	40010c00 	.word	0x40010c00
 80017e4:	10110000 	.word	0x10110000

080017e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017f0:	e7fe      	b.n	80017f0 <Error_Handler+0x8>

080017f2 <SSD1306_Draw_intrologo>:

	}

}

void SSD1306_Draw_intrologo(const unsigned char *logo, uint8_t color) {
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af02      	add	r7, sp, #8
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	70fb      	strb	r3, [r7, #3]
	SSD1306_DrawBitmap(25, 0, logo, 128, 64, color);
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	b29b      	uxth	r3, r3
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	2340      	movs	r3, #64	; 0x40
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	2100      	movs	r1, #0
 800180e:	2019      	movs	r0, #25
 8001810:	f000 f890 	bl	8001934 <SSD1306_DrawBitmap>
	//SSD1306_InvertDisplay(1);

	SSD1306_UpdateScreen();
 8001814:	f000 f982 	bl	8001b1c <SSD1306_UpdateScreen>
	//Set_Contrast(0);
	for (int i = 0; i < 5; i++) {
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e00e      	b.n	800183c <SSD1306_Draw_intrologo+0x4a>

		HAL_Delay(100);
 800181e:	2064      	movs	r0, #100	; 0x64
 8001820:	f000 ff1a 	bl	8002658 <HAL_Delay>
		Set_Contrast(0);
 8001824:	2000      	movs	r0, #0
 8001826:	f000 f8ed 	bl	8001a04 <Set_Contrast>
		HAL_Delay(100);
 800182a:	2064      	movs	r0, #100	; 0x64
 800182c:	f000 ff14 	bl	8002658 <HAL_Delay>
		Set_Contrast(255);
 8001830:	20ff      	movs	r0, #255	; 0xff
 8001832:	f000 f8e7 	bl	8001a04 <Set_Contrast>
	for (int i = 0; i < 5; i++) {
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3301      	adds	r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b04      	cmp	r3, #4
 8001840:	dded      	ble.n	800181e <SSD1306_Draw_intrologo+0x2c>

	}
	HAL_Delay(1200);
 8001842:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001846:	f000 ff07 	bl	8002658 <HAL_Delay>
	//SSD1306_InvertDisplay(0);
	SSD1306_Clear();
 800184a:	f000 fcba 	bl	80021c2 <SSD1306_Clear>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <SSD1306_DrawIntroFreezer>:

void SSD1306_DrawIntroFreezer(int delay) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

	SSD1306_Draw_intrologo(Logo_GO_bmp, 1);
 8001860:	2101      	movs	r1, #1
 8001862:	4815      	ldr	r0, [pc, #84]	; (80018b8 <SSD1306_DrawIntroFreezer+0x60>)
 8001864:	f7ff ffc5 	bl	80017f2 <SSD1306_Draw_intrologo>

	SSD1306_GotoXY(2, 0);
 8001868:	2100      	movs	r1, #0
 800186a:	2002      	movs	r0, #2
 800186c:	f000 f9e4 	bl	8001c38 <SSD1306_GotoXY>
	SSD1306_Puts("Controlador", &Font_11x18, 1);
 8001870:	2201      	movs	r2, #1
 8001872:	4912      	ldr	r1, [pc, #72]	; (80018bc <SSD1306_DrawIntroFreezer+0x64>)
 8001874:	4812      	ldr	r0, [pc, #72]	; (80018c0 <SSD1306_DrawIntroFreezer+0x68>)
 8001876:	f000 fa63 	bl	8001d40 <SSD1306_Puts>

	SSD1306_GotoXY(4, 20);
 800187a:	2114      	movs	r1, #20
 800187c:	2004      	movs	r0, #4
 800187e:	f000 f9db 	bl	8001c38 <SSD1306_GotoXY>
	SSD1306_Puts("Freezer", &Font_16x26, 1);
 8001882:	2201      	movs	r2, #1
 8001884:	490f      	ldr	r1, [pc, #60]	; (80018c4 <SSD1306_DrawIntroFreezer+0x6c>)
 8001886:	4810      	ldr	r0, [pc, #64]	; (80018c8 <SSD1306_DrawIntroFreezer+0x70>)
 8001888:	f000 fa5a 	bl	8001d40 <SSD1306_Puts>

	SSD1306_GotoXY(5, 48);
 800188c:	2130      	movs	r1, #48	; 0x30
 800188e:	2005      	movs	r0, #5
 8001890:	f000 f9d2 	bl	8001c38 <SSD1306_GotoXY>
	SSD1306_Puts("v1.0 by Guilherme!", &Font_7x10, 1);
 8001894:	2201      	movs	r2, #1
 8001896:	490d      	ldr	r1, [pc, #52]	; (80018cc <SSD1306_DrawIntroFreezer+0x74>)
 8001898:	480d      	ldr	r0, [pc, #52]	; (80018d0 <SSD1306_DrawIntroFreezer+0x78>)
 800189a:	f000 fa51 	bl	8001d40 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 800189e:	f000 f93d 	bl	8001b1c <SSD1306_UpdateScreen>
	HAL_Delay(delay);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fed7 	bl	8002658 <HAL_Delay>

	SSD1306_Clear();
 80018aa:	f000 fc8a 	bl	80021c2 <SSD1306_Clear>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	08009cd4 	.word	0x08009cd4
 80018bc:	20000008 	.word	0x20000008
 80018c0:	08007088 	.word	0x08007088
 80018c4:	20000010 	.word	0x20000010
 80018c8:	08007094 	.word	0x08007094
 80018cc:	20000000 	.word	0x20000000
 80018d0:	0800709c 	.word	0x0800709c

080018d4 <ssd1306_command>:

}

/*----------- I2C -----------*/

void ssd1306_command(unsigned char Comando) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af02      	add	r7, sp, #8
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	unsigned char DATA[2];

	DATA[0] = 0x00;
 80018de:	2300      	movs	r3, #0
 80018e0:	733b      	strb	r3, [r7, #12]
	DATA[1] = Comando;
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, 0x78, DATA, 2, 10000);
 80018e6:	f107 020c 	add.w	r2, r7, #12
 80018ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2302      	movs	r3, #2
 80018f2:	2178      	movs	r1, #120	; 0x78
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <ssd1306_command+0x30>)
 80018f6:	f001 fb09 	bl	8002f0c <HAL_I2C_Master_Transmit>

}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000022c 	.word	0x2000022c

08001908 <SSD1306_InvertDisplay>:

void SSD1306_Stopscroll(void) {
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
}

void SSD1306_InvertDisplay(int i) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if (i)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <SSD1306_InvertDisplay+0x1a>
		SSD1306_WRITECOMMAND(SSD1306_INVERTDISPLAY);
 8001916:	22a7      	movs	r2, #167	; 0xa7
 8001918:	2100      	movs	r1, #0
 800191a:	2078      	movs	r0, #120	; 0x78
 800191c:	f000 fc5a 	bl	80021d4 <ssd1306_I2C_Write>

	else
		SSD1306_WRITECOMMAND(SSD1306_NORMALDISPLAY);

}
 8001920:	e004      	b.n	800192c <SSD1306_InvertDisplay+0x24>
		SSD1306_WRITECOMMAND(SSD1306_NORMALDISPLAY);
 8001922:	22a6      	movs	r2, #166	; 0xa6
 8001924:	2100      	movs	r1, #0
 8001926:	2078      	movs	r0, #120	; 0x78
 8001928:	f000 fc54 	bl	80021d4 <ssd1306_I2C_Write>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <SSD1306_DrawBitmap>:

void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char *bitmap,
		int16_t w, int16_t h, uint16_t color) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60ba      	str	r2, [r7, #8]
 800193c:	461a      	mov	r2, r3
 800193e:	4603      	mov	r3, r0
 8001940:	81fb      	strh	r3, [r7, #14]
 8001942:	460b      	mov	r3, r1
 8001944:	81bb      	strh	r3, [r7, #12]
 8001946:	4613      	mov	r3, r2
 8001948:	80fb      	strh	r3, [r7, #6]

	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800194a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194e:	3307      	adds	r3, #7
 8001950:	2b00      	cmp	r3, #0
 8001952:	da00      	bge.n	8001956 <SSD1306_DrawBitmap+0x22>
 8001954:	3307      	adds	r3, #7
 8001956:	10db      	asrs	r3, r3, #3
 8001958:	823b      	strh	r3, [r7, #16]
	uint8_t byte = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]

	for (int16_t j = 0; j < h; j++, y++) {
 800195e:	2300      	movs	r3, #0
 8001960:	82bb      	strh	r3, [r7, #20]
 8001962:	e044      	b.n	80019ee <SSD1306_DrawBitmap+0xba>
		for (int16_t i = 0; i < w; i++) {
 8001964:	2300      	movs	r3, #0
 8001966:	827b      	strh	r3, [r7, #18]
 8001968:	e02f      	b.n	80019ca <SSD1306_DrawBitmap+0x96>
			if (i & 7) {
 800196a:	8a7b      	ldrh	r3, [r7, #18]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <SSD1306_DrawBitmap+0x48>
				byte <<= 1;
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	75fb      	strb	r3, [r7, #23]
 800197a:	e012      	b.n	80019a2 <SSD1306_DrawBitmap+0x6e>
			} else {
				byte =
						(*(const unsigned char*) (&bitmap[j * byteWidth + i / 8]));
 800197c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001980:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001984:	fb02 f203 	mul.w	r2, r2, r3
 8001988:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800198c:	2b00      	cmp	r3, #0
 800198e:	da00      	bge.n	8001992 <SSD1306_DrawBitmap+0x5e>
 8001990:	3307      	adds	r3, #7
 8001992:	10db      	asrs	r3, r3, #3
 8001994:	b21b      	sxth	r3, r3
 8001996:	4413      	add	r3, r2
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	4413      	add	r3, r2
				byte =
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	75fb      	strb	r3, [r7, #23]
			}
			if (byte & 0x80)
 80019a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da09      	bge.n	80019be <SSD1306_DrawBitmap+0x8a>
				SSD1306_DrawPixel(x + i, y, color);
 80019aa:	89fa      	ldrh	r2, [r7, #14]
 80019ac:	8a7b      	ldrh	r3, [r7, #18]
 80019ae:	4413      	add	r3, r2
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	89b9      	ldrh	r1, [r7, #12]
 80019b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f8df 	bl	8001b7c <SSD1306_DrawPixel>
		for (int16_t i = 0; i < w; i++) {
 80019be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	827b      	strh	r3, [r7, #18]
 80019ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	dbc9      	blt.n	800196a <SSD1306_DrawBitmap+0x36>
	for (int16_t j = 0; j < h; j++, y++) {
 80019d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3301      	adds	r3, #1
 80019de:	b29b      	uxth	r3, r3
 80019e0:	82bb      	strh	r3, [r7, #20]
 80019e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	81bb      	strh	r3, [r7, #12]
 80019ee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80019f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbb4      	blt.n	8001964 <SSD1306_DrawBitmap+0x30>
		}
	}
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <Set_Contrast>:

void Set_Contrast(unsigned char Level) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]

	unsigned char DATA[4];

	DATA[0] = 0x00;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	733b      	strb	r3, [r7, #12]
	DATA[1] = 0x81;
 8001a12:	2381      	movs	r3, #129	; 0x81
 8001a14:	737b      	strb	r3, [r7, #13]
	DATA[2] = Level;
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&hi2c1, 0x78, DATA, 3, 10000);
 8001a1a:	f107 020c 	add.w	r2, r7, #12
 8001a1e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2303      	movs	r3, #3
 8001a26:	2178      	movs	r1, #120	; 0x78
 8001a28:	480c      	ldr	r0, [pc, #48]	; (8001a5c <Set_Contrast+0x58>)
 8001a2a:	f001 fa6f 	bl	8002f0c <HAL_I2C_Master_Transmit>

	DATA[0] = 0x00;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	733b      	strb	r3, [r7, #12]
	DATA[1] = 0x21;
 8001a32:	2321      	movs	r3, #33	; 0x21
 8001a34:	737b      	strb	r3, [r7, #13]
	DATA[2] = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73bb      	strb	r3, [r7, #14]
	DATA[3] = 127;
 8001a3a:	237f      	movs	r3, #127	; 0x7f
 8001a3c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, (0x78 << 1) | 1, DATA, 4, 10000);
 8001a3e:	f107 020c 	add.w	r2, r7, #12
 8001a42:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2304      	movs	r3, #4
 8001a4a:	21f1      	movs	r1, #241	; 0xf1
 8001a4c:	4803      	ldr	r0, [pc, #12]	; (8001a5c <Set_Contrast+0x58>)
 8001a4e:	f001 fa5d 	bl	8002f0c <HAL_I2C_Master_Transmit>

}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000022c 	.word	0x2000022c

08001a60 <OLED_INIT>:

void OLED_INIT() {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
	unsigned char vccstate = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]
	 MEMR[i] = 0;

	 }*/

	// Init sequence
	ssd1306_command(0xAE);                    // 0xAE
 8001a6a:	20ae      	movs	r0, #174	; 0xae
 8001a6c:	f7ff ff32 	bl	80018d4 <ssd1306_command>
	ssd1306_command(0xD5);            // 0xD5
 8001a70:	20d5      	movs	r0, #213	; 0xd5
 8001a72:	f7ff ff2f 	bl	80018d4 <ssd1306_command>
	ssd1306_command(0x80);                           // the suggested ratio 0x80
 8001a76:	2080      	movs	r0, #128	; 0x80
 8001a78:	f7ff ff2c 	bl	80018d4 <ssd1306_command>

	ssd1306_command(0xA8);                  // 0xA8
 8001a7c:	20a8      	movs	r0, #168	; 0xa8
 8001a7e:	f7ff ff29 	bl	80018d4 <ssd1306_command>
	ssd1306_command(64 - 1);
 8001a82:	203f      	movs	r0, #63	; 0x3f
 8001a84:	f7ff ff26 	bl	80018d4 <ssd1306_command>

	ssd1306_command(0xD3);              // 0xD3
 8001a88:	20d3      	movs	r0, #211	; 0xd3
 8001a8a:	f7ff ff23 	bl	80018d4 <ssd1306_command>
	ssd1306_command(0x0);                                   // no offset
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff ff20 	bl	80018d4 <ssd1306_command>
	ssd1306_command(0x40 | 0x0);            // line #0
 8001a94:	2040      	movs	r0, #64	; 0x40
 8001a96:	f7ff ff1d 	bl	80018d4 <ssd1306_command>
	ssd1306_command(0x8D);                    // 0x8D
 8001a9a:	208d      	movs	r0, #141	; 0x8d
 8001a9c:	f7ff ff1a 	bl	80018d4 <ssd1306_command>
	if (vccstate == 0x1) {
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d103      	bne.n	8001aae <OLED_INIT+0x4e>
		ssd1306_command(0x10);
 8001aa6:	2010      	movs	r0, #16
 8001aa8:	f7ff ff14 	bl	80018d4 <ssd1306_command>
 8001aac:	e002      	b.n	8001ab4 <OLED_INIT+0x54>
	} else {
		ssd1306_command(0x14);
 8001aae:	2014      	movs	r0, #20
 8001ab0:	f7ff ff10 	bl	80018d4 <ssd1306_command>
	}
	ssd1306_command(0x20);                    // 0x20
 8001ab4:	2020      	movs	r0, #32
 8001ab6:	f7ff ff0d 	bl	80018d4 <ssd1306_command>
	ssd1306_command(0x00);                                // 0x0 act like ks0108
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff ff0a 	bl	80018d4 <ssd1306_command>
	ssd1306_command(0xA0 | 0x1);
 8001ac0:	20a1      	movs	r0, #161	; 0xa1
 8001ac2:	f7ff ff07 	bl	80018d4 <ssd1306_command>
	ssd1306_command(0xC8);
 8001ac6:	20c8      	movs	r0, #200	; 0xc8
 8001ac8:	f7ff ff04 	bl	80018d4 <ssd1306_command>
	 else
	 { ssd1306_command(0xAF); }

	 #endif
	 */
	ssd1306_command(0xD9);                  // 0xd9
 8001acc:	20d9      	movs	r0, #217	; 0xd9
 8001ace:	f7ff ff01 	bl	80018d4 <ssd1306_command>
	if (vccstate == 0x1) {
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d103      	bne.n	8001ae0 <OLED_INIT+0x80>
		ssd1306_command(0x22);
 8001ad8:	2022      	movs	r0, #34	; 0x22
 8001ada:	f7ff fefb 	bl	80018d4 <ssd1306_command>
 8001ade:	e002      	b.n	8001ae6 <OLED_INIT+0x86>
	} else {
		ssd1306_command(0xF1);
 8001ae0:	20f1      	movs	r0, #241	; 0xf1
 8001ae2:	f7ff fef7 	bl	80018d4 <ssd1306_command>
	}
	ssd1306_command(0xDB);                 // 0xDB
 8001ae6:	20db      	movs	r0, #219	; 0xdb
 8001ae8:	f7ff fef4 	bl	80018d4 <ssd1306_command>
	ssd1306_command(0x40);
 8001aec:	2040      	movs	r0, #64	; 0x40
 8001aee:	f7ff fef1 	bl	80018d4 <ssd1306_command>
	ssd1306_command(0xA4);           // 0xA4
 8001af2:	20a4      	movs	r0, #164	; 0xa4
 8001af4:	f7ff feee 	bl	80018d4 <ssd1306_command>
	ssd1306_command(0xA6);                 // 0xA6
 8001af8:	20a6      	movs	r0, #166	; 0xa6
 8001afa:	f7ff feeb 	bl	80018d4 <ssd1306_command>

	ssd1306_command(0x2E);
 8001afe:	202e      	movs	r0, #46	; 0x2e
 8001b00:	f7ff fee8 	bl	80018d4 <ssd1306_command>

	//Inicia om X= 0 e Y = 0;

	Set_Contrast(0);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff ff7d 	bl	8001a04 <Set_Contrast>

	//FIM

	ssd1306_command(0xAF);                 //--turn on oled panel
 8001b0a:	20af      	movs	r0, #175	; 0xaf
 8001b0c:	f7ff fee2 	bl	80018d4 <ssd1306_command>

	//OLED_DISPLAY();
	SSD1306_UpdateScreen();
 8001b10:	f000 f804 	bl	8001b1c <SSD1306_UpdateScreen>

}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af02      	add	r7, sp, #8

	SSD1306_Buffer[0] = 0x40;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <SSD1306_UpdateScreen+0x28>)
 8001b24:	2240      	movs	r2, #64	; 0x40
 8001b26:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, SSD1306_I2C_ADDR, SSD1306_Buffer, 1025,
 8001b28:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	f240 4301 	movw	r3, #1025	; 0x401
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <SSD1306_UpdateScreen+0x28>)
 8001b34:	2178      	movs	r1, #120	; 0x78
 8001b36:	4804      	ldr	r0, [pc, #16]	; (8001b48 <SSD1306_UpdateScreen+0x2c>)
 8001b38:	f001 f9e8 	bl	8002f0c <HAL_I2C_Master_Transmit>
			10000);

}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200002d4 	.word	0x200002d4
 8001b48:	2000022c 	.word	0x2000022c

08001b4c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF,
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <SSD1306_Fill+0x14>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e000      	b.n	8001b62 <SSD1306_Fill+0x16>
 8001b60:	23ff      	movs	r3, #255	; 0xff
 8001b62:	f240 4201 	movw	r2, #1025	; 0x401
 8001b66:	4619      	mov	r1, r3
 8001b68:	4803      	ldr	r0, [pc, #12]	; (8001b78 <SSD1306_Fill+0x2c>)
 8001b6a:	f002 fbb9 	bl	80042e0 <memset>
			sizeof(SSD1306_Buffer));
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200002d4 	.word	0x200002d4

08001b7c <SSD1306_DrawPixel>:



 }*/

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
 8001b86:	460b      	mov	r3, r1
 8001b88:	80bb      	strh	r3, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	70fb      	strb	r3, [r7, #3]

	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	2b7f      	cmp	r3, #127	; 0x7f
 8001b92:	d848      	bhi.n	8001c26 <SSD1306_DrawPixel+0xaa>
 8001b94:	88bb      	ldrh	r3, [r7, #4]
 8001b96:	2b3f      	cmp	r3, #63	; 0x3f
 8001b98:	d845      	bhi.n	8001c26 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001b9a:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <SSD1306_DrawPixel+0xb4>)
 8001b9c:	791b      	ldrb	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d006      	beq.n	8001bb0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t) !color;
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2301      	moveq	r3, #1
 8001baa:	2300      	movne	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d11a      	bne.n	8001bec <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y & 7);
 8001bb6:	88fa      	ldrh	r2, [r7, #6]
 8001bb8:	88bb      	ldrh	r3, [r7, #4]
 8001bba:	08db      	lsrs	r3, r3, #3
 8001bbc:	b298      	uxth	r0, r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	01db      	lsls	r3, r3, #7
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <SSD1306_DrawPixel+0xb8>)
 8001bc6:	5cd3      	ldrb	r3, [r2, r3]
 8001bc8:	b25a      	sxtb	r2, r3
 8001bca:	88bb      	ldrh	r3, [r7, #4]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b259      	sxtb	r1, r3
 8001bdc:	88fa      	ldrh	r2, [r7, #6]
 8001bde:	4603      	mov	r3, r0
 8001be0:	01db      	lsls	r3, r3, #7
 8001be2:	4413      	add	r3, r2
 8001be4:	b2c9      	uxtb	r1, r1
 8001be6:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <SSD1306_DrawPixel+0xb8>)
 8001be8:	54d1      	strb	r1, [r2, r3]
 8001bea:	e01d      	b.n	8001c28 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8001bec:	88fa      	ldrh	r2, [r7, #6]
 8001bee:	88bb      	ldrh	r3, [r7, #4]
 8001bf0:	08db      	lsrs	r3, r3, #3
 8001bf2:	b298      	uxth	r0, r3
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	01db      	lsls	r3, r3, #7
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <SSD1306_DrawPixel+0xb8>)
 8001bfc:	5cd3      	ldrb	r3, [r2, r3]
 8001bfe:	b25a      	sxtb	r2, r3
 8001c00:	88bb      	ldrh	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	b25b      	sxtb	r3, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	4013      	ands	r3, r2
 8001c14:	b259      	sxtb	r1, r3
 8001c16:	88fa      	ldrh	r2, [r7, #6]
 8001c18:	4603      	mov	r3, r0
 8001c1a:	01db      	lsls	r3, r3, #7
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b2c9      	uxtb	r1, r1
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <SSD1306_DrawPixel+0xb8>)
 8001c22:	54d1      	strb	r1, [r2, r3]
 8001c24:	e000      	b.n	8001c28 <SSD1306_DrawPixel+0xac>
		return;
 8001c26:	bf00      	nop
	}
}
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	20000280 	.word	0x20000280
 8001c34:	200002d4 	.word	0x200002d4

08001c38 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460a      	mov	r2, r1
 8001c42:	80fb      	strh	r3, [r7, #6]
 8001c44:	4613      	mov	r3, r2
 8001c46:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001c48:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <SSD1306_GotoXY+0x28>)
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <SSD1306_GotoXY+0x28>)
 8001c50:	88bb      	ldrh	r3, [r7, #4]
 8001c52:	8053      	strh	r3, [r2, #2]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000280 	.word	0x20000280

08001c64 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t *Font, SSD1306_COLOR_t color) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	4613      	mov	r3, r2
 8001c72:	71bb      	strb	r3, [r7, #6]
//	) {
//		/* Error */
//		return 0;
//	}
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	e04b      	b.n	8001d12 <SSD1306_Putc+0xae>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	3b20      	subs	r3, #32
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	7849      	ldrb	r1, [r1, #1]
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	440b      	add	r3, r1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	e030      	b.n	8001d00 <SSD1306_Putc+0x9c>
			if ((b << j) & 0x8000) {
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d010      	beq.n	8001cd0 <SSD1306_Putc+0x6c>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8001cae:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <SSD1306_Putc+0xd8>)
 8001cb0:	881a      	ldrh	r2, [r3, #0]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b298      	uxth	r0, r3
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <SSD1306_Putc+0xd8>)
 8001cbc:	885a      	ldrh	r2, [r3, #2]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	79ba      	ldrb	r2, [r7, #6]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7ff ff57 	bl	8001b7c <SSD1306_DrawPixel>
 8001cce:	e014      	b.n	8001cfa <SSD1306_Putc+0x96>
						(SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <SSD1306_Putc+0xd8>)
 8001cd2:	881a      	ldrh	r2, [r3, #0]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	b298      	uxth	r0, r3
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <SSD1306_Putc+0xd8>)
 8001cde:	885a      	ldrh	r2, [r3, #2]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	b299      	uxth	r1, r3
 8001ce8:	79bb      	ldrb	r3, [r7, #6]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bf0c      	ite	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	2300      	movne	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f7ff ff41 	bl	8001b7c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d3c8      	bcc.n	8001c9e <SSD1306_Putc+0x3a>
	for (i = 0; i < Font->FontHeight; i++) {
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	785b      	ldrb	r3, [r3, #1]
 8001d16:	461a      	mov	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d3ad      	bcc.n	8001c7a <SSD1306_Putc+0x16>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <SSD1306_Putc+0xd8>)
 8001d20:	881a      	ldrh	r2, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <SSD1306_Putc+0xd8>)
 8001d2e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001d30:	79fb      	ldrb	r3, [r7, #7]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000280 	.word	0x20000280

08001d40 <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, SSD1306_COLOR_t color) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001d4e:	e012      	b.n	8001d76 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	79fa      	ldrb	r2, [r7, #7]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff83 	bl	8001c64 <SSD1306_Putc>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d002      	beq.n	8001d70 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	e008      	b.n	8001d82 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3301      	adds	r3, #1
 8001d74:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1e8      	bne.n	8001d50 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	781b      	ldrb	r3, [r3, #0]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
		SSD1306_COLOR_t c) {
 8001d8a:	b590      	push	{r4, r7, lr}
 8001d8c:	b087      	sub	sp, #28
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4604      	mov	r4, r0
 8001d92:	4608      	mov	r0, r1
 8001d94:	4611      	mov	r1, r2
 8001d96:	461a      	mov	r2, r3
 8001d98:	4623      	mov	r3, r4
 8001d9a:	80fb      	strh	r3, [r7, #6]
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	80bb      	strh	r3, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	2b7f      	cmp	r3, #127	; 0x7f
 8001dac:	d901      	bls.n	8001db2 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001dae:	237f      	movs	r3, #127	; 0x7f
 8001db0:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	2b7f      	cmp	r3, #127	; 0x7f
 8001db6:	d901      	bls.n	8001dbc <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001db8:	237f      	movs	r3, #127	; 0x7f
 8001dba:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001dbc:	88bb      	ldrh	r3, [r7, #4]
 8001dbe:	2b3f      	cmp	r3, #63	; 0x3f
 8001dc0:	d901      	bls.n	8001dc6 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001dc2:	233f      	movs	r3, #63	; 0x3f
 8001dc4:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001dc6:	883b      	ldrh	r3, [r7, #0]
 8001dc8:	2b3f      	cmp	r3, #63	; 0x3f
 8001dca:	d901      	bls.n	8001dd0 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001dcc:	233f      	movs	r3, #63	; 0x3f
 8001dce:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001dd0:	88fa      	ldrh	r2, [r7, #6]
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d205      	bcs.n	8001de4 <SSD1306_DrawLine+0x5a>
 8001dd8:	887a      	ldrh	r2, [r7, #2]
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	e004      	b.n	8001dee <SSD1306_DrawLine+0x64>
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	887b      	ldrh	r3, [r7, #2]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001df0:	88ba      	ldrh	r2, [r7, #4]
 8001df2:	883b      	ldrh	r3, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d205      	bcs.n	8001e04 <SSD1306_DrawLine+0x7a>
 8001df8:	883a      	ldrh	r2, [r7, #0]
 8001dfa:	88bb      	ldrh	r3, [r7, #4]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	e004      	b.n	8001e0e <SSD1306_DrawLine+0x84>
 8001e04:	88ba      	ldrh	r2, [r7, #4]
 8001e06:	883b      	ldrh	r3, [r7, #0]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001e10:	88fa      	ldrh	r2, [r7, #6]
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d201      	bcs.n	8001e1c <SSD1306_DrawLine+0x92>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e001      	b.n	8001e20 <SSD1306_DrawLine+0x96>
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e20:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8001e22:	88ba      	ldrh	r2, [r7, #4]
 8001e24:	883b      	ldrh	r3, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d201      	bcs.n	8001e2e <SSD1306_DrawLine+0xa4>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e001      	b.n	8001e32 <SSD1306_DrawLine+0xa8>
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8001e34:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e38:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dd06      	ble.n	8001e4e <SSD1306_DrawLine+0xc4>
 8001e40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e44:	0fda      	lsrs	r2, r3, #31
 8001e46:	4413      	add	r3, r2
 8001e48:	105b      	asrs	r3, r3, #1
 8001e4a:	b21b      	sxth	r3, r3
 8001e4c:	e006      	b.n	8001e5c <SSD1306_DrawLine+0xd2>
 8001e4e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e52:	0fda      	lsrs	r2, r3, #31
 8001e54:	4413      	add	r3, r2
 8001e56:	105b      	asrs	r3, r3, #1
 8001e58:	425b      	negs	r3, r3
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001e5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d129      	bne.n	8001eba <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001e66:	883a      	ldrh	r2, [r7, #0]
 8001e68:	88bb      	ldrh	r3, [r7, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d205      	bcs.n	8001e7a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001e6e:	883b      	ldrh	r3, [r7, #0]
 8001e70:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001e72:	88bb      	ldrh	r3, [r7, #4]
 8001e74:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001e76:	893b      	ldrh	r3, [r7, #8]
 8001e78:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d205      	bcs.n	8001e8e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001e8a:	893b      	ldrh	r3, [r7, #8]
 8001e8c:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001e8e:	88bb      	ldrh	r3, [r7, #4]
 8001e90:	82bb      	strh	r3, [r7, #20]
 8001e92:	e00c      	b.n	8001eae <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001e94:	8ab9      	ldrh	r1, [r7, #20]
 8001e96:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fe6d 	bl	8001b7c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001ea2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	82bb      	strh	r3, [r7, #20]
 8001eae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001eb2:	883b      	ldrh	r3, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	dded      	ble.n	8001e94 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8001eb8:	e05f      	b.n	8001f7a <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8001eba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d129      	bne.n	8001f16 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001ec2:	883a      	ldrh	r2, [r7, #0]
 8001ec4:	88bb      	ldrh	r3, [r7, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d205      	bcs.n	8001ed6 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001eca:	883b      	ldrh	r3, [r7, #0]
 8001ecc:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001ece:	88bb      	ldrh	r3, [r7, #4]
 8001ed0:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001ed2:	893b      	ldrh	r3, [r7, #8]
 8001ed4:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d205      	bcs.n	8001eea <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001ee6:	893b      	ldrh	r3, [r7, #8]
 8001ee8:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	82bb      	strh	r3, [r7, #20]
 8001eee:	e00c      	b.n	8001f0a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001ef0:	8abb      	ldrh	r3, [r7, #20]
 8001ef2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ef6:	88b9      	ldrh	r1, [r7, #4]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fe3f 	bl	8001b7c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001efe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	82bb      	strh	r3, [r7, #20]
 8001f0a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dded      	ble.n	8001ef0 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8001f14:	e031      	b.n	8001f7a <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001f16:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001f1a:	88b9      	ldrh	r1, [r7, #4]
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fe2c 	bl	8001b7c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001f24:	88fa      	ldrh	r2, [r7, #6]
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d103      	bne.n	8001f34 <SSD1306_DrawLine+0x1aa>
 8001f2c:	88ba      	ldrh	r2, [r7, #4]
 8001f2e:	883b      	ldrh	r3, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d021      	beq.n	8001f78 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8001f34:	8afb      	ldrh	r3, [r7, #22]
 8001f36:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001f38:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001f3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f40:	425b      	negs	r3, r3
 8001f42:	429a      	cmp	r2, r3
 8001f44:	dd08      	ble.n	8001f58 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001f46:	8afa      	ldrh	r2, [r7, #22]
 8001f48:	8a3b      	ldrh	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001f50:	89fa      	ldrh	r2, [r7, #14]
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	4413      	add	r3, r2
 8001f56:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8001f58:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001f5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dad8      	bge.n	8001f16 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001f64:	8afa      	ldrh	r2, [r7, #22]
 8001f66:	8a7b      	ldrh	r3, [r7, #18]
 8001f68:	4413      	add	r3, r2
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001f6e:	89ba      	ldrh	r2, [r7, #12]
 8001f70:	88bb      	ldrh	r3, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001f76:	e7ce      	b.n	8001f16 <SSD1306_DrawLine+0x18c>
			break;
 8001f78:	bf00      	nop
		}
	}
}
 8001f7a:	371c      	adds	r7, #28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd90      	pop	{r4, r7, pc}

08001f80 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y, x, y + h, c); /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		SSD1306_COLOR_t c) {
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af02      	add	r7, sp, #8
 8001f86:	4604      	mov	r4, r0
 8001f88:	4608      	mov	r0, r1
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4623      	mov	r3, r4
 8001f90:	80fb      	strh	r3, [r7, #6]
 8001f92:	4603      	mov	r3, r0
 8001f94:	80bb      	strh	r3, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	807b      	strh	r3, [r7, #2]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8001fa2:	d836      	bhi.n	8002012 <SSD1306_DrawFilledRectangle+0x92>
 8001fa4:	88bb      	ldrh	r3, [r7, #4]
 8001fa6:	2b3f      	cmp	r3, #63	; 0x3f
 8001fa8:	d833      	bhi.n	8002012 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001faa:	88fa      	ldrh	r2, [r7, #6]
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	4413      	add	r3, r2
 8001fb0:	2b7f      	cmp	r3, #127	; 0x7f
 8001fb2:	dd03      	ble.n	8001fbc <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001fba:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001fbc:	88ba      	ldrh	r2, [r7, #4]
 8001fbe:	883b      	ldrh	r3, [r7, #0]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	2b3f      	cmp	r3, #63	; 0x3f
 8001fc4:	dd03      	ble.n	8001fce <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001fc6:	88bb      	ldrh	r3, [r7, #4]
 8001fc8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001fcc:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	e018      	b.n	8002006 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	88bb      	ldrh	r3, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	b299      	uxth	r1, r3
 8001fde:	88fa      	ldrh	r2, [r7, #6]
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b29c      	uxth	r4, r3
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	88bb      	ldrh	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	88f8      	ldrh	r0, [r7, #6]
 8001ff2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	4622      	mov	r2, r4
 8001ffc:	f7ff fec5 	bl	8001d8a <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	3301      	adds	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	b29b      	uxth	r3, r3
 800200a:	883a      	ldrh	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d2e1      	bcs.n	8001fd4 <SSD1306_DrawFilledRectangle+0x54>
 8002010:	e000      	b.n	8002014 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8002012:	bf00      	nop
	}
}
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}

0800201a <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 800201a:	b590      	push	{r4, r7, lr}
 800201c:	b087      	sub	sp, #28
 800201e:	af00      	add	r7, sp, #0
 8002020:	4604      	mov	r4, r0
 8002022:	4608      	mov	r0, r1
 8002024:	4611      	mov	r1, r2
 8002026:	461a      	mov	r2, r3
 8002028:	4623      	mov	r3, r4
 800202a:	80fb      	strh	r3, [r7, #6]
 800202c:	4603      	mov	r3, r0
 800202e:	80bb      	strh	r3, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	f1c3 0301 	rsb	r3, r3, #1
 800203e:	b29b      	uxth	r3, r3
 8002040:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	461a      	mov	r2, r3
 800204a:	03d2      	lsls	r2, r2, #15
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	b29b      	uxth	r3, r3
 8002052:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002058:	887b      	ldrh	r3, [r7, #2]
 800205a:	81fb      	strh	r3, [r7, #14]

	SSD1306_DrawPixel(x0, y0 + r, c);
 800205c:	88f8      	ldrh	r0, [r7, #6]
 800205e:	88ba      	ldrh	r2, [r7, #4]
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	4413      	add	r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	787a      	ldrb	r2, [r7, #1]
 8002068:	4619      	mov	r1, r3
 800206a:	f7ff fd87 	bl	8001b7c <SSD1306_DrawPixel>
	SSD1306_DrawPixel(x0, y0 - r, c);
 800206e:	88f8      	ldrh	r0, [r7, #6]
 8002070:	88ba      	ldrh	r2, [r7, #4]
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	b29b      	uxth	r3, r3
 8002078:	787a      	ldrb	r2, [r7, #1]
 800207a:	4619      	mov	r1, r3
 800207c:	f7ff fd7e 	bl	8001b7c <SSD1306_DrawPixel>
	SSD1306_DrawPixel(x0 + r, y0, c);
 8002080:	88fa      	ldrh	r2, [r7, #6]
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	4413      	add	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	88b9      	ldrh	r1, [r7, #4]
 800208a:	787a      	ldrb	r2, [r7, #1]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fd75 	bl	8001b7c <SSD1306_DrawPixel>
	SSD1306_DrawPixel(x0 - r, y0, c);
 8002092:	88fa      	ldrh	r2, [r7, #6]
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	b29b      	uxth	r3, r3
 800209a:	88b9      	ldrh	r1, [r7, #4]
 800209c:	787a      	ldrb	r2, [r7, #1]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fd6c 	bl	8001b7c <SSD1306_DrawPixel>

	while (x < y) {
 80020a4:	e081      	b.n	80021aa <SSD1306_DrawCircle+0x190>
		if (f >= 0) {
 80020a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db0e      	blt.n	80020cc <SSD1306_DrawCircle+0xb2>
			y--;
 80020ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80020ba:	8a7b      	ldrh	r3, [r7, #18]
 80020bc:	3302      	adds	r3, #2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80020c2:	8afa      	ldrh	r2, [r7, #22]
 80020c4:	8a7b      	ldrh	r3, [r7, #18]
 80020c6:	4413      	add	r3, r2
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80020cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80020d8:	8abb      	ldrh	r3, [r7, #20]
 80020da:	3302      	adds	r3, #2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80020e0:	8afa      	ldrh	r2, [r7, #22]
 80020e2:	8abb      	ldrh	r3, [r7, #20]
 80020e4:	4413      	add	r3, r2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	82fb      	strh	r3, [r7, #22]

		SSD1306_DrawPixel(x0 + x, y0 + y, c);
 80020ea:	88fa      	ldrh	r2, [r7, #6]
 80020ec:	8a3b      	ldrh	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	b298      	uxth	r0, r3
 80020f2:	88ba      	ldrh	r2, [r7, #4]
 80020f4:	89fb      	ldrh	r3, [r7, #14]
 80020f6:	4413      	add	r3, r2
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	787a      	ldrb	r2, [r7, #1]
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7ff fd3d 	bl	8001b7c <SSD1306_DrawPixel>
		SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8002102:	88fa      	ldrh	r2, [r7, #6]
 8002104:	8a3b      	ldrh	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	b298      	uxth	r0, r3
 800210a:	88ba      	ldrh	r2, [r7, #4]
 800210c:	89fb      	ldrh	r3, [r7, #14]
 800210e:	4413      	add	r3, r2
 8002110:	b29b      	uxth	r3, r3
 8002112:	787a      	ldrb	r2, [r7, #1]
 8002114:	4619      	mov	r1, r3
 8002116:	f7ff fd31 	bl	8001b7c <SSD1306_DrawPixel>
		SSD1306_DrawPixel(x0 + x, y0 - y, c);
 800211a:	88fa      	ldrh	r2, [r7, #6]
 800211c:	8a3b      	ldrh	r3, [r7, #16]
 800211e:	4413      	add	r3, r2
 8002120:	b298      	uxth	r0, r3
 8002122:	88ba      	ldrh	r2, [r7, #4]
 8002124:	89fb      	ldrh	r3, [r7, #14]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	b29b      	uxth	r3, r3
 800212a:	787a      	ldrb	r2, [r7, #1]
 800212c:	4619      	mov	r1, r3
 800212e:	f7ff fd25 	bl	8001b7c <SSD1306_DrawPixel>
		SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8002132:	88fa      	ldrh	r2, [r7, #6]
 8002134:	8a3b      	ldrh	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	b298      	uxth	r0, r3
 800213a:	88ba      	ldrh	r2, [r7, #4]
 800213c:	89fb      	ldrh	r3, [r7, #14]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	b29b      	uxth	r3, r3
 8002142:	787a      	ldrb	r2, [r7, #1]
 8002144:	4619      	mov	r1, r3
 8002146:	f7ff fd19 	bl	8001b7c <SSD1306_DrawPixel>

		SSD1306_DrawPixel(x0 + y, y0 + x, c);
 800214a:	88fa      	ldrh	r2, [r7, #6]
 800214c:	89fb      	ldrh	r3, [r7, #14]
 800214e:	4413      	add	r3, r2
 8002150:	b298      	uxth	r0, r3
 8002152:	88ba      	ldrh	r2, [r7, #4]
 8002154:	8a3b      	ldrh	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	b29b      	uxth	r3, r3
 800215a:	787a      	ldrb	r2, [r7, #1]
 800215c:	4619      	mov	r1, r3
 800215e:	f7ff fd0d 	bl	8001b7c <SSD1306_DrawPixel>
		SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8002162:	88fa      	ldrh	r2, [r7, #6]
 8002164:	89fb      	ldrh	r3, [r7, #14]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	b298      	uxth	r0, r3
 800216a:	88ba      	ldrh	r2, [r7, #4]
 800216c:	8a3b      	ldrh	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	b29b      	uxth	r3, r3
 8002172:	787a      	ldrb	r2, [r7, #1]
 8002174:	4619      	mov	r1, r3
 8002176:	f7ff fd01 	bl	8001b7c <SSD1306_DrawPixel>
		SSD1306_DrawPixel(x0 + y, y0 - x, c);
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	89fb      	ldrh	r3, [r7, #14]
 800217e:	4413      	add	r3, r2
 8002180:	b298      	uxth	r0, r3
 8002182:	88ba      	ldrh	r2, [r7, #4]
 8002184:	8a3b      	ldrh	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	b29b      	uxth	r3, r3
 800218a:	787a      	ldrb	r2, [r7, #1]
 800218c:	4619      	mov	r1, r3
 800218e:	f7ff fcf5 	bl	8001b7c <SSD1306_DrawPixel>
		SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8002192:	88fa      	ldrh	r2, [r7, #6]
 8002194:	89fb      	ldrh	r3, [r7, #14]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	b298      	uxth	r0, r3
 800219a:	88ba      	ldrh	r2, [r7, #4]
 800219c:	8a3b      	ldrh	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	787a      	ldrb	r2, [r7, #1]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7ff fce9 	bl	8001b7c <SSD1306_DrawPixel>
	while (x < y) {
 80021aa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80021ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	f6ff af77 	blt.w	80020a6 <SSD1306_DrawCircle+0x8c>
	}
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd90      	pop	{r4, r7, pc}

080021c2 <SSD1306_Clear>:
		SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
		SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
	}
}

void SSD1306_Clear(void) {
 80021c2:	b580      	push	{r7, lr}
 80021c4:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7ff fcc0 	bl	8001b4c <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80021cc:	f7ff fca6 	bl	8001b1c <SSD1306_UpdateScreen>
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <ssd1306_I2C_Write>:
	for (i = 0; i < count; i++)
		dt[i + 1] = data[i];
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count + 1, 10);
}

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af02      	add	r7, sp, #8
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
 80021de:	460b      	mov	r3, r1
 80021e0:	71bb      	strb	r3, [r7, #6]
 80021e2:	4613      	mov	r3, r2
 80021e4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80021e6:	79bb      	ldrb	r3, [r7, #6]
 80021e8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80021ea:	797b      	ldrb	r3, [r7, #5]
 80021ec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	b299      	uxth	r1, r3
 80021f2:	f107 020c 	add.w	r2, r7, #12
 80021f6:	230a      	movs	r3, #10
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2302      	movs	r3, #2
 80021fc:	4803      	ldr	r0, [pc, #12]	; (800220c <ssd1306_I2C_Write+0x38>)
 80021fe:	f000 fe85 	bl	8002f0c <HAL_I2C_Master_Transmit>
}
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000022c 	.word	0x2000022c

08002210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_MspInit+0x5c>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	4a14      	ldr	r2, [pc, #80]	; (800226c <HAL_MspInit+0x5c>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6193      	str	r3, [r2, #24]
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_MspInit+0x5c>)
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_MspInit+0x5c>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4a0e      	ldr	r2, [pc, #56]	; (800226c <HAL_MspInit+0x5c>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	61d3      	str	r3, [r2, #28]
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_MspInit+0x5c>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <HAL_MspInit+0x60>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	4a04      	ldr	r2, [pc, #16]	; (8002270 <HAL_MspInit+0x60>)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	40021000 	.word	0x40021000
 8002270:	40010000 	.word	0x40010000

08002274 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <HAL_I2C_MspInit+0x70>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d123      	bne.n	80022dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_I2C_MspInit+0x74>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <HAL_I2C_MspInit+0x74>)
 800229a:	f043 0308 	orr.w	r3, r3, #8
 800229e:	6193      	str	r3, [r2, #24]
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_I2C_MspInit+0x74>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ac:	23c0      	movs	r3, #192	; 0xc0
 80022ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b0:	2312      	movs	r3, #18
 80022b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	4619      	mov	r1, r3
 80022be:	480b      	ldr	r0, [pc, #44]	; (80022ec <HAL_I2C_MspInit+0x78>)
 80022c0:	f000 fafc 	bl	80028bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_I2C_MspInit+0x74>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_I2C_MspInit+0x74>)
 80022ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022ce:	61d3      	str	r3, [r2, #28]
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_I2C_MspInit+0x74>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022dc:	bf00      	nop
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40005400 	.word	0x40005400
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010c00 	.word	0x40010c00

080022f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a09      	ldr	r2, [pc, #36]	; (8002324 <HAL_TIM_Base_MspInit+0x34>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10b      	bne.n	800231a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_TIM_Base_MspInit+0x38>)
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	4a08      	ldr	r2, [pc, #32]	; (8002328 <HAL_TIM_Base_MspInit+0x38>)
 8002308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800230c:	6193      	str	r3, [r2, #24]
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_TIM_Base_MspInit+0x38>)
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40021000 	.word	0x40021000

0800232c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <NMI_Handler+0x4>

08002332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002336:	e7fe      	b.n	8002336 <HardFault_Handler+0x4>

08002338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800233c:	e7fe      	b.n	800233c <MemManage_Handler+0x4>

0800233e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002342:	e7fe      	b.n	8002342 <BusFault_Handler+0x4>

08002344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <UsageFault_Handler+0x4>

0800234a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002372:	f000 f955 	bl	8002620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}

0800237a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_SW_Pin);
 800237e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002382:	f000 fc67 	bl	8002c54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}

0800238a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
	return 1;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <_kill>:

int _kill(int pid, int sig)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023a2:	f001 ff73 	bl	800428c <__errno>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2216      	movs	r2, #22
 80023aa:	601a      	str	r2, [r3, #0]
	return -1;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_exit>:

void _exit (int status)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ffe7 	bl	8002398 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023ca:	e7fe      	b.n	80023ca <_exit+0x12>

080023cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e00a      	b.n	80023f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023de:	f3af 8000 	nop.w
 80023e2:	4601      	mov	r1, r0
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	60ba      	str	r2, [r7, #8]
 80023ea:	b2ca      	uxtb	r2, r1
 80023ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3301      	adds	r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	dbf0      	blt.n	80023de <_read+0x12>
	}

return len;
 80023fc:	687b      	ldr	r3, [r7, #4]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e009      	b.n	800242c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	60ba      	str	r2, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	dbf1      	blt.n	8002418 <_write+0x12>
	}
	return len;
 8002434:	687b      	ldr	r3, [r7, #4]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_close>:

int _close(int file)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
	return -1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002464:	605a      	str	r2, [r3, #4]
	return 0;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <_isatty>:

int _isatty(int file)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
	return 1;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002486:	b480      	push	{r7}
 8002488:	b085      	sub	sp, #20
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
	return 0;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
	...

080024a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a8:	4a14      	ldr	r2, [pc, #80]	; (80024fc <_sbrk+0x5c>)
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <_sbrk+0x60>)
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <_sbrk+0x64>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <_sbrk+0x64>)
 80024be:	4a12      	ldr	r2, [pc, #72]	; (8002508 <_sbrk+0x68>)
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d207      	bcs.n	80024e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d0:	f001 fedc 	bl	800428c <__errno>
 80024d4:	4603      	mov	r3, r0
 80024d6:	220c      	movs	r2, #12
 80024d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024da:	f04f 33ff 	mov.w	r3, #4294967295
 80024de:	e009      	b.n	80024f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <_sbrk+0x64>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <_sbrk+0x64>)
 80024f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f2:	68fb      	ldr	r3, [r7, #12]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20005000 	.word	0x20005000
 8002500:	00000400 	.word	0x00000400
 8002504:	20000220 	.word	0x20000220
 8002508:	200006f0 	.word	0x200006f0

0800250c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <delay_us>:
#include "main.h"

extern TIM_HandleTypeDef htim1;

void delay_us (uint16_t us)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <delay_us+0x2c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2200      	movs	r2, #0
 8002528:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800252a:	bf00      	nop
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <delay_us+0x2c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	429a      	cmp	r2, r3
 8002536:	d3f9      	bcc.n	800252c <delay_us+0x14>
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	2000028c 	.word	0x2000028c

08002548 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800254a:	490d      	ldr	r1, [pc, #52]	; (8002580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002550:	e002      	b.n	8002558 <LoopCopyDataInit>

08002552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002556:	3304      	adds	r3, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800255c:	d3f9      	bcc.n	8002552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002560:	4c0a      	ldr	r4, [pc, #40]	; (800258c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002564:	e001      	b.n	800256a <LoopFillZerobss>

08002566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002568:	3204      	adds	r2, #4

0800256a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800256c:	d3fb      	bcc.n	8002566 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800256e:	f7ff ffcd 	bl	800250c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002572:	f001 fe91 	bl	8004298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002576:	f7fe fea1 	bl	80012bc <main>
  bx lr
 800257a:	4770      	bx	lr
  ldr r0, =_sdata
 800257c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002580:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002584:	0800a4d4 	.word	0x0800a4d4
  ldr r2, =_sbss
 8002588:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800258c:	200006ec 	.word	0x200006ec

08002590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <ADC1_2_IRQHandler>
	...

08002594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_Init+0x28>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <HAL_Init+0x28>)
 800259e:	f043 0310 	orr.w	r3, r3, #16
 80025a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a4:	2003      	movs	r0, #3
 80025a6:	f000 f947 	bl	8002838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025aa:	200f      	movs	r0, #15
 80025ac:	f000 f808 	bl	80025c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b0:	f7ff fe2e 	bl	8002210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40022000 	.word	0x40022000

080025c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_InitTick+0x54>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_InitTick+0x58>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f95f 	bl	80028a2 <HAL_SYSTICK_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00e      	b.n	800260c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b0f      	cmp	r3, #15
 80025f2:	d80a      	bhi.n	800260a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f4:	2200      	movs	r2, #0
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295
 80025fc:	f000 f927 	bl	800284e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <HAL_InitTick+0x5c>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000020 	.word	0x20000020
 8002618:	20000028 	.word	0x20000028
 800261c:	20000024 	.word	0x20000024

08002620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_IncTick+0x1c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_IncTick+0x20>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4413      	add	r3, r2
 8002630:	4a03      	ldr	r2, [pc, #12]	; (8002640 <HAL_IncTick+0x20>)
 8002632:	6013      	str	r3, [r2, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	20000028 	.word	0x20000028
 8002640:	200006d8 	.word	0x200006d8

08002644 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;
 8002648:	4b02      	ldr	r3, [pc, #8]	; (8002654 <HAL_GetTick+0x10>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	200006d8 	.word	0x200006d8

08002658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff fff0 	bl	8002644 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d005      	beq.n	800267e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_Delay+0x44>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800267e:	bf00      	nop
 8002680:	f7ff ffe0 	bl	8002644 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	429a      	cmp	r2, r3
 800268e:	d8f7      	bhi.n	8002680 <HAL_Delay+0x28>
  {
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000028 	.word	0x20000028

080026a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026bc:	4013      	ands	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d2:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	60d3      	str	r3, [r2, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <__NVIC_GetPriorityGrouping+0x18>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f003 0307 	and.w	r3, r3, #7
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	2b00      	cmp	r3, #0
 8002714:	db0b      	blt.n	800272e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	4906      	ldr	r1, [pc, #24]	; (8002738 <__NVIC_EnableIRQ+0x34>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2001      	movs	r0, #1
 8002726:	fa00 f202 	lsl.w	r2, r0, r2
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	e000e100 	.word	0xe000e100

0800273c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	2b00      	cmp	r3, #0
 800274e:	db0a      	blt.n	8002766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	490c      	ldr	r1, [pc, #48]	; (8002788 <__NVIC_SetPriority+0x4c>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	0112      	lsls	r2, r2, #4
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	440b      	add	r3, r1
 8002760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002764:	e00a      	b.n	800277c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4908      	ldr	r1, [pc, #32]	; (800278c <__NVIC_SetPriority+0x50>)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3b04      	subs	r3, #4
 8002774:	0112      	lsls	r2, r2, #4
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	440b      	add	r3, r1
 800277a:	761a      	strb	r2, [r3, #24]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000e100 	.word	0xe000e100
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f1c3 0307 	rsb	r3, r3, #7
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	bf28      	it	cs
 80027ae:	2304      	movcs	r3, #4
 80027b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d902      	bls.n	80027c0 <NVIC_EncodePriority+0x30>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3b03      	subs	r3, #3
 80027be:	e000      	b.n	80027c2 <NVIC_EncodePriority+0x32>
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	401a      	ands	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	43d9      	mvns	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	4313      	orrs	r3, r2
         );
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3724      	adds	r7, #36	; 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002804:	d301      	bcc.n	800280a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002806:	2301      	movs	r3, #1
 8002808:	e00f      	b.n	800282a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <SysTick_Config+0x40>)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002812:	210f      	movs	r1, #15
 8002814:	f04f 30ff 	mov.w	r0, #4294967295
 8002818:	f7ff ff90 	bl	800273c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <SysTick_Config+0x40>)
 800281e:	2200      	movs	r2, #0
 8002820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002822:	4b04      	ldr	r3, [pc, #16]	; (8002834 <SysTick_Config+0x40>)
 8002824:	2207      	movs	r2, #7
 8002826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	e000e010 	.word	0xe000e010

08002838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ff2d 	bl	80026a0 <__NVIC_SetPriorityGrouping>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	4603      	mov	r3, r0
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002860:	f7ff ff42 	bl	80026e8 <__NVIC_GetPriorityGrouping>
 8002864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	6978      	ldr	r0, [r7, #20]
 800286c:	f7ff ff90 	bl	8002790 <NVIC_EncodePriority>
 8002870:	4602      	mov	r2, r0
 8002872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002876:	4611      	mov	r1, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff5f 	bl	800273c <__NVIC_SetPriority>
}
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff35 	bl	8002704 <__NVIC_EnableIRQ>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff ffa2 	bl	80027f4 <SysTick_Config>
 80028b0:	4603      	mov	r3, r0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028bc:	b480      	push	{r7}
 80028be:	b08b      	sub	sp, #44	; 0x2c
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028c6:	2300      	movs	r3, #0
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ce:	e169      	b.n	8002ba4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028d0:	2201      	movs	r2, #1
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	f040 8158 	bne.w	8002b9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4a9a      	ldr	r2, [pc, #616]	; (8002b5c <HAL_GPIO_Init+0x2a0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d05e      	beq.n	80029b6 <HAL_GPIO_Init+0xfa>
 80028f8:	4a98      	ldr	r2, [pc, #608]	; (8002b5c <HAL_GPIO_Init+0x2a0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d875      	bhi.n	80029ea <HAL_GPIO_Init+0x12e>
 80028fe:	4a98      	ldr	r2, [pc, #608]	; (8002b60 <HAL_GPIO_Init+0x2a4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d058      	beq.n	80029b6 <HAL_GPIO_Init+0xfa>
 8002904:	4a96      	ldr	r2, [pc, #600]	; (8002b60 <HAL_GPIO_Init+0x2a4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d86f      	bhi.n	80029ea <HAL_GPIO_Init+0x12e>
 800290a:	4a96      	ldr	r2, [pc, #600]	; (8002b64 <HAL_GPIO_Init+0x2a8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d052      	beq.n	80029b6 <HAL_GPIO_Init+0xfa>
 8002910:	4a94      	ldr	r2, [pc, #592]	; (8002b64 <HAL_GPIO_Init+0x2a8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d869      	bhi.n	80029ea <HAL_GPIO_Init+0x12e>
 8002916:	4a94      	ldr	r2, [pc, #592]	; (8002b68 <HAL_GPIO_Init+0x2ac>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d04c      	beq.n	80029b6 <HAL_GPIO_Init+0xfa>
 800291c:	4a92      	ldr	r2, [pc, #584]	; (8002b68 <HAL_GPIO_Init+0x2ac>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d863      	bhi.n	80029ea <HAL_GPIO_Init+0x12e>
 8002922:	4a92      	ldr	r2, [pc, #584]	; (8002b6c <HAL_GPIO_Init+0x2b0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d046      	beq.n	80029b6 <HAL_GPIO_Init+0xfa>
 8002928:	4a90      	ldr	r2, [pc, #576]	; (8002b6c <HAL_GPIO_Init+0x2b0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d85d      	bhi.n	80029ea <HAL_GPIO_Init+0x12e>
 800292e:	2b12      	cmp	r3, #18
 8002930:	d82a      	bhi.n	8002988 <HAL_GPIO_Init+0xcc>
 8002932:	2b12      	cmp	r3, #18
 8002934:	d859      	bhi.n	80029ea <HAL_GPIO_Init+0x12e>
 8002936:	a201      	add	r2, pc, #4	; (adr r2, 800293c <HAL_GPIO_Init+0x80>)
 8002938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293c:	080029b7 	.word	0x080029b7
 8002940:	08002991 	.word	0x08002991
 8002944:	080029a3 	.word	0x080029a3
 8002948:	080029e5 	.word	0x080029e5
 800294c:	080029eb 	.word	0x080029eb
 8002950:	080029eb 	.word	0x080029eb
 8002954:	080029eb 	.word	0x080029eb
 8002958:	080029eb 	.word	0x080029eb
 800295c:	080029eb 	.word	0x080029eb
 8002960:	080029eb 	.word	0x080029eb
 8002964:	080029eb 	.word	0x080029eb
 8002968:	080029eb 	.word	0x080029eb
 800296c:	080029eb 	.word	0x080029eb
 8002970:	080029eb 	.word	0x080029eb
 8002974:	080029eb 	.word	0x080029eb
 8002978:	080029eb 	.word	0x080029eb
 800297c:	080029eb 	.word	0x080029eb
 8002980:	08002999 	.word	0x08002999
 8002984:	080029ad 	.word	0x080029ad
 8002988:	4a79      	ldr	r2, [pc, #484]	; (8002b70 <HAL_GPIO_Init+0x2b4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800298e:	e02c      	b.n	80029ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	623b      	str	r3, [r7, #32]
          break;
 8002996:	e029      	b.n	80029ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	3304      	adds	r3, #4
 800299e:	623b      	str	r3, [r7, #32]
          break;
 80029a0:	e024      	b.n	80029ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	3308      	adds	r3, #8
 80029a8:	623b      	str	r3, [r7, #32]
          break;
 80029aa:	e01f      	b.n	80029ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	330c      	adds	r3, #12
 80029b2:	623b      	str	r3, [r7, #32]
          break;
 80029b4:	e01a      	b.n	80029ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d102      	bne.n	80029c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029be:	2304      	movs	r3, #4
 80029c0:	623b      	str	r3, [r7, #32]
          break;
 80029c2:	e013      	b.n	80029ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d105      	bne.n	80029d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029cc:	2308      	movs	r3, #8
 80029ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	611a      	str	r2, [r3, #16]
          break;
 80029d6:	e009      	b.n	80029ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029d8:	2308      	movs	r3, #8
 80029da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	615a      	str	r2, [r3, #20]
          break;
 80029e2:	e003      	b.n	80029ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029e4:	2300      	movs	r3, #0
 80029e6:	623b      	str	r3, [r7, #32]
          break;
 80029e8:	e000      	b.n	80029ec <HAL_GPIO_Init+0x130>
          break;
 80029ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2bff      	cmp	r3, #255	; 0xff
 80029f0:	d801      	bhi.n	80029f6 <HAL_GPIO_Init+0x13a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	e001      	b.n	80029fa <HAL_GPIO_Init+0x13e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3304      	adds	r3, #4
 80029fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2bff      	cmp	r3, #255	; 0xff
 8002a00:	d802      	bhi.n	8002a08 <HAL_GPIO_Init+0x14c>
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	e002      	b.n	8002a0e <HAL_GPIO_Init+0x152>
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	3b08      	subs	r3, #8
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	210f      	movs	r1, #15
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	401a      	ands	r2, r3
 8002a20:	6a39      	ldr	r1, [r7, #32]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	fa01 f303 	lsl.w	r3, r1, r3
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80b1 	beq.w	8002b9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a3c:	4b4d      	ldr	r3, [pc, #308]	; (8002b74 <HAL_GPIO_Init+0x2b8>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	4a4c      	ldr	r2, [pc, #304]	; (8002b74 <HAL_GPIO_Init+0x2b8>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6193      	str	r3, [r2, #24]
 8002a48:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <HAL_GPIO_Init+0x2b8>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a54:	4a48      	ldr	r2, [pc, #288]	; (8002b78 <HAL_GPIO_Init+0x2bc>)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4013      	ands	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a40      	ldr	r2, [pc, #256]	; (8002b7c <HAL_GPIO_Init+0x2c0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_GPIO_Init+0x1ec>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a3f      	ldr	r2, [pc, #252]	; (8002b80 <HAL_GPIO_Init+0x2c4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00d      	beq.n	8002aa4 <HAL_GPIO_Init+0x1e8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a3e      	ldr	r2, [pc, #248]	; (8002b84 <HAL_GPIO_Init+0x2c8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d007      	beq.n	8002aa0 <HAL_GPIO_Init+0x1e4>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a3d      	ldr	r2, [pc, #244]	; (8002b88 <HAL_GPIO_Init+0x2cc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d101      	bne.n	8002a9c <HAL_GPIO_Init+0x1e0>
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e006      	b.n	8002aaa <HAL_GPIO_Init+0x1ee>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	e004      	b.n	8002aaa <HAL_GPIO_Init+0x1ee>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e002      	b.n	8002aaa <HAL_GPIO_Init+0x1ee>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_GPIO_Init+0x1ee>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aac:	f002 0203 	and.w	r2, r2, #3
 8002ab0:	0092      	lsls	r2, r2, #2
 8002ab2:	4093      	lsls	r3, r2
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aba:	492f      	ldr	r1, [pc, #188]	; (8002b78 <HAL_GPIO_Init+0x2bc>)
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ad4:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	492c      	ldr	r1, [pc, #176]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	600b      	str	r3, [r1, #0]
 8002ae0:	e006      	b.n	8002af0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ae2:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	4928      	ldr	r1, [pc, #160]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d006      	beq.n	8002b0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002afc:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4922      	ldr	r1, [pc, #136]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
 8002b08:	e006      	b.n	8002b18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b0a:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	491e      	ldr	r1, [pc, #120]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d006      	beq.n	8002b32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	4918      	ldr	r1, [pc, #96]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]
 8002b30:	e006      	b.n	8002b40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b32:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	4914      	ldr	r1, [pc, #80]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d021      	beq.n	8002b90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	490e      	ldr	r1, [pc, #56]	; (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60cb      	str	r3, [r1, #12]
 8002b58:	e021      	b.n	8002b9e <HAL_GPIO_Init+0x2e2>
 8002b5a:	bf00      	nop
 8002b5c:	10320000 	.word	0x10320000
 8002b60:	10310000 	.word	0x10310000
 8002b64:	10220000 	.word	0x10220000
 8002b68:	10210000 	.word	0x10210000
 8002b6c:	10120000 	.word	0x10120000
 8002b70:	10110000 	.word	0x10110000
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	40010800 	.word	0x40010800
 8002b80:	40010c00 	.word	0x40010c00
 8002b84:	40011000 	.word	0x40011000
 8002b88:	40011400 	.word	0x40011400
 8002b8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_GPIO_Init+0x304>)
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	4909      	ldr	r1, [pc, #36]	; (8002bc0 <HAL_GPIO_Init+0x304>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f47f ae8e 	bne.w	80028d0 <HAL_GPIO_Init+0x14>
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	372c      	adds	r7, #44	; 0x2c
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	40010400 	.word	0x40010400

08002bc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	887b      	ldrh	r3, [r7, #2]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e001      	b.n	8002be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	807b      	strh	r3, [r7, #2]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c02:	787b      	ldrb	r3, [r7, #1]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c08:	887a      	ldrh	r2, [r7, #2]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c0e:	e003      	b.n	8002c18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c10:	887b      	ldrh	r3, [r7, #2]
 8002c12:	041a      	lsls	r2, r3, #16
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	611a      	str	r2, [r3, #16]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b085      	sub	sp, #20
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c34:	887a      	ldrh	r2, [r7, #2]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	041a      	lsls	r2, r3, #16
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	43d9      	mvns	r1, r3
 8002c40:	887b      	ldrh	r3, [r7, #2]
 8002c42:	400b      	ands	r3, r1
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	611a      	str	r2, [r3, #16]
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c6a:	4a05      	ldr	r2, [pc, #20]	; (8002c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fc14 	bl	80014a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40010400 	.word	0x40010400

08002c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e12b      	b.n	8002eee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff fae2 	bl	8002274 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	; 0x24
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ce8:	f000 ffea 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8002cec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a81      	ldr	r2, [pc, #516]	; (8002ef8 <HAL_I2C_Init+0x274>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d807      	bhi.n	8002d08 <HAL_I2C_Init+0x84>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4a80      	ldr	r2, [pc, #512]	; (8002efc <HAL_I2C_Init+0x278>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	bf94      	ite	ls
 8002d00:	2301      	movls	r3, #1
 8002d02:	2300      	movhi	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e006      	b.n	8002d16 <HAL_I2C_Init+0x92>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4a7d      	ldr	r2, [pc, #500]	; (8002f00 <HAL_I2C_Init+0x27c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	bf94      	ite	ls
 8002d10:	2301      	movls	r3, #1
 8002d12:	2300      	movhi	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0e7      	b.n	8002eee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4a78      	ldr	r2, [pc, #480]	; (8002f04 <HAL_I2C_Init+0x280>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0c9b      	lsrs	r3, r3, #18
 8002d28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a6a      	ldr	r2, [pc, #424]	; (8002ef8 <HAL_I2C_Init+0x274>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d802      	bhi.n	8002d58 <HAL_I2C_Init+0xd4>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	3301      	adds	r3, #1
 8002d56:	e009      	b.n	8002d6c <HAL_I2C_Init+0xe8>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d5e:	fb02 f303 	mul.w	r3, r2, r3
 8002d62:	4a69      	ldr	r2, [pc, #420]	; (8002f08 <HAL_I2C_Init+0x284>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	099b      	lsrs	r3, r3, #6
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	430b      	orrs	r3, r1
 8002d72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	495c      	ldr	r1, [pc, #368]	; (8002ef8 <HAL_I2C_Init+0x274>)
 8002d88:	428b      	cmp	r3, r1
 8002d8a:	d819      	bhi.n	8002dc0 <HAL_I2C_Init+0x13c>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1e59      	subs	r1, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d9a:	1c59      	adds	r1, r3, #1
 8002d9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002da0:	400b      	ands	r3, r1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_I2C_Init+0x138>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1e59      	subs	r1, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dba:	e051      	b.n	8002e60 <HAL_I2C_Init+0x1dc>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	e04f      	b.n	8002e60 <HAL_I2C_Init+0x1dc>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d111      	bne.n	8002dec <HAL_I2C_Init+0x168>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1e58      	subs	r0, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	440b      	add	r3, r1
 8002dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e012      	b.n	8002e12 <HAL_I2C_Init+0x18e>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e58      	subs	r0, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	0099      	lsls	r1, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bf0c      	ite	eq
 8002e0c:	2301      	moveq	r3, #1
 8002e0e:	2300      	movne	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2C_Init+0x196>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e022      	b.n	8002e60 <HAL_I2C_Init+0x1dc>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10e      	bne.n	8002e40 <HAL_I2C_Init+0x1bc>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1e58      	subs	r0, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6859      	ldr	r1, [r3, #4]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	440b      	add	r3, r1
 8002e30:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e34:	3301      	adds	r3, #1
 8002e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3e:	e00f      	b.n	8002e60 <HAL_I2C_Init+0x1dc>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e58      	subs	r0, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	0099      	lsls	r1, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e56:	3301      	adds	r3, #1
 8002e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	6809      	ldr	r1, [r1, #0]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6911      	ldr	r1, [r2, #16]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68d2      	ldr	r2, [r2, #12]
 8002e9a:	4311      	orrs	r1, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	000186a0 	.word	0x000186a0
 8002efc:	001e847f 	.word	0x001e847f
 8002f00:	003d08ff 	.word	0x003d08ff
 8002f04:	431bde83 	.word	0x431bde83
 8002f08:	10624dd3 	.word	0x10624dd3

08002f0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	461a      	mov	r2, r3
 8002f18:	460b      	mov	r3, r1
 8002f1a:	817b      	strh	r3, [r7, #10]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f20:	f7ff fb90 	bl	8002644 <HAL_GetTick>
 8002f24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	f040 80e0 	bne.w	80030f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2319      	movs	r3, #25
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4970      	ldr	r1, [pc, #448]	; (8003100 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f964 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e0d3      	b.n	80030f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_I2C_Master_Transmit+0x50>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0cc      	b.n	80030f6 <HAL_I2C_Master_Transmit+0x1ea>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d007      	beq.n	8002f82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0201 	orr.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2221      	movs	r2, #33	; 0x21
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	893a      	ldrh	r2, [r7, #8]
 8002fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4a50      	ldr	r2, [pc, #320]	; (8003104 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fc4:	8979      	ldrh	r1, [r7, #10]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	6a3a      	ldr	r2, [r7, #32]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f89c 	bl	8003108 <I2C_MasterRequestWrite>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e08d      	b.n	80030f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ff0:	e066      	b.n	80030c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	6a39      	ldr	r1, [r7, #32]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f9de 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b04      	cmp	r3, #4
 8003008:	d107      	bne.n	800301a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003018:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e06b      	b.n	80030f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b04      	cmp	r3, #4
 800305a:	d11b      	bne.n	8003094 <HAL_I2C_Master_Transmit+0x188>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	2b00      	cmp	r3, #0
 8003062:	d017      	beq.n	8003094 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	6a39      	ldr	r1, [r7, #32]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f9ce 	bl	800343a <I2C_WaitOnBTFFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00d      	beq.n	80030c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d107      	bne.n	80030bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e01a      	b.n	80030f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d194      	bne.n	8002ff2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e000      	b.n	80030f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	00100002 	.word	0x00100002
 8003104:	ffff0000 	.word	0xffff0000

08003108 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	460b      	mov	r3, r1
 8003116:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b08      	cmp	r3, #8
 8003122:	d006      	beq.n	8003132 <I2C_MasterRequestWrite+0x2a>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d003      	beq.n	8003132 <I2C_MasterRequestWrite+0x2a>
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003130:	d108      	bne.n	8003144 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e00b      	b.n	800315c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	2b12      	cmp	r3, #18
 800314a:	d107      	bne.n	800315c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f84f 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00d      	beq.n	8003190 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003182:	d103      	bne.n	800318c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e035      	b.n	80031fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003198:	d108      	bne.n	80031ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800319a:	897b      	ldrh	r3, [r7, #10]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031a8:	611a      	str	r2, [r3, #16]
 80031aa:	e01b      	b.n	80031e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031ac:	897b      	ldrh	r3, [r7, #10]
 80031ae:	11db      	asrs	r3, r3, #7
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f003 0306 	and.w	r3, r3, #6
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f063 030f 	orn	r3, r3, #15
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	490e      	ldr	r1, [pc, #56]	; (8003204 <I2C_MasterRequestWrite+0xfc>)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f875 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e010      	b.n	80031fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031da:	897b      	ldrh	r3, [r7, #10]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4907      	ldr	r1, [pc, #28]	; (8003208 <I2C_MasterRequestWrite+0x100>)
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f865 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	00010008 	.word	0x00010008
 8003208:	00010002 	.word	0x00010002

0800320c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321c:	e025      	b.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d021      	beq.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003226:	f7ff fa0d 	bl	8002644 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d302      	bcc.n	800323c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d116      	bne.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e023      	b.n	80032b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10d      	bne.n	8003290 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	43da      	mvns	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	e00c      	b.n	80032aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d0b6      	beq.n	800321e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032c8:	e051      	b.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d8:	d123      	bne.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f043 0204 	orr.w	r2, r3, #4
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e046      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d021      	beq.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7ff f98b 	bl	8002644 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d116      	bne.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e020      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d10c      	bne.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf14      	ite	ne
 800338a:	2301      	movne	r3, #1
 800338c:	2300      	moveq	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	e00b      	b.n	80033aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	43da      	mvns	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4013      	ands	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d18d      	bne.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c4:	e02d      	b.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f878 	bl	80034bc <I2C_IsAcknowledgeFailed>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e02d      	b.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d021      	beq.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7ff f931 	bl	8002644 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e007      	b.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b80      	cmp	r3, #128	; 0x80
 800342e:	d1ca      	bne.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003446:	e02d      	b.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f837 	bl	80034bc <I2C_IsAcknowledgeFailed>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e02d      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d021      	beq.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003460:	f7ff f8f0 	bl	8002644 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	429a      	cmp	r2, r3
 800346e:	d302      	bcc.n	8003476 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e007      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d1ca      	bne.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d2:	d11b      	bne.n	800350c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e26c      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8087 	beq.w	8003646 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003538:	4b92      	ldr	r3, [pc, #584]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	2b04      	cmp	r3, #4
 8003542:	d00c      	beq.n	800355e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003544:	4b8f      	ldr	r3, [pc, #572]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b08      	cmp	r3, #8
 800354e:	d112      	bne.n	8003576 <HAL_RCC_OscConfig+0x5e>
 8003550:	4b8c      	ldr	r3, [pc, #560]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d10b      	bne.n	8003576 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355e:	4b89      	ldr	r3, [pc, #548]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d06c      	beq.n	8003644 <HAL_RCC_OscConfig+0x12c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d168      	bne.n	8003644 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e246      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x76>
 8003580:	4b80      	ldr	r3, [pc, #512]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a7f      	ldr	r2, [pc, #508]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	e02e      	b.n	80035ec <HAL_RCC_OscConfig+0xd4>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x98>
 8003596:	4b7b      	ldr	r3, [pc, #492]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a7a      	ldr	r2, [pc, #488]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 800359c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b78      	ldr	r3, [pc, #480]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a77      	ldr	r2, [pc, #476]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e01d      	b.n	80035ec <HAL_RCC_OscConfig+0xd4>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0xbc>
 80035ba:	4b72      	ldr	r3, [pc, #456]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a71      	ldr	r2, [pc, #452]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	4b6f      	ldr	r3, [pc, #444]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a6e      	ldr	r2, [pc, #440]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e00b      	b.n	80035ec <HAL_RCC_OscConfig+0xd4>
 80035d4:	4b6b      	ldr	r3, [pc, #428]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a6a      	ldr	r2, [pc, #424]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	4b68      	ldr	r3, [pc, #416]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a67      	ldr	r2, [pc, #412]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d013      	beq.n	800361c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7ff f826 	bl	8002644 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7ff f822 	bl	8002644 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e1fa      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	4b5d      	ldr	r3, [pc, #372]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0xe4>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7ff f812 	bl	8002644 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003624:	f7ff f80e 	bl	8002644 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e1e6      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003636:	4b53      	ldr	r3, [pc, #332]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x10c>
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d063      	beq.n	800371a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003652:	4b4c      	ldr	r3, [pc, #304]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800365e:	4b49      	ldr	r3, [pc, #292]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b08      	cmp	r3, #8
 8003668:	d11c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x18c>
 800366a:	4b46      	ldr	r3, [pc, #280]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d116      	bne.n	80036a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003676:	4b43      	ldr	r3, [pc, #268]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_RCC_OscConfig+0x176>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d001      	beq.n	800368e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e1ba      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368e:	4b3d      	ldr	r3, [pc, #244]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4939      	ldr	r1, [pc, #228]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a2:	e03a      	b.n	800371a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d020      	beq.n	80036ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ac:	4b36      	ldr	r3, [pc, #216]	; (8003788 <HAL_RCC_OscConfig+0x270>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7fe ffc7 	bl	8002644 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ba:	f7fe ffc3 	bl	8002644 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e19b      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036cc:	4b2d      	ldr	r3, [pc, #180]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d8:	4b2a      	ldr	r3, [pc, #168]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4927      	ldr	r1, [pc, #156]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	600b      	str	r3, [r1, #0]
 80036ec:	e015      	b.n	800371a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ee:	4b26      	ldr	r3, [pc, #152]	; (8003788 <HAL_RCC_OscConfig+0x270>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fe ffa6 	bl	8002644 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fc:	f7fe ffa2 	bl	8002644 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e17a      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d03a      	beq.n	800379c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d019      	beq.n	8003762 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800372e:	4b17      	ldr	r3, [pc, #92]	; (800378c <HAL_RCC_OscConfig+0x274>)
 8003730:	2201      	movs	r2, #1
 8003732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003734:	f7fe ff86 	bl	8002644 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373c:	f7fe ff82 	bl	8002644 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e15a      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374e:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800375a:	2001      	movs	r0, #1
 800375c:	f000 fac4 	bl	8003ce8 <RCC_Delay>
 8003760:	e01c      	b.n	800379c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_RCC_OscConfig+0x274>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003768:	f7fe ff6c 	bl	8002644 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376e:	e00f      	b.n	8003790 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003770:	f7fe ff68 	bl	8002644 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d908      	bls.n	8003790 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e140      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
 8003782:	bf00      	nop
 8003784:	40021000 	.word	0x40021000
 8003788:	42420000 	.word	0x42420000
 800378c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003790:	4b9e      	ldr	r3, [pc, #632]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e9      	bne.n	8003770 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80a6 	beq.w	80038f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ae:	4b97      	ldr	r3, [pc, #604]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10d      	bne.n	80037d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ba:	4b94      	ldr	r3, [pc, #592]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	4a93      	ldr	r2, [pc, #588]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c4:	61d3      	str	r3, [r2, #28]
 80037c6:	4b91      	ldr	r3, [pc, #580]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d6:	4b8e      	ldr	r3, [pc, #568]	; (8003a10 <HAL_RCC_OscConfig+0x4f8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d118      	bne.n	8003814 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e2:	4b8b      	ldr	r3, [pc, #556]	; (8003a10 <HAL_RCC_OscConfig+0x4f8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a8a      	ldr	r2, [pc, #552]	; (8003a10 <HAL_RCC_OscConfig+0x4f8>)
 80037e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ee:	f7fe ff29 	bl	8002644 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f6:	f7fe ff25 	bl	8002644 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b64      	cmp	r3, #100	; 0x64
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e0fd      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	4b81      	ldr	r3, [pc, #516]	; (8003a10 <HAL_RCC_OscConfig+0x4f8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x312>
 800381c:	4b7b      	ldr	r3, [pc, #492]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4a7a      	ldr	r2, [pc, #488]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6213      	str	r3, [r2, #32]
 8003828:	e02d      	b.n	8003886 <HAL_RCC_OscConfig+0x36e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x334>
 8003832:	4b76      	ldr	r3, [pc, #472]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	4a75      	ldr	r2, [pc, #468]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	6213      	str	r3, [r2, #32]
 800383e:	4b73      	ldr	r3, [pc, #460]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4a72      	ldr	r2, [pc, #456]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003844:	f023 0304 	bic.w	r3, r3, #4
 8003848:	6213      	str	r3, [r2, #32]
 800384a:	e01c      	b.n	8003886 <HAL_RCC_OscConfig+0x36e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b05      	cmp	r3, #5
 8003852:	d10c      	bne.n	800386e <HAL_RCC_OscConfig+0x356>
 8003854:	4b6d      	ldr	r3, [pc, #436]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	4a6c      	ldr	r2, [pc, #432]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 800385a:	f043 0304 	orr.w	r3, r3, #4
 800385e:	6213      	str	r3, [r2, #32]
 8003860:	4b6a      	ldr	r3, [pc, #424]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	4a69      	ldr	r2, [pc, #420]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	6213      	str	r3, [r2, #32]
 800386c:	e00b      	b.n	8003886 <HAL_RCC_OscConfig+0x36e>
 800386e:	4b67      	ldr	r3, [pc, #412]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	4a66      	ldr	r2, [pc, #408]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	6213      	str	r3, [r2, #32]
 800387a:	4b64      	ldr	r3, [pc, #400]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4a63      	ldr	r2, [pc, #396]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d015      	beq.n	80038ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388e:	f7fe fed9 	bl	8002644 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003894:	e00a      	b.n	80038ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fe fed5 	bl	8002644 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e0ab      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	4b57      	ldr	r3, [pc, #348]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ee      	beq.n	8003896 <HAL_RCC_OscConfig+0x37e>
 80038b8:	e014      	b.n	80038e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ba:	f7fe fec3 	bl	8002644 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7fe febf 	bl	8002644 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e095      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d8:	4b4c      	ldr	r3, [pc, #304]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ee      	bne.n	80038c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ea:	4b48      	ldr	r3, [pc, #288]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	4a47      	ldr	r2, [pc, #284]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80038f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8081 	beq.w	8003a02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003900:	4b42      	ldr	r3, [pc, #264]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b08      	cmp	r3, #8
 800390a:	d061      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d146      	bne.n	80039a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003914:	4b3f      	ldr	r3, [pc, #252]	; (8003a14 <HAL_RCC_OscConfig+0x4fc>)
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fe fe93 	bl	8002644 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003922:	f7fe fe8f 	bl	8002644 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e067      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003934:	4b35      	ldr	r3, [pc, #212]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f0      	bne.n	8003922 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003948:	d108      	bne.n	800395c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800394a:	4b30      	ldr	r3, [pc, #192]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	492d      	ldr	r1, [pc, #180]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800395c:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a19      	ldr	r1, [r3, #32]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	430b      	orrs	r3, r1
 800396e:	4927      	ldr	r1, [pc, #156]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003974:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <HAL_RCC_OscConfig+0x4fc>)
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397a:	f7fe fe63 	bl	8002644 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003982:	f7fe fe5f 	bl	8002644 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e037      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003994:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x46a>
 80039a0:	e02f      	b.n	8003a02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a2:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <HAL_RCC_OscConfig+0x4fc>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fe fe4c 	bl	8002644 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fe fe48 	bl	8002644 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e020      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x498>
 80039ce:	e018      	b.n	8003a02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e013      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d001      	beq.n	8003a02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40007000 	.word	0x40007000
 8003a14:	42420060 	.word	0x42420060

08003a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0d0      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b6a      	ldr	r3, [pc, #424]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d910      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b67      	ldr	r3, [pc, #412]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 0207 	bic.w	r2, r3, #7
 8003a42:	4965      	ldr	r1, [pc, #404]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0b8      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a74:	4b59      	ldr	r3, [pc, #356]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a8c:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a52      	ldr	r2, [pc, #328]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a98:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	494d      	ldr	r1, [pc, #308]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d040      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d115      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e07f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad6:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e073      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e06b      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af6:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f023 0203 	bic.w	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4936      	ldr	r1, [pc, #216]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b08:	f7fe fd9c 	bl	8002644 <HAL_GetTick>
 8003b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b10:	f7fe fd98 	bl	8002644 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e053      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 020c 	and.w	r2, r3, #12
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d1eb      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b38:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d210      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 0207 	bic.w	r2, r3, #7
 8003b4e:	4922      	ldr	r1, [pc, #136]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e032      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4916      	ldr	r1, [pc, #88]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	490e      	ldr	r1, [pc, #56]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ba6:	f000 f821 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003baa:	4602      	mov	r2, r0
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	490a      	ldr	r1, [pc, #40]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	5ccb      	ldrb	r3, [r1, r3]
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1cc>)
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_ClockConfig+0x1d0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fcfa 	bl	80025c0 <HAL_InitTick>

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	0800a0d4 	.word	0x0800a0d4
 8003be4:	20000020 	.word	0x20000020
 8003be8:	20000024 	.word	0x20000024

08003bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	b490      	push	{r4, r7}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bf2:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bf4:	1d3c      	adds	r4, r7, #4
 8003bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bfc:	f240 2301 	movw	r3, #513	; 0x201
 8003c00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	2300      	movs	r3, #0
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c16:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d002      	beq.n	8003c2c <HAL_RCC_GetSysClockFreq+0x40>
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d003      	beq.n	8003c32 <HAL_RCC_GetSysClockFreq+0x46>
 8003c2a:	e02d      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2e:	623b      	str	r3, [r7, #32]
      break;
 8003c30:	e02d      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	0c9b      	lsrs	r3, r3, #18
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c3e:	4413      	add	r3, r2
 8003c40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c50:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	0c5b      	lsrs	r3, r3, #17
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c5e:	4413      	add	r3, r2
 8003c60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	4a0e      	ldr	r2, [pc, #56]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c6a:	fb02 f203 	mul.w	r2, r2, r3
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
 8003c76:	e004      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	623b      	str	r3, [r7, #32]
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c8a:	623b      	str	r3, [r7, #32]
      break;
 8003c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3728      	adds	r7, #40	; 0x28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc90      	pop	{r4, r7}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	080070b0 	.word	0x080070b0
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	007a1200 	.word	0x007a1200
 8003ca8:	003d0900 	.word	0x003d0900

08003cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b02      	ldr	r3, [pc, #8]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr
 8003cbc:	20000020 	.word	0x20000020

08003cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cc4:	f7ff fff2 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4903      	ldr	r1, [pc, #12]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	0800a0e4 	.word	0x0800a0e4

08003ce8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <RCC_Delay+0x34>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <RCC_Delay+0x38>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	0a5b      	lsrs	r3, r3, #9
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	fb02 f303 	mul.w	r3, r2, r3
 8003d02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d04:	bf00      	nop
  }
  while (Delay --);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1e5a      	subs	r2, r3, #1
 8003d0a:	60fa      	str	r2, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f9      	bne.n	8003d04 <RCC_Delay+0x1c>
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	20000020 	.word	0x20000020
 8003d20:	10624dd3 	.word	0x10624dd3

08003d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e041      	b.n	8003dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe fad0 	bl	80022f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f000 f93c 	bl	8003fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d001      	beq.n	8003ddc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e032      	b.n	8003e42 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a18      	ldr	r2, [pc, #96]	; (8003e4c <HAL_TIM_Base_Start+0x88>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00e      	beq.n	8003e0c <HAL_TIM_Base_Start+0x48>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df6:	d009      	beq.n	8003e0c <HAL_TIM_Base_Start+0x48>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a14      	ldr	r2, [pc, #80]	; (8003e50 <HAL_TIM_Base_Start+0x8c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_TIM_Base_Start+0x48>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <HAL_TIM_Base_Start+0x90>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d111      	bne.n	8003e30 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b06      	cmp	r3, #6
 8003e1c:	d010      	beq.n	8003e40 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2e:	e007      	b.n	8003e40 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	40012c00 	.word	0x40012c00
 8003e50:	40000400 	.word	0x40000400
 8003e54:	40000800 	.word	0x40000800

08003e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIM_ConfigClockSource+0x18>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e0b3      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x180>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea8:	d03e      	beq.n	8003f28 <HAL_TIM_ConfigClockSource+0xd0>
 8003eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eae:	f200 8087 	bhi.w	8003fc0 <HAL_TIM_ConfigClockSource+0x168>
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb6:	f000 8085 	beq.w	8003fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebe:	d87f      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x168>
 8003ec0:	2b70      	cmp	r3, #112	; 0x70
 8003ec2:	d01a      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0xa2>
 8003ec4:	2b70      	cmp	r3, #112	; 0x70
 8003ec6:	d87b      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x168>
 8003ec8:	2b60      	cmp	r3, #96	; 0x60
 8003eca:	d050      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x116>
 8003ecc:	2b60      	cmp	r3, #96	; 0x60
 8003ece:	d877      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x168>
 8003ed0:	2b50      	cmp	r3, #80	; 0x50
 8003ed2:	d03c      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0xf6>
 8003ed4:	2b50      	cmp	r3, #80	; 0x50
 8003ed6:	d873      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x168>
 8003ed8:	2b40      	cmp	r3, #64	; 0x40
 8003eda:	d058      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x136>
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d86f      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x168>
 8003ee0:	2b30      	cmp	r3, #48	; 0x30
 8003ee2:	d064      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x156>
 8003ee4:	2b30      	cmp	r3, #48	; 0x30
 8003ee6:	d86b      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x168>
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d060      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x156>
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d867      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x168>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d05c      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x156>
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d05a      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ef8:	e062      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6899      	ldr	r1, [r3, #8]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f000 f942 	bl	8004192 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	609a      	str	r2, [r3, #8]
      break;
 8003f26:	e04e      	b.n	8003fc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	6899      	ldr	r1, [r3, #8]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f000 f92b 	bl	8004192 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f4a:	609a      	str	r2, [r3, #8]
      break;
 8003f4c:	e03b      	b.n	8003fc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6859      	ldr	r1, [r3, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f000 f8a2 	bl	80040a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2150      	movs	r1, #80	; 0x50
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f8f9 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 8003f6c:	e02b      	b.n	8003fc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6859      	ldr	r1, [r3, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f000 f8c0 	bl	8004100 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2160      	movs	r1, #96	; 0x60
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 f8e9 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 8003f8c:	e01b      	b.n	8003fc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6859      	ldr	r1, [r3, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f000 f882 	bl	80040a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2140      	movs	r1, #64	; 0x40
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f8d9 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 8003fac:	e00b      	b.n	8003fc6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f000 f8d0 	bl	800415e <TIM_ITRx_SetConfig>
        break;
 8003fbe:	e002      	b.n	8003fc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fc0:	bf00      	nop
 8003fc2:	e000      	b.n	8003fc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a29      	ldr	r2, [pc, #164]	; (8004098 <TIM_Base_SetConfig+0xb8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <TIM_Base_SetConfig+0x30>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffe:	d007      	beq.n	8004010 <TIM_Base_SetConfig+0x30>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a26      	ldr	r2, [pc, #152]	; (800409c <TIM_Base_SetConfig+0xbc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0x30>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a25      	ldr	r2, [pc, #148]	; (80040a0 <TIM_Base_SetConfig+0xc0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d108      	bne.n	8004022 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <TIM_Base_SetConfig+0xb8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00b      	beq.n	8004042 <TIM_Base_SetConfig+0x62>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d007      	beq.n	8004042 <TIM_Base_SetConfig+0x62>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a19      	ldr	r2, [pc, #100]	; (800409c <TIM_Base_SetConfig+0xbc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d003      	beq.n	8004042 <TIM_Base_SetConfig+0x62>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <TIM_Base_SetConfig+0xc0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d108      	bne.n	8004054 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a07      	ldr	r2, [pc, #28]	; (8004098 <TIM_Base_SetConfig+0xb8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d103      	bne.n	8004088 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	615a      	str	r2, [r3, #20]
}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800

080040a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0201 	bic.w	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f023 030a 	bic.w	r3, r3, #10
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f023 0210 	bic.w	r2, r3, #16
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800412a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	031b      	lsls	r3, r3, #12
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800413c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	621a      	str	r2, [r3, #32]
}
 8004154:	bf00      	nop
 8004156:	371c      	adds	r7, #28
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	f043 0307 	orr.w	r3, r3, #7
 8004180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	609a      	str	r2, [r3, #8]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004192:	b480      	push	{r7}
 8004194:	b087      	sub	sp, #28
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	021a      	lsls	r2, r3, #8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	609a      	str	r2, [r3, #8]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e046      	b.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a16      	ldr	r2, [pc, #88]	; (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004234:	d009      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a12      	ldr	r2, [pc, #72]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a10      	ldr	r2, [pc, #64]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10c      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	4313      	orrs	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800

0800428c <__errno>:
 800428c:	4b01      	ldr	r3, [pc, #4]	; (8004294 <__errno+0x8>)
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	2000002c 	.word	0x2000002c

08004298 <__libc_init_array>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	2600      	movs	r6, #0
 800429c:	4d0c      	ldr	r5, [pc, #48]	; (80042d0 <__libc_init_array+0x38>)
 800429e:	4c0d      	ldr	r4, [pc, #52]	; (80042d4 <__libc_init_array+0x3c>)
 80042a0:	1b64      	subs	r4, r4, r5
 80042a2:	10a4      	asrs	r4, r4, #2
 80042a4:	42a6      	cmp	r6, r4
 80042a6:	d109      	bne.n	80042bc <__libc_init_array+0x24>
 80042a8:	f002 febc 	bl	8007024 <_init>
 80042ac:	2600      	movs	r6, #0
 80042ae:	4d0a      	ldr	r5, [pc, #40]	; (80042d8 <__libc_init_array+0x40>)
 80042b0:	4c0a      	ldr	r4, [pc, #40]	; (80042dc <__libc_init_array+0x44>)
 80042b2:	1b64      	subs	r4, r4, r5
 80042b4:	10a4      	asrs	r4, r4, #2
 80042b6:	42a6      	cmp	r6, r4
 80042b8:	d105      	bne.n	80042c6 <__libc_init_array+0x2e>
 80042ba:	bd70      	pop	{r4, r5, r6, pc}
 80042bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c0:	4798      	blx	r3
 80042c2:	3601      	adds	r6, #1
 80042c4:	e7ee      	b.n	80042a4 <__libc_init_array+0xc>
 80042c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ca:	4798      	blx	r3
 80042cc:	3601      	adds	r6, #1
 80042ce:	e7f2      	b.n	80042b6 <__libc_init_array+0x1e>
 80042d0:	0800a4cc 	.word	0x0800a4cc
 80042d4:	0800a4cc 	.word	0x0800a4cc
 80042d8:	0800a4cc 	.word	0x0800a4cc
 80042dc:	0800a4d0 	.word	0x0800a4d0

080042e0 <memset>:
 80042e0:	4603      	mov	r3, r0
 80042e2:	4402      	add	r2, r0
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d100      	bne.n	80042ea <memset+0xa>
 80042e8:	4770      	bx	lr
 80042ea:	f803 1b01 	strb.w	r1, [r3], #1
 80042ee:	e7f9      	b.n	80042e4 <memset+0x4>

080042f0 <__cvt>:
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f6:	461f      	mov	r7, r3
 80042f8:	bfbb      	ittet	lt
 80042fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80042fe:	461f      	movlt	r7, r3
 8004300:	2300      	movge	r3, #0
 8004302:	232d      	movlt	r3, #45	; 0x2d
 8004304:	b088      	sub	sp, #32
 8004306:	4614      	mov	r4, r2
 8004308:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800430a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800430c:	7013      	strb	r3, [r2, #0]
 800430e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004310:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004314:	f023 0820 	bic.w	r8, r3, #32
 8004318:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800431c:	d005      	beq.n	800432a <__cvt+0x3a>
 800431e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004322:	d100      	bne.n	8004326 <__cvt+0x36>
 8004324:	3501      	adds	r5, #1
 8004326:	2302      	movs	r3, #2
 8004328:	e000      	b.n	800432c <__cvt+0x3c>
 800432a:	2303      	movs	r3, #3
 800432c:	aa07      	add	r2, sp, #28
 800432e:	9204      	str	r2, [sp, #16]
 8004330:	aa06      	add	r2, sp, #24
 8004332:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004336:	e9cd 3500 	strd	r3, r5, [sp]
 800433a:	4622      	mov	r2, r4
 800433c:	463b      	mov	r3, r7
 800433e:	f000 fce7 	bl	8004d10 <_dtoa_r>
 8004342:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004346:	4606      	mov	r6, r0
 8004348:	d102      	bne.n	8004350 <__cvt+0x60>
 800434a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800434c:	07db      	lsls	r3, r3, #31
 800434e:	d522      	bpl.n	8004396 <__cvt+0xa6>
 8004350:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004354:	eb06 0905 	add.w	r9, r6, r5
 8004358:	d110      	bne.n	800437c <__cvt+0x8c>
 800435a:	7833      	ldrb	r3, [r6, #0]
 800435c:	2b30      	cmp	r3, #48	; 0x30
 800435e:	d10a      	bne.n	8004376 <__cvt+0x86>
 8004360:	2200      	movs	r2, #0
 8004362:	2300      	movs	r3, #0
 8004364:	4620      	mov	r0, r4
 8004366:	4639      	mov	r1, r7
 8004368:	f7fc fb1e 	bl	80009a8 <__aeabi_dcmpeq>
 800436c:	b918      	cbnz	r0, 8004376 <__cvt+0x86>
 800436e:	f1c5 0501 	rsb	r5, r5, #1
 8004372:	f8ca 5000 	str.w	r5, [sl]
 8004376:	f8da 3000 	ldr.w	r3, [sl]
 800437a:	4499      	add	r9, r3
 800437c:	2200      	movs	r2, #0
 800437e:	2300      	movs	r3, #0
 8004380:	4620      	mov	r0, r4
 8004382:	4639      	mov	r1, r7
 8004384:	f7fc fb10 	bl	80009a8 <__aeabi_dcmpeq>
 8004388:	b108      	cbz	r0, 800438e <__cvt+0x9e>
 800438a:	f8cd 901c 	str.w	r9, [sp, #28]
 800438e:	2230      	movs	r2, #48	; 0x30
 8004390:	9b07      	ldr	r3, [sp, #28]
 8004392:	454b      	cmp	r3, r9
 8004394:	d307      	bcc.n	80043a6 <__cvt+0xb6>
 8004396:	4630      	mov	r0, r6
 8004398:	9b07      	ldr	r3, [sp, #28]
 800439a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800439c:	1b9b      	subs	r3, r3, r6
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	b008      	add	sp, #32
 80043a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a6:	1c59      	adds	r1, r3, #1
 80043a8:	9107      	str	r1, [sp, #28]
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	e7f0      	b.n	8004390 <__cvt+0xa0>

080043ae <__exponent>:
 80043ae:	4603      	mov	r3, r0
 80043b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043b2:	2900      	cmp	r1, #0
 80043b4:	f803 2b02 	strb.w	r2, [r3], #2
 80043b8:	bfb6      	itet	lt
 80043ba:	222d      	movlt	r2, #45	; 0x2d
 80043bc:	222b      	movge	r2, #43	; 0x2b
 80043be:	4249      	neglt	r1, r1
 80043c0:	2909      	cmp	r1, #9
 80043c2:	7042      	strb	r2, [r0, #1]
 80043c4:	dd2b      	ble.n	800441e <__exponent+0x70>
 80043c6:	f10d 0407 	add.w	r4, sp, #7
 80043ca:	46a4      	mov	ip, r4
 80043cc:	270a      	movs	r7, #10
 80043ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80043d2:	460a      	mov	r2, r1
 80043d4:	46a6      	mov	lr, r4
 80043d6:	fb07 1516 	mls	r5, r7, r6, r1
 80043da:	2a63      	cmp	r2, #99	; 0x63
 80043dc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80043e0:	4631      	mov	r1, r6
 80043e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80043e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80043ea:	dcf0      	bgt.n	80043ce <__exponent+0x20>
 80043ec:	3130      	adds	r1, #48	; 0x30
 80043ee:	f1ae 0502 	sub.w	r5, lr, #2
 80043f2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80043f6:	4629      	mov	r1, r5
 80043f8:	1c44      	adds	r4, r0, #1
 80043fa:	4561      	cmp	r1, ip
 80043fc:	d30a      	bcc.n	8004414 <__exponent+0x66>
 80043fe:	f10d 0209 	add.w	r2, sp, #9
 8004402:	eba2 020e 	sub.w	r2, r2, lr
 8004406:	4565      	cmp	r5, ip
 8004408:	bf88      	it	hi
 800440a:	2200      	movhi	r2, #0
 800440c:	4413      	add	r3, r2
 800440e:	1a18      	subs	r0, r3, r0
 8004410:	b003      	add	sp, #12
 8004412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004414:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004418:	f804 2f01 	strb.w	r2, [r4, #1]!
 800441c:	e7ed      	b.n	80043fa <__exponent+0x4c>
 800441e:	2330      	movs	r3, #48	; 0x30
 8004420:	3130      	adds	r1, #48	; 0x30
 8004422:	7083      	strb	r3, [r0, #2]
 8004424:	70c1      	strb	r1, [r0, #3]
 8004426:	1d03      	adds	r3, r0, #4
 8004428:	e7f1      	b.n	800440e <__exponent+0x60>
	...

0800442c <_printf_float>:
 800442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004430:	b091      	sub	sp, #68	; 0x44
 8004432:	460c      	mov	r4, r1
 8004434:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004438:	4616      	mov	r6, r2
 800443a:	461f      	mov	r7, r3
 800443c:	4605      	mov	r5, r0
 800443e:	f001 fa55 	bl	80058ec <_localeconv_r>
 8004442:	6803      	ldr	r3, [r0, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	9309      	str	r3, [sp, #36]	; 0x24
 8004448:	f7fb fe82 	bl	8000150 <strlen>
 800444c:	2300      	movs	r3, #0
 800444e:	930e      	str	r3, [sp, #56]	; 0x38
 8004450:	f8d8 3000 	ldr.w	r3, [r8]
 8004454:	900a      	str	r0, [sp, #40]	; 0x28
 8004456:	3307      	adds	r3, #7
 8004458:	f023 0307 	bic.w	r3, r3, #7
 800445c:	f103 0208 	add.w	r2, r3, #8
 8004460:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004464:	f8d4 b000 	ldr.w	fp, [r4]
 8004468:	f8c8 2000 	str.w	r2, [r8]
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004474:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004478:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800447c:	930b      	str	r3, [sp, #44]	; 0x2c
 800447e:	f04f 32ff 	mov.w	r2, #4294967295
 8004482:	4640      	mov	r0, r8
 8004484:	4b9c      	ldr	r3, [pc, #624]	; (80046f8 <_printf_float+0x2cc>)
 8004486:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004488:	f7fc fac0 	bl	8000a0c <__aeabi_dcmpun>
 800448c:	bb70      	cbnz	r0, 80044ec <_printf_float+0xc0>
 800448e:	f04f 32ff 	mov.w	r2, #4294967295
 8004492:	4640      	mov	r0, r8
 8004494:	4b98      	ldr	r3, [pc, #608]	; (80046f8 <_printf_float+0x2cc>)
 8004496:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004498:	f7fc fa9a 	bl	80009d0 <__aeabi_dcmple>
 800449c:	bb30      	cbnz	r0, 80044ec <_printf_float+0xc0>
 800449e:	2200      	movs	r2, #0
 80044a0:	2300      	movs	r3, #0
 80044a2:	4640      	mov	r0, r8
 80044a4:	4651      	mov	r1, sl
 80044a6:	f7fc fa89 	bl	80009bc <__aeabi_dcmplt>
 80044aa:	b110      	cbz	r0, 80044b2 <_printf_float+0x86>
 80044ac:	232d      	movs	r3, #45	; 0x2d
 80044ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b2:	4b92      	ldr	r3, [pc, #584]	; (80046fc <_printf_float+0x2d0>)
 80044b4:	4892      	ldr	r0, [pc, #584]	; (8004700 <_printf_float+0x2d4>)
 80044b6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044ba:	bf94      	ite	ls
 80044bc:	4698      	movls	r8, r3
 80044be:	4680      	movhi	r8, r0
 80044c0:	2303      	movs	r3, #3
 80044c2:	f04f 0a00 	mov.w	sl, #0
 80044c6:	6123      	str	r3, [r4, #16]
 80044c8:	f02b 0304 	bic.w	r3, fp, #4
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	4633      	mov	r3, r6
 80044d0:	4621      	mov	r1, r4
 80044d2:	4628      	mov	r0, r5
 80044d4:	9700      	str	r7, [sp, #0]
 80044d6:	aa0f      	add	r2, sp, #60	; 0x3c
 80044d8:	f000 f9d4 	bl	8004884 <_printf_common>
 80044dc:	3001      	adds	r0, #1
 80044de:	f040 8090 	bne.w	8004602 <_printf_float+0x1d6>
 80044e2:	f04f 30ff 	mov.w	r0, #4294967295
 80044e6:	b011      	add	sp, #68	; 0x44
 80044e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ec:	4642      	mov	r2, r8
 80044ee:	4653      	mov	r3, sl
 80044f0:	4640      	mov	r0, r8
 80044f2:	4651      	mov	r1, sl
 80044f4:	f7fc fa8a 	bl	8000a0c <__aeabi_dcmpun>
 80044f8:	b148      	cbz	r0, 800450e <_printf_float+0xe2>
 80044fa:	f1ba 0f00 	cmp.w	sl, #0
 80044fe:	bfb8      	it	lt
 8004500:	232d      	movlt	r3, #45	; 0x2d
 8004502:	4880      	ldr	r0, [pc, #512]	; (8004704 <_printf_float+0x2d8>)
 8004504:	bfb8      	it	lt
 8004506:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800450a:	4b7f      	ldr	r3, [pc, #508]	; (8004708 <_printf_float+0x2dc>)
 800450c:	e7d3      	b.n	80044b6 <_printf_float+0x8a>
 800450e:	6863      	ldr	r3, [r4, #4]
 8004510:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	d142      	bne.n	800459e <_printf_float+0x172>
 8004518:	2306      	movs	r3, #6
 800451a:	6063      	str	r3, [r4, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	9206      	str	r2, [sp, #24]
 8004520:	aa0e      	add	r2, sp, #56	; 0x38
 8004522:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004526:	aa0d      	add	r2, sp, #52	; 0x34
 8004528:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800452c:	9203      	str	r2, [sp, #12]
 800452e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004532:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	6863      	ldr	r3, [r4, #4]
 800453a:	4642      	mov	r2, r8
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	4628      	mov	r0, r5
 8004540:	4653      	mov	r3, sl
 8004542:	910b      	str	r1, [sp, #44]	; 0x2c
 8004544:	f7ff fed4 	bl	80042f0 <__cvt>
 8004548:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800454a:	4680      	mov	r8, r0
 800454c:	2947      	cmp	r1, #71	; 0x47
 800454e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004550:	d108      	bne.n	8004564 <_printf_float+0x138>
 8004552:	1cc8      	adds	r0, r1, #3
 8004554:	db02      	blt.n	800455c <_printf_float+0x130>
 8004556:	6863      	ldr	r3, [r4, #4]
 8004558:	4299      	cmp	r1, r3
 800455a:	dd40      	ble.n	80045de <_printf_float+0x1b2>
 800455c:	f1a9 0902 	sub.w	r9, r9, #2
 8004560:	fa5f f989 	uxtb.w	r9, r9
 8004564:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004568:	d81f      	bhi.n	80045aa <_printf_float+0x17e>
 800456a:	464a      	mov	r2, r9
 800456c:	3901      	subs	r1, #1
 800456e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004572:	910d      	str	r1, [sp, #52]	; 0x34
 8004574:	f7ff ff1b 	bl	80043ae <__exponent>
 8004578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800457a:	4682      	mov	sl, r0
 800457c:	1813      	adds	r3, r2, r0
 800457e:	2a01      	cmp	r2, #1
 8004580:	6123      	str	r3, [r4, #16]
 8004582:	dc02      	bgt.n	800458a <_printf_float+0x15e>
 8004584:	6822      	ldr	r2, [r4, #0]
 8004586:	07d2      	lsls	r2, r2, #31
 8004588:	d501      	bpl.n	800458e <_printf_float+0x162>
 800458a:	3301      	adds	r3, #1
 800458c:	6123      	str	r3, [r4, #16]
 800458e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004592:	2b00      	cmp	r3, #0
 8004594:	d09b      	beq.n	80044ce <_printf_float+0xa2>
 8004596:	232d      	movs	r3, #45	; 0x2d
 8004598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800459c:	e797      	b.n	80044ce <_printf_float+0xa2>
 800459e:	2947      	cmp	r1, #71	; 0x47
 80045a0:	d1bc      	bne.n	800451c <_printf_float+0xf0>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1ba      	bne.n	800451c <_printf_float+0xf0>
 80045a6:	2301      	movs	r3, #1
 80045a8:	e7b7      	b.n	800451a <_printf_float+0xee>
 80045aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80045ae:	d118      	bne.n	80045e2 <_printf_float+0x1b6>
 80045b0:	2900      	cmp	r1, #0
 80045b2:	6863      	ldr	r3, [r4, #4]
 80045b4:	dd0b      	ble.n	80045ce <_printf_float+0x1a2>
 80045b6:	6121      	str	r1, [r4, #16]
 80045b8:	b913      	cbnz	r3, 80045c0 <_printf_float+0x194>
 80045ba:	6822      	ldr	r2, [r4, #0]
 80045bc:	07d0      	lsls	r0, r2, #31
 80045be:	d502      	bpl.n	80045c6 <_printf_float+0x19a>
 80045c0:	3301      	adds	r3, #1
 80045c2:	440b      	add	r3, r1
 80045c4:	6123      	str	r3, [r4, #16]
 80045c6:	f04f 0a00 	mov.w	sl, #0
 80045ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80045cc:	e7df      	b.n	800458e <_printf_float+0x162>
 80045ce:	b913      	cbnz	r3, 80045d6 <_printf_float+0x1aa>
 80045d0:	6822      	ldr	r2, [r4, #0]
 80045d2:	07d2      	lsls	r2, r2, #31
 80045d4:	d501      	bpl.n	80045da <_printf_float+0x1ae>
 80045d6:	3302      	adds	r3, #2
 80045d8:	e7f4      	b.n	80045c4 <_printf_float+0x198>
 80045da:	2301      	movs	r3, #1
 80045dc:	e7f2      	b.n	80045c4 <_printf_float+0x198>
 80045de:	f04f 0967 	mov.w	r9, #103	; 0x67
 80045e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045e4:	4299      	cmp	r1, r3
 80045e6:	db05      	blt.n	80045f4 <_printf_float+0x1c8>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	6121      	str	r1, [r4, #16]
 80045ec:	07d8      	lsls	r0, r3, #31
 80045ee:	d5ea      	bpl.n	80045c6 <_printf_float+0x19a>
 80045f0:	1c4b      	adds	r3, r1, #1
 80045f2:	e7e7      	b.n	80045c4 <_printf_float+0x198>
 80045f4:	2900      	cmp	r1, #0
 80045f6:	bfcc      	ite	gt
 80045f8:	2201      	movgt	r2, #1
 80045fa:	f1c1 0202 	rsble	r2, r1, #2
 80045fe:	4413      	add	r3, r2
 8004600:	e7e0      	b.n	80045c4 <_printf_float+0x198>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	055a      	lsls	r2, r3, #21
 8004606:	d407      	bmi.n	8004618 <_printf_float+0x1ec>
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	4642      	mov	r2, r8
 800460c:	4631      	mov	r1, r6
 800460e:	4628      	mov	r0, r5
 8004610:	47b8      	blx	r7
 8004612:	3001      	adds	r0, #1
 8004614:	d12b      	bne.n	800466e <_printf_float+0x242>
 8004616:	e764      	b.n	80044e2 <_printf_float+0xb6>
 8004618:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800461c:	f240 80dd 	bls.w	80047da <_printf_float+0x3ae>
 8004620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004624:	2200      	movs	r2, #0
 8004626:	2300      	movs	r3, #0
 8004628:	f7fc f9be 	bl	80009a8 <__aeabi_dcmpeq>
 800462c:	2800      	cmp	r0, #0
 800462e:	d033      	beq.n	8004698 <_printf_float+0x26c>
 8004630:	2301      	movs	r3, #1
 8004632:	4631      	mov	r1, r6
 8004634:	4628      	mov	r0, r5
 8004636:	4a35      	ldr	r2, [pc, #212]	; (800470c <_printf_float+0x2e0>)
 8004638:	47b8      	blx	r7
 800463a:	3001      	adds	r0, #1
 800463c:	f43f af51 	beq.w	80044e2 <_printf_float+0xb6>
 8004640:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004644:	429a      	cmp	r2, r3
 8004646:	db02      	blt.n	800464e <_printf_float+0x222>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	07d8      	lsls	r0, r3, #31
 800464c:	d50f      	bpl.n	800466e <_printf_float+0x242>
 800464e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004652:	4631      	mov	r1, r6
 8004654:	4628      	mov	r0, r5
 8004656:	47b8      	blx	r7
 8004658:	3001      	adds	r0, #1
 800465a:	f43f af42 	beq.w	80044e2 <_printf_float+0xb6>
 800465e:	f04f 0800 	mov.w	r8, #0
 8004662:	f104 091a 	add.w	r9, r4, #26
 8004666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004668:	3b01      	subs	r3, #1
 800466a:	4543      	cmp	r3, r8
 800466c:	dc09      	bgt.n	8004682 <_printf_float+0x256>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	079b      	lsls	r3, r3, #30
 8004672:	f100 8102 	bmi.w	800487a <_printf_float+0x44e>
 8004676:	68e0      	ldr	r0, [r4, #12]
 8004678:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800467a:	4298      	cmp	r0, r3
 800467c:	bfb8      	it	lt
 800467e:	4618      	movlt	r0, r3
 8004680:	e731      	b.n	80044e6 <_printf_float+0xba>
 8004682:	2301      	movs	r3, #1
 8004684:	464a      	mov	r2, r9
 8004686:	4631      	mov	r1, r6
 8004688:	4628      	mov	r0, r5
 800468a:	47b8      	blx	r7
 800468c:	3001      	adds	r0, #1
 800468e:	f43f af28 	beq.w	80044e2 <_printf_float+0xb6>
 8004692:	f108 0801 	add.w	r8, r8, #1
 8004696:	e7e6      	b.n	8004666 <_printf_float+0x23a>
 8004698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800469a:	2b00      	cmp	r3, #0
 800469c:	dc38      	bgt.n	8004710 <_printf_float+0x2e4>
 800469e:	2301      	movs	r3, #1
 80046a0:	4631      	mov	r1, r6
 80046a2:	4628      	mov	r0, r5
 80046a4:	4a19      	ldr	r2, [pc, #100]	; (800470c <_printf_float+0x2e0>)
 80046a6:	47b8      	blx	r7
 80046a8:	3001      	adds	r0, #1
 80046aa:	f43f af1a 	beq.w	80044e2 <_printf_float+0xb6>
 80046ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046b2:	4313      	orrs	r3, r2
 80046b4:	d102      	bne.n	80046bc <_printf_float+0x290>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	07d9      	lsls	r1, r3, #31
 80046ba:	d5d8      	bpl.n	800466e <_printf_float+0x242>
 80046bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046c0:	4631      	mov	r1, r6
 80046c2:	4628      	mov	r0, r5
 80046c4:	47b8      	blx	r7
 80046c6:	3001      	adds	r0, #1
 80046c8:	f43f af0b 	beq.w	80044e2 <_printf_float+0xb6>
 80046cc:	f04f 0900 	mov.w	r9, #0
 80046d0:	f104 0a1a 	add.w	sl, r4, #26
 80046d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046d6:	425b      	negs	r3, r3
 80046d8:	454b      	cmp	r3, r9
 80046da:	dc01      	bgt.n	80046e0 <_printf_float+0x2b4>
 80046dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046de:	e794      	b.n	800460a <_printf_float+0x1de>
 80046e0:	2301      	movs	r3, #1
 80046e2:	4652      	mov	r2, sl
 80046e4:	4631      	mov	r1, r6
 80046e6:	4628      	mov	r0, r5
 80046e8:	47b8      	blx	r7
 80046ea:	3001      	adds	r0, #1
 80046ec:	f43f aef9 	beq.w	80044e2 <_printf_float+0xb6>
 80046f0:	f109 0901 	add.w	r9, r9, #1
 80046f4:	e7ee      	b.n	80046d4 <_printf_float+0x2a8>
 80046f6:	bf00      	nop
 80046f8:	7fefffff 	.word	0x7fefffff
 80046fc:	0800a0f0 	.word	0x0800a0f0
 8004700:	0800a0f4 	.word	0x0800a0f4
 8004704:	0800a0fc 	.word	0x0800a0fc
 8004708:	0800a0f8 	.word	0x0800a0f8
 800470c:	0800a100 	.word	0x0800a100
 8004710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004714:	429a      	cmp	r2, r3
 8004716:	bfa8      	it	ge
 8004718:	461a      	movge	r2, r3
 800471a:	2a00      	cmp	r2, #0
 800471c:	4691      	mov	r9, r2
 800471e:	dc37      	bgt.n	8004790 <_printf_float+0x364>
 8004720:	f04f 0b00 	mov.w	fp, #0
 8004724:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004728:	f104 021a 	add.w	r2, r4, #26
 800472c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004730:	ebaa 0309 	sub.w	r3, sl, r9
 8004734:	455b      	cmp	r3, fp
 8004736:	dc33      	bgt.n	80047a0 <_printf_float+0x374>
 8004738:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800473c:	429a      	cmp	r2, r3
 800473e:	db3b      	blt.n	80047b8 <_printf_float+0x38c>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	07da      	lsls	r2, r3, #31
 8004744:	d438      	bmi.n	80047b8 <_printf_float+0x38c>
 8004746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004748:	990d      	ldr	r1, [sp, #52]	; 0x34
 800474a:	eba2 030a 	sub.w	r3, r2, sl
 800474e:	eba2 0901 	sub.w	r9, r2, r1
 8004752:	4599      	cmp	r9, r3
 8004754:	bfa8      	it	ge
 8004756:	4699      	movge	r9, r3
 8004758:	f1b9 0f00 	cmp.w	r9, #0
 800475c:	dc34      	bgt.n	80047c8 <_printf_float+0x39c>
 800475e:	f04f 0800 	mov.w	r8, #0
 8004762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004766:	f104 0a1a 	add.w	sl, r4, #26
 800476a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800476e:	1a9b      	subs	r3, r3, r2
 8004770:	eba3 0309 	sub.w	r3, r3, r9
 8004774:	4543      	cmp	r3, r8
 8004776:	f77f af7a 	ble.w	800466e <_printf_float+0x242>
 800477a:	2301      	movs	r3, #1
 800477c:	4652      	mov	r2, sl
 800477e:	4631      	mov	r1, r6
 8004780:	4628      	mov	r0, r5
 8004782:	47b8      	blx	r7
 8004784:	3001      	adds	r0, #1
 8004786:	f43f aeac 	beq.w	80044e2 <_printf_float+0xb6>
 800478a:	f108 0801 	add.w	r8, r8, #1
 800478e:	e7ec      	b.n	800476a <_printf_float+0x33e>
 8004790:	4613      	mov	r3, r2
 8004792:	4631      	mov	r1, r6
 8004794:	4642      	mov	r2, r8
 8004796:	4628      	mov	r0, r5
 8004798:	47b8      	blx	r7
 800479a:	3001      	adds	r0, #1
 800479c:	d1c0      	bne.n	8004720 <_printf_float+0x2f4>
 800479e:	e6a0      	b.n	80044e2 <_printf_float+0xb6>
 80047a0:	2301      	movs	r3, #1
 80047a2:	4631      	mov	r1, r6
 80047a4:	4628      	mov	r0, r5
 80047a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80047a8:	47b8      	blx	r7
 80047aa:	3001      	adds	r0, #1
 80047ac:	f43f ae99 	beq.w	80044e2 <_printf_float+0xb6>
 80047b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047b2:	f10b 0b01 	add.w	fp, fp, #1
 80047b6:	e7b9      	b.n	800472c <_printf_float+0x300>
 80047b8:	4631      	mov	r1, r6
 80047ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047be:	4628      	mov	r0, r5
 80047c0:	47b8      	blx	r7
 80047c2:	3001      	adds	r0, #1
 80047c4:	d1bf      	bne.n	8004746 <_printf_float+0x31a>
 80047c6:	e68c      	b.n	80044e2 <_printf_float+0xb6>
 80047c8:	464b      	mov	r3, r9
 80047ca:	4631      	mov	r1, r6
 80047cc:	4628      	mov	r0, r5
 80047ce:	eb08 020a 	add.w	r2, r8, sl
 80047d2:	47b8      	blx	r7
 80047d4:	3001      	adds	r0, #1
 80047d6:	d1c2      	bne.n	800475e <_printf_float+0x332>
 80047d8:	e683      	b.n	80044e2 <_printf_float+0xb6>
 80047da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047dc:	2a01      	cmp	r2, #1
 80047de:	dc01      	bgt.n	80047e4 <_printf_float+0x3b8>
 80047e0:	07db      	lsls	r3, r3, #31
 80047e2:	d537      	bpl.n	8004854 <_printf_float+0x428>
 80047e4:	2301      	movs	r3, #1
 80047e6:	4642      	mov	r2, r8
 80047e8:	4631      	mov	r1, r6
 80047ea:	4628      	mov	r0, r5
 80047ec:	47b8      	blx	r7
 80047ee:	3001      	adds	r0, #1
 80047f0:	f43f ae77 	beq.w	80044e2 <_printf_float+0xb6>
 80047f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047f8:	4631      	mov	r1, r6
 80047fa:	4628      	mov	r0, r5
 80047fc:	47b8      	blx	r7
 80047fe:	3001      	adds	r0, #1
 8004800:	f43f ae6f 	beq.w	80044e2 <_printf_float+0xb6>
 8004804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004808:	2200      	movs	r2, #0
 800480a:	2300      	movs	r3, #0
 800480c:	f7fc f8cc 	bl	80009a8 <__aeabi_dcmpeq>
 8004810:	b9d8      	cbnz	r0, 800484a <_printf_float+0x41e>
 8004812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004814:	f108 0201 	add.w	r2, r8, #1
 8004818:	3b01      	subs	r3, #1
 800481a:	4631      	mov	r1, r6
 800481c:	4628      	mov	r0, r5
 800481e:	47b8      	blx	r7
 8004820:	3001      	adds	r0, #1
 8004822:	d10e      	bne.n	8004842 <_printf_float+0x416>
 8004824:	e65d      	b.n	80044e2 <_printf_float+0xb6>
 8004826:	2301      	movs	r3, #1
 8004828:	464a      	mov	r2, r9
 800482a:	4631      	mov	r1, r6
 800482c:	4628      	mov	r0, r5
 800482e:	47b8      	blx	r7
 8004830:	3001      	adds	r0, #1
 8004832:	f43f ae56 	beq.w	80044e2 <_printf_float+0xb6>
 8004836:	f108 0801 	add.w	r8, r8, #1
 800483a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800483c:	3b01      	subs	r3, #1
 800483e:	4543      	cmp	r3, r8
 8004840:	dcf1      	bgt.n	8004826 <_printf_float+0x3fa>
 8004842:	4653      	mov	r3, sl
 8004844:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004848:	e6e0      	b.n	800460c <_printf_float+0x1e0>
 800484a:	f04f 0800 	mov.w	r8, #0
 800484e:	f104 091a 	add.w	r9, r4, #26
 8004852:	e7f2      	b.n	800483a <_printf_float+0x40e>
 8004854:	2301      	movs	r3, #1
 8004856:	4642      	mov	r2, r8
 8004858:	e7df      	b.n	800481a <_printf_float+0x3ee>
 800485a:	2301      	movs	r3, #1
 800485c:	464a      	mov	r2, r9
 800485e:	4631      	mov	r1, r6
 8004860:	4628      	mov	r0, r5
 8004862:	47b8      	blx	r7
 8004864:	3001      	adds	r0, #1
 8004866:	f43f ae3c 	beq.w	80044e2 <_printf_float+0xb6>
 800486a:	f108 0801 	add.w	r8, r8, #1
 800486e:	68e3      	ldr	r3, [r4, #12]
 8004870:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004872:	1a5b      	subs	r3, r3, r1
 8004874:	4543      	cmp	r3, r8
 8004876:	dcf0      	bgt.n	800485a <_printf_float+0x42e>
 8004878:	e6fd      	b.n	8004676 <_printf_float+0x24a>
 800487a:	f04f 0800 	mov.w	r8, #0
 800487e:	f104 0919 	add.w	r9, r4, #25
 8004882:	e7f4      	b.n	800486e <_printf_float+0x442>

08004884 <_printf_common>:
 8004884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004888:	4616      	mov	r6, r2
 800488a:	4699      	mov	r9, r3
 800488c:	688a      	ldr	r2, [r1, #8]
 800488e:	690b      	ldr	r3, [r1, #16]
 8004890:	4607      	mov	r7, r0
 8004892:	4293      	cmp	r3, r2
 8004894:	bfb8      	it	lt
 8004896:	4613      	movlt	r3, r2
 8004898:	6033      	str	r3, [r6, #0]
 800489a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800489e:	460c      	mov	r4, r1
 80048a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a4:	b10a      	cbz	r2, 80048aa <_printf_common+0x26>
 80048a6:	3301      	adds	r3, #1
 80048a8:	6033      	str	r3, [r6, #0]
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	0699      	lsls	r1, r3, #26
 80048ae:	bf42      	ittt	mi
 80048b0:	6833      	ldrmi	r3, [r6, #0]
 80048b2:	3302      	addmi	r3, #2
 80048b4:	6033      	strmi	r3, [r6, #0]
 80048b6:	6825      	ldr	r5, [r4, #0]
 80048b8:	f015 0506 	ands.w	r5, r5, #6
 80048bc:	d106      	bne.n	80048cc <_printf_common+0x48>
 80048be:	f104 0a19 	add.w	sl, r4, #25
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	6832      	ldr	r2, [r6, #0]
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	42ab      	cmp	r3, r5
 80048ca:	dc28      	bgt.n	800491e <_printf_common+0x9a>
 80048cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048d0:	1e13      	subs	r3, r2, #0
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	bf18      	it	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	0692      	lsls	r2, r2, #26
 80048da:	d42d      	bmi.n	8004938 <_printf_common+0xb4>
 80048dc:	4649      	mov	r1, r9
 80048de:	4638      	mov	r0, r7
 80048e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e4:	47c0      	blx	r8
 80048e6:	3001      	adds	r0, #1
 80048e8:	d020      	beq.n	800492c <_printf_common+0xa8>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	68e5      	ldr	r5, [r4, #12]
 80048ee:	f003 0306 	and.w	r3, r3, #6
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	bf18      	it	ne
 80048f6:	2500      	movne	r5, #0
 80048f8:	6832      	ldr	r2, [r6, #0]
 80048fa:	f04f 0600 	mov.w	r6, #0
 80048fe:	68a3      	ldr	r3, [r4, #8]
 8004900:	bf08      	it	eq
 8004902:	1aad      	subeq	r5, r5, r2
 8004904:	6922      	ldr	r2, [r4, #16]
 8004906:	bf08      	it	eq
 8004908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800490c:	4293      	cmp	r3, r2
 800490e:	bfc4      	itt	gt
 8004910:	1a9b      	subgt	r3, r3, r2
 8004912:	18ed      	addgt	r5, r5, r3
 8004914:	341a      	adds	r4, #26
 8004916:	42b5      	cmp	r5, r6
 8004918:	d11a      	bne.n	8004950 <_printf_common+0xcc>
 800491a:	2000      	movs	r0, #0
 800491c:	e008      	b.n	8004930 <_printf_common+0xac>
 800491e:	2301      	movs	r3, #1
 8004920:	4652      	mov	r2, sl
 8004922:	4649      	mov	r1, r9
 8004924:	4638      	mov	r0, r7
 8004926:	47c0      	blx	r8
 8004928:	3001      	adds	r0, #1
 800492a:	d103      	bne.n	8004934 <_printf_common+0xb0>
 800492c:	f04f 30ff 	mov.w	r0, #4294967295
 8004930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004934:	3501      	adds	r5, #1
 8004936:	e7c4      	b.n	80048c2 <_printf_common+0x3e>
 8004938:	2030      	movs	r0, #48	; 0x30
 800493a:	18e1      	adds	r1, r4, r3
 800493c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004946:	4422      	add	r2, r4
 8004948:	3302      	adds	r3, #2
 800494a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800494e:	e7c5      	b.n	80048dc <_printf_common+0x58>
 8004950:	2301      	movs	r3, #1
 8004952:	4622      	mov	r2, r4
 8004954:	4649      	mov	r1, r9
 8004956:	4638      	mov	r0, r7
 8004958:	47c0      	blx	r8
 800495a:	3001      	adds	r0, #1
 800495c:	d0e6      	beq.n	800492c <_printf_common+0xa8>
 800495e:	3601      	adds	r6, #1
 8004960:	e7d9      	b.n	8004916 <_printf_common+0x92>
	...

08004964 <_printf_i>:
 8004964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004968:	460c      	mov	r4, r1
 800496a:	7e27      	ldrb	r7, [r4, #24]
 800496c:	4691      	mov	r9, r2
 800496e:	2f78      	cmp	r7, #120	; 0x78
 8004970:	4680      	mov	r8, r0
 8004972:	469a      	mov	sl, r3
 8004974:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004976:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800497a:	d807      	bhi.n	800498c <_printf_i+0x28>
 800497c:	2f62      	cmp	r7, #98	; 0x62
 800497e:	d80a      	bhi.n	8004996 <_printf_i+0x32>
 8004980:	2f00      	cmp	r7, #0
 8004982:	f000 80d9 	beq.w	8004b38 <_printf_i+0x1d4>
 8004986:	2f58      	cmp	r7, #88	; 0x58
 8004988:	f000 80a4 	beq.w	8004ad4 <_printf_i+0x170>
 800498c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004994:	e03a      	b.n	8004a0c <_printf_i+0xa8>
 8004996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800499a:	2b15      	cmp	r3, #21
 800499c:	d8f6      	bhi.n	800498c <_printf_i+0x28>
 800499e:	a001      	add	r0, pc, #4	; (adr r0, 80049a4 <_printf_i+0x40>)
 80049a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80049a4:	080049fd 	.word	0x080049fd
 80049a8:	08004a11 	.word	0x08004a11
 80049ac:	0800498d 	.word	0x0800498d
 80049b0:	0800498d 	.word	0x0800498d
 80049b4:	0800498d 	.word	0x0800498d
 80049b8:	0800498d 	.word	0x0800498d
 80049bc:	08004a11 	.word	0x08004a11
 80049c0:	0800498d 	.word	0x0800498d
 80049c4:	0800498d 	.word	0x0800498d
 80049c8:	0800498d 	.word	0x0800498d
 80049cc:	0800498d 	.word	0x0800498d
 80049d0:	08004b1f 	.word	0x08004b1f
 80049d4:	08004a41 	.word	0x08004a41
 80049d8:	08004b01 	.word	0x08004b01
 80049dc:	0800498d 	.word	0x0800498d
 80049e0:	0800498d 	.word	0x0800498d
 80049e4:	08004b41 	.word	0x08004b41
 80049e8:	0800498d 	.word	0x0800498d
 80049ec:	08004a41 	.word	0x08004a41
 80049f0:	0800498d 	.word	0x0800498d
 80049f4:	0800498d 	.word	0x0800498d
 80049f8:	08004b09 	.word	0x08004b09
 80049fc:	680b      	ldr	r3, [r1, #0]
 80049fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a02:	1d1a      	adds	r2, r3, #4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	600a      	str	r2, [r1, #0]
 8004a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0a4      	b.n	8004b5a <_printf_i+0x1f6>
 8004a10:	6825      	ldr	r5, [r4, #0]
 8004a12:	6808      	ldr	r0, [r1, #0]
 8004a14:	062e      	lsls	r6, r5, #24
 8004a16:	f100 0304 	add.w	r3, r0, #4
 8004a1a:	d50a      	bpl.n	8004a32 <_printf_i+0xce>
 8004a1c:	6805      	ldr	r5, [r0, #0]
 8004a1e:	600b      	str	r3, [r1, #0]
 8004a20:	2d00      	cmp	r5, #0
 8004a22:	da03      	bge.n	8004a2c <_printf_i+0xc8>
 8004a24:	232d      	movs	r3, #45	; 0x2d
 8004a26:	426d      	negs	r5, r5
 8004a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a2c:	230a      	movs	r3, #10
 8004a2e:	485e      	ldr	r0, [pc, #376]	; (8004ba8 <_printf_i+0x244>)
 8004a30:	e019      	b.n	8004a66 <_printf_i+0x102>
 8004a32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a36:	6805      	ldr	r5, [r0, #0]
 8004a38:	600b      	str	r3, [r1, #0]
 8004a3a:	bf18      	it	ne
 8004a3c:	b22d      	sxthne	r5, r5
 8004a3e:	e7ef      	b.n	8004a20 <_printf_i+0xbc>
 8004a40:	680b      	ldr	r3, [r1, #0]
 8004a42:	6825      	ldr	r5, [r4, #0]
 8004a44:	1d18      	adds	r0, r3, #4
 8004a46:	6008      	str	r0, [r1, #0]
 8004a48:	0628      	lsls	r0, r5, #24
 8004a4a:	d501      	bpl.n	8004a50 <_printf_i+0xec>
 8004a4c:	681d      	ldr	r5, [r3, #0]
 8004a4e:	e002      	b.n	8004a56 <_printf_i+0xf2>
 8004a50:	0669      	lsls	r1, r5, #25
 8004a52:	d5fb      	bpl.n	8004a4c <_printf_i+0xe8>
 8004a54:	881d      	ldrh	r5, [r3, #0]
 8004a56:	2f6f      	cmp	r7, #111	; 0x6f
 8004a58:	bf0c      	ite	eq
 8004a5a:	2308      	moveq	r3, #8
 8004a5c:	230a      	movne	r3, #10
 8004a5e:	4852      	ldr	r0, [pc, #328]	; (8004ba8 <_printf_i+0x244>)
 8004a60:	2100      	movs	r1, #0
 8004a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a66:	6866      	ldr	r6, [r4, #4]
 8004a68:	2e00      	cmp	r6, #0
 8004a6a:	bfa8      	it	ge
 8004a6c:	6821      	ldrge	r1, [r4, #0]
 8004a6e:	60a6      	str	r6, [r4, #8]
 8004a70:	bfa4      	itt	ge
 8004a72:	f021 0104 	bicge.w	r1, r1, #4
 8004a76:	6021      	strge	r1, [r4, #0]
 8004a78:	b90d      	cbnz	r5, 8004a7e <_printf_i+0x11a>
 8004a7a:	2e00      	cmp	r6, #0
 8004a7c:	d04d      	beq.n	8004b1a <_printf_i+0x1b6>
 8004a7e:	4616      	mov	r6, r2
 8004a80:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a84:	fb03 5711 	mls	r7, r3, r1, r5
 8004a88:	5dc7      	ldrb	r7, [r0, r7]
 8004a8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a8e:	462f      	mov	r7, r5
 8004a90:	42bb      	cmp	r3, r7
 8004a92:	460d      	mov	r5, r1
 8004a94:	d9f4      	bls.n	8004a80 <_printf_i+0x11c>
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d10b      	bne.n	8004ab2 <_printf_i+0x14e>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	07df      	lsls	r7, r3, #31
 8004a9e:	d508      	bpl.n	8004ab2 <_printf_i+0x14e>
 8004aa0:	6923      	ldr	r3, [r4, #16]
 8004aa2:	6861      	ldr	r1, [r4, #4]
 8004aa4:	4299      	cmp	r1, r3
 8004aa6:	bfde      	ittt	le
 8004aa8:	2330      	movle	r3, #48	; 0x30
 8004aaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004aae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ab2:	1b92      	subs	r2, r2, r6
 8004ab4:	6122      	str	r2, [r4, #16]
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4640      	mov	r0, r8
 8004abc:	f8cd a000 	str.w	sl, [sp]
 8004ac0:	aa03      	add	r2, sp, #12
 8004ac2:	f7ff fedf 	bl	8004884 <_printf_common>
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d14c      	bne.n	8004b64 <_printf_i+0x200>
 8004aca:	f04f 30ff 	mov.w	r0, #4294967295
 8004ace:	b004      	add	sp, #16
 8004ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad4:	4834      	ldr	r0, [pc, #208]	; (8004ba8 <_printf_i+0x244>)
 8004ad6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ada:	680e      	ldr	r6, [r1, #0]
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ae2:	061f      	lsls	r7, r3, #24
 8004ae4:	600e      	str	r6, [r1, #0]
 8004ae6:	d514      	bpl.n	8004b12 <_printf_i+0x1ae>
 8004ae8:	07d9      	lsls	r1, r3, #31
 8004aea:	bf44      	itt	mi
 8004aec:	f043 0320 	orrmi.w	r3, r3, #32
 8004af0:	6023      	strmi	r3, [r4, #0]
 8004af2:	b91d      	cbnz	r5, 8004afc <_printf_i+0x198>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	f023 0320 	bic.w	r3, r3, #32
 8004afa:	6023      	str	r3, [r4, #0]
 8004afc:	2310      	movs	r3, #16
 8004afe:	e7af      	b.n	8004a60 <_printf_i+0xfc>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	f043 0320 	orr.w	r3, r3, #32
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	2378      	movs	r3, #120	; 0x78
 8004b0a:	4828      	ldr	r0, [pc, #160]	; (8004bac <_printf_i+0x248>)
 8004b0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b10:	e7e3      	b.n	8004ada <_printf_i+0x176>
 8004b12:	065e      	lsls	r6, r3, #25
 8004b14:	bf48      	it	mi
 8004b16:	b2ad      	uxthmi	r5, r5
 8004b18:	e7e6      	b.n	8004ae8 <_printf_i+0x184>
 8004b1a:	4616      	mov	r6, r2
 8004b1c:	e7bb      	b.n	8004a96 <_printf_i+0x132>
 8004b1e:	680b      	ldr	r3, [r1, #0]
 8004b20:	6826      	ldr	r6, [r4, #0]
 8004b22:	1d1d      	adds	r5, r3, #4
 8004b24:	6960      	ldr	r0, [r4, #20]
 8004b26:	600d      	str	r5, [r1, #0]
 8004b28:	0635      	lsls	r5, r6, #24
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	d501      	bpl.n	8004b32 <_printf_i+0x1ce>
 8004b2e:	6018      	str	r0, [r3, #0]
 8004b30:	e002      	b.n	8004b38 <_printf_i+0x1d4>
 8004b32:	0671      	lsls	r1, r6, #25
 8004b34:	d5fb      	bpl.n	8004b2e <_printf_i+0x1ca>
 8004b36:	8018      	strh	r0, [r3, #0]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4616      	mov	r6, r2
 8004b3c:	6123      	str	r3, [r4, #16]
 8004b3e:	e7ba      	b.n	8004ab6 <_printf_i+0x152>
 8004b40:	680b      	ldr	r3, [r1, #0]
 8004b42:	1d1a      	adds	r2, r3, #4
 8004b44:	600a      	str	r2, [r1, #0]
 8004b46:	681e      	ldr	r6, [r3, #0]
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	6862      	ldr	r2, [r4, #4]
 8004b4e:	f000 fed9 	bl	8005904 <memchr>
 8004b52:	b108      	cbz	r0, 8004b58 <_printf_i+0x1f4>
 8004b54:	1b80      	subs	r0, r0, r6
 8004b56:	6060      	str	r0, [r4, #4]
 8004b58:	6863      	ldr	r3, [r4, #4]
 8004b5a:	6123      	str	r3, [r4, #16]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b62:	e7a8      	b.n	8004ab6 <_printf_i+0x152>
 8004b64:	4632      	mov	r2, r6
 8004b66:	4649      	mov	r1, r9
 8004b68:	4640      	mov	r0, r8
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	47d0      	blx	sl
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d0ab      	beq.n	8004aca <_printf_i+0x166>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	079b      	lsls	r3, r3, #30
 8004b76:	d413      	bmi.n	8004ba0 <_printf_i+0x23c>
 8004b78:	68e0      	ldr	r0, [r4, #12]
 8004b7a:	9b03      	ldr	r3, [sp, #12]
 8004b7c:	4298      	cmp	r0, r3
 8004b7e:	bfb8      	it	lt
 8004b80:	4618      	movlt	r0, r3
 8004b82:	e7a4      	b.n	8004ace <_printf_i+0x16a>
 8004b84:	2301      	movs	r3, #1
 8004b86:	4632      	mov	r2, r6
 8004b88:	4649      	mov	r1, r9
 8004b8a:	4640      	mov	r0, r8
 8004b8c:	47d0      	blx	sl
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d09b      	beq.n	8004aca <_printf_i+0x166>
 8004b92:	3501      	adds	r5, #1
 8004b94:	68e3      	ldr	r3, [r4, #12]
 8004b96:	9903      	ldr	r1, [sp, #12]
 8004b98:	1a5b      	subs	r3, r3, r1
 8004b9a:	42ab      	cmp	r3, r5
 8004b9c:	dcf2      	bgt.n	8004b84 <_printf_i+0x220>
 8004b9e:	e7eb      	b.n	8004b78 <_printf_i+0x214>
 8004ba0:	2500      	movs	r5, #0
 8004ba2:	f104 0619 	add.w	r6, r4, #25
 8004ba6:	e7f5      	b.n	8004b94 <_printf_i+0x230>
 8004ba8:	0800a102 	.word	0x0800a102
 8004bac:	0800a113 	.word	0x0800a113

08004bb0 <siprintf>:
 8004bb0:	b40e      	push	{r1, r2, r3}
 8004bb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bb6:	b500      	push	{lr}
 8004bb8:	b09c      	sub	sp, #112	; 0x70
 8004bba:	ab1d      	add	r3, sp, #116	; 0x74
 8004bbc:	9002      	str	r0, [sp, #8]
 8004bbe:	9006      	str	r0, [sp, #24]
 8004bc0:	9107      	str	r1, [sp, #28]
 8004bc2:	9104      	str	r1, [sp, #16]
 8004bc4:	4808      	ldr	r0, [pc, #32]	; (8004be8 <siprintf+0x38>)
 8004bc6:	4909      	ldr	r1, [pc, #36]	; (8004bec <siprintf+0x3c>)
 8004bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bcc:	9105      	str	r1, [sp, #20]
 8004bce:	6800      	ldr	r0, [r0, #0]
 8004bd0:	a902      	add	r1, sp, #8
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	f001 fb44 	bl	8006260 <_svfiprintf_r>
 8004bd8:	2200      	movs	r2, #0
 8004bda:	9b02      	ldr	r3, [sp, #8]
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	b01c      	add	sp, #112	; 0x70
 8004be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004be4:	b003      	add	sp, #12
 8004be6:	4770      	bx	lr
 8004be8:	2000002c 	.word	0x2000002c
 8004bec:	ffff0208 	.word	0xffff0208

08004bf0 <quorem>:
 8004bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf4:	6903      	ldr	r3, [r0, #16]
 8004bf6:	690c      	ldr	r4, [r1, #16]
 8004bf8:	4607      	mov	r7, r0
 8004bfa:	42a3      	cmp	r3, r4
 8004bfc:	f2c0 8083 	blt.w	8004d06 <quorem+0x116>
 8004c00:	3c01      	subs	r4, #1
 8004c02:	f100 0514 	add.w	r5, r0, #20
 8004c06:	f101 0814 	add.w	r8, r1, #20
 8004c0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c28:	d332      	bcc.n	8004c90 <quorem+0xa0>
 8004c2a:	f04f 0e00 	mov.w	lr, #0
 8004c2e:	4640      	mov	r0, r8
 8004c30:	46ac      	mov	ip, r5
 8004c32:	46f2      	mov	sl, lr
 8004c34:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c38:	b293      	uxth	r3, r2
 8004c3a:	fb06 e303 	mla	r3, r6, r3, lr
 8004c3e:	0c12      	lsrs	r2, r2, #16
 8004c40:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004c44:	fb06 e202 	mla	r2, r6, r2, lr
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	ebaa 0303 	sub.w	r3, sl, r3
 8004c4e:	f8dc a000 	ldr.w	sl, [ip]
 8004c52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c56:	fa1f fa8a 	uxth.w	sl, sl
 8004c5a:	4453      	add	r3, sl
 8004c5c:	fa1f fa82 	uxth.w	sl, r2
 8004c60:	f8dc 2000 	ldr.w	r2, [ip]
 8004c64:	4581      	cmp	r9, r0
 8004c66:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004c6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c74:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c78:	f84c 3b04 	str.w	r3, [ip], #4
 8004c7c:	d2da      	bcs.n	8004c34 <quorem+0x44>
 8004c7e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c82:	b92b      	cbnz	r3, 8004c90 <quorem+0xa0>
 8004c84:	9b01      	ldr	r3, [sp, #4]
 8004c86:	3b04      	subs	r3, #4
 8004c88:	429d      	cmp	r5, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	d32f      	bcc.n	8004cee <quorem+0xfe>
 8004c8e:	613c      	str	r4, [r7, #16]
 8004c90:	4638      	mov	r0, r7
 8004c92:	f001 f8cd 	bl	8005e30 <__mcmp>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	db25      	blt.n	8004ce6 <quorem+0xf6>
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f04f 0c00 	mov.w	ip, #0
 8004ca0:	3601      	adds	r6, #1
 8004ca2:	f858 1b04 	ldr.w	r1, [r8], #4
 8004ca6:	f8d0 e000 	ldr.w	lr, [r0]
 8004caa:	b28b      	uxth	r3, r1
 8004cac:	ebac 0303 	sub.w	r3, ip, r3
 8004cb0:	fa1f f28e 	uxth.w	r2, lr
 8004cb4:	4413      	add	r3, r2
 8004cb6:	0c0a      	lsrs	r2, r1, #16
 8004cb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004cbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cc6:	45c1      	cmp	r9, r8
 8004cc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ccc:	f840 3b04 	str.w	r3, [r0], #4
 8004cd0:	d2e7      	bcs.n	8004ca2 <quorem+0xb2>
 8004cd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cda:	b922      	cbnz	r2, 8004ce6 <quorem+0xf6>
 8004cdc:	3b04      	subs	r3, #4
 8004cde:	429d      	cmp	r5, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	d30a      	bcc.n	8004cfa <quorem+0x10a>
 8004ce4:	613c      	str	r4, [r7, #16]
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	b003      	add	sp, #12
 8004cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	3b04      	subs	r3, #4
 8004cf2:	2a00      	cmp	r2, #0
 8004cf4:	d1cb      	bne.n	8004c8e <quorem+0x9e>
 8004cf6:	3c01      	subs	r4, #1
 8004cf8:	e7c6      	b.n	8004c88 <quorem+0x98>
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	3b04      	subs	r3, #4
 8004cfe:	2a00      	cmp	r2, #0
 8004d00:	d1f0      	bne.n	8004ce4 <quorem+0xf4>
 8004d02:	3c01      	subs	r4, #1
 8004d04:	e7eb      	b.n	8004cde <quorem+0xee>
 8004d06:	2000      	movs	r0, #0
 8004d08:	e7ee      	b.n	8004ce8 <quorem+0xf8>
 8004d0a:	0000      	movs	r0, r0
 8004d0c:	0000      	movs	r0, r0
	...

08004d10 <_dtoa_r>:
 8004d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d14:	4616      	mov	r6, r2
 8004d16:	461f      	mov	r7, r3
 8004d18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004d1a:	b099      	sub	sp, #100	; 0x64
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d22:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004d26:	b974      	cbnz	r4, 8004d46 <_dtoa_r+0x36>
 8004d28:	2010      	movs	r0, #16
 8004d2a:	f000 fde3 	bl	80058f4 <malloc>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	6268      	str	r0, [r5, #36]	; 0x24
 8004d32:	b920      	cbnz	r0, 8004d3e <_dtoa_r+0x2e>
 8004d34:	21ea      	movs	r1, #234	; 0xea
 8004d36:	4bae      	ldr	r3, [pc, #696]	; (8004ff0 <_dtoa_r+0x2e0>)
 8004d38:	48ae      	ldr	r0, [pc, #696]	; (8004ff4 <_dtoa_r+0x2e4>)
 8004d3a:	f001 fba1 	bl	8006480 <__assert_func>
 8004d3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d42:	6004      	str	r4, [r0, #0]
 8004d44:	60c4      	str	r4, [r0, #12]
 8004d46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d48:	6819      	ldr	r1, [r3, #0]
 8004d4a:	b151      	cbz	r1, 8004d62 <_dtoa_r+0x52>
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4093      	lsls	r3, r2
 8004d52:	604a      	str	r2, [r1, #4]
 8004d54:	608b      	str	r3, [r1, #8]
 8004d56:	4628      	mov	r0, r5
 8004d58:	f000 fe30 	bl	80059bc <_Bfree>
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	1e3b      	subs	r3, r7, #0
 8004d64:	bfaf      	iteee	ge
 8004d66:	2300      	movge	r3, #0
 8004d68:	2201      	movlt	r2, #1
 8004d6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d6e:	9305      	strlt	r3, [sp, #20]
 8004d70:	bfa8      	it	ge
 8004d72:	f8c8 3000 	strge.w	r3, [r8]
 8004d76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004d7a:	4b9f      	ldr	r3, [pc, #636]	; (8004ff8 <_dtoa_r+0x2e8>)
 8004d7c:	bfb8      	it	lt
 8004d7e:	f8c8 2000 	strlt.w	r2, [r8]
 8004d82:	ea33 0309 	bics.w	r3, r3, r9
 8004d86:	d119      	bne.n	8004dbc <_dtoa_r+0xac>
 8004d88:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d94:	4333      	orrs	r3, r6
 8004d96:	f000 8580 	beq.w	800589a <_dtoa_r+0xb8a>
 8004d9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d9c:	b953      	cbnz	r3, 8004db4 <_dtoa_r+0xa4>
 8004d9e:	4b97      	ldr	r3, [pc, #604]	; (8004ffc <_dtoa_r+0x2ec>)
 8004da0:	e022      	b.n	8004de8 <_dtoa_r+0xd8>
 8004da2:	4b97      	ldr	r3, [pc, #604]	; (8005000 <_dtoa_r+0x2f0>)
 8004da4:	9308      	str	r3, [sp, #32]
 8004da6:	3308      	adds	r3, #8
 8004da8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	9808      	ldr	r0, [sp, #32]
 8004dae:	b019      	add	sp, #100	; 0x64
 8004db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db4:	4b91      	ldr	r3, [pc, #580]	; (8004ffc <_dtoa_r+0x2ec>)
 8004db6:	9308      	str	r3, [sp, #32]
 8004db8:	3303      	adds	r3, #3
 8004dba:	e7f5      	b.n	8004da8 <_dtoa_r+0x98>
 8004dbc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004dc0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004dc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f7fb fdec 	bl	80009a8 <__aeabi_dcmpeq>
 8004dd0:	4680      	mov	r8, r0
 8004dd2:	b158      	cbz	r0, 8004dec <_dtoa_r+0xdc>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8559 	beq.w	8005894 <_dtoa_r+0xb84>
 8004de2:	4888      	ldr	r0, [pc, #544]	; (8005004 <_dtoa_r+0x2f4>)
 8004de4:	6018      	str	r0, [r3, #0]
 8004de6:	1e43      	subs	r3, r0, #1
 8004de8:	9308      	str	r3, [sp, #32]
 8004dea:	e7df      	b.n	8004dac <_dtoa_r+0x9c>
 8004dec:	ab16      	add	r3, sp, #88	; 0x58
 8004dee:	9301      	str	r3, [sp, #4]
 8004df0:	ab17      	add	r3, sp, #92	; 0x5c
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	4628      	mov	r0, r5
 8004df6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004dfa:	f001 f8c5 	bl	8005f88 <__d2b>
 8004dfe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e02:	4682      	mov	sl, r0
 8004e04:	2c00      	cmp	r4, #0
 8004e06:	d07e      	beq.n	8004f06 <_dtoa_r+0x1f6>
 8004e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e0e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e16:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004e1a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004e1e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004e22:	2200      	movs	r2, #0
 8004e24:	4b78      	ldr	r3, [pc, #480]	; (8005008 <_dtoa_r+0x2f8>)
 8004e26:	f7fb f99f 	bl	8000168 <__aeabi_dsub>
 8004e2a:	a36b      	add	r3, pc, #428	; (adr r3, 8004fd8 <_dtoa_r+0x2c8>)
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f7fb fb52 	bl	80004d8 <__aeabi_dmul>
 8004e34:	a36a      	add	r3, pc, #424	; (adr r3, 8004fe0 <_dtoa_r+0x2d0>)
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	f7fb f997 	bl	800016c <__adddf3>
 8004e3e:	4606      	mov	r6, r0
 8004e40:	4620      	mov	r0, r4
 8004e42:	460f      	mov	r7, r1
 8004e44:	f7fb fade 	bl	8000404 <__aeabi_i2d>
 8004e48:	a367      	add	r3, pc, #412	; (adr r3, 8004fe8 <_dtoa_r+0x2d8>)
 8004e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4e:	f7fb fb43 	bl	80004d8 <__aeabi_dmul>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4630      	mov	r0, r6
 8004e58:	4639      	mov	r1, r7
 8004e5a:	f7fb f987 	bl	800016c <__adddf3>
 8004e5e:	4606      	mov	r6, r0
 8004e60:	460f      	mov	r7, r1
 8004e62:	f7fb fde9 	bl	8000a38 <__aeabi_d2iz>
 8004e66:	2200      	movs	r2, #0
 8004e68:	4681      	mov	r9, r0
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	4639      	mov	r1, r7
 8004e70:	f7fb fda4 	bl	80009bc <__aeabi_dcmplt>
 8004e74:	b148      	cbz	r0, 8004e8a <_dtoa_r+0x17a>
 8004e76:	4648      	mov	r0, r9
 8004e78:	f7fb fac4 	bl	8000404 <__aeabi_i2d>
 8004e7c:	4632      	mov	r2, r6
 8004e7e:	463b      	mov	r3, r7
 8004e80:	f7fb fd92 	bl	80009a8 <__aeabi_dcmpeq>
 8004e84:	b908      	cbnz	r0, 8004e8a <_dtoa_r+0x17a>
 8004e86:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e8a:	f1b9 0f16 	cmp.w	r9, #22
 8004e8e:	d857      	bhi.n	8004f40 <_dtoa_r+0x230>
 8004e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e94:	4b5d      	ldr	r3, [pc, #372]	; (800500c <_dtoa_r+0x2fc>)
 8004e96:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9e:	f7fb fd8d 	bl	80009bc <__aeabi_dcmplt>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d04e      	beq.n	8004f44 <_dtoa_r+0x234>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f109 39ff 	add.w	r9, r9, #4294967295
 8004eac:	930f      	str	r3, [sp, #60]	; 0x3c
 8004eae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004eb0:	1b1c      	subs	r4, r3, r4
 8004eb2:	1e63      	subs	r3, r4, #1
 8004eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb6:	bf49      	itett	mi
 8004eb8:	f1c4 0301 	rsbmi	r3, r4, #1
 8004ebc:	2300      	movpl	r3, #0
 8004ebe:	9306      	strmi	r3, [sp, #24]
 8004ec0:	2300      	movmi	r3, #0
 8004ec2:	bf54      	ite	pl
 8004ec4:	9306      	strpl	r3, [sp, #24]
 8004ec6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004ec8:	f1b9 0f00 	cmp.w	r9, #0
 8004ecc:	db3c      	blt.n	8004f48 <_dtoa_r+0x238>
 8004ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004ed4:	444b      	add	r3, r9
 8004ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ed8:	2300      	movs	r3, #0
 8004eda:	930a      	str	r3, [sp, #40]	; 0x28
 8004edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ede:	2b09      	cmp	r3, #9
 8004ee0:	d86c      	bhi.n	8004fbc <_dtoa_r+0x2ac>
 8004ee2:	2b05      	cmp	r3, #5
 8004ee4:	bfc4      	itt	gt
 8004ee6:	3b04      	subgt	r3, #4
 8004ee8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004eea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004eec:	bfc8      	it	gt
 8004eee:	2400      	movgt	r4, #0
 8004ef0:	f1a3 0302 	sub.w	r3, r3, #2
 8004ef4:	bfd8      	it	le
 8004ef6:	2401      	movle	r4, #1
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	f200 808b 	bhi.w	8005014 <_dtoa_r+0x304>
 8004efe:	e8df f003 	tbb	[pc, r3]
 8004f02:	4f2d      	.short	0x4f2d
 8004f04:	5b4d      	.short	0x5b4d
 8004f06:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004f0a:	441c      	add	r4, r3
 8004f0c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	bfc3      	ittte	gt
 8004f14:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f18:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004f1c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004f20:	f1c3 0320 	rsble	r3, r3, #32
 8004f24:	bfc6      	itte	gt
 8004f26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004f2a:	4318      	orrgt	r0, r3
 8004f2c:	fa06 f003 	lslle.w	r0, r6, r3
 8004f30:	f7fb fa58 	bl	80003e4 <__aeabi_ui2d>
 8004f34:	2301      	movs	r3, #1
 8004f36:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004f3a:	3c01      	subs	r4, #1
 8004f3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f3e:	e770      	b.n	8004e22 <_dtoa_r+0x112>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e7b3      	b.n	8004eac <_dtoa_r+0x19c>
 8004f44:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f46:	e7b2      	b.n	8004eae <_dtoa_r+0x19e>
 8004f48:	9b06      	ldr	r3, [sp, #24]
 8004f4a:	eba3 0309 	sub.w	r3, r3, r9
 8004f4e:	9306      	str	r3, [sp, #24]
 8004f50:	f1c9 0300 	rsb	r3, r9, #0
 8004f54:	930a      	str	r3, [sp, #40]	; 0x28
 8004f56:	2300      	movs	r3, #0
 8004f58:	930e      	str	r3, [sp, #56]	; 0x38
 8004f5a:	e7bf      	b.n	8004edc <_dtoa_r+0x1cc>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	dc59      	bgt.n	800501a <_dtoa_r+0x30a>
 8004f66:	f04f 0b01 	mov.w	fp, #1
 8004f6a:	465b      	mov	r3, fp
 8004f6c:	f8cd b008 	str.w	fp, [sp, #8]
 8004f70:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004f74:	2200      	movs	r2, #0
 8004f76:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004f78:	6042      	str	r2, [r0, #4]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	f102 0614 	add.w	r6, r2, #20
 8004f80:	429e      	cmp	r6, r3
 8004f82:	6841      	ldr	r1, [r0, #4]
 8004f84:	d94f      	bls.n	8005026 <_dtoa_r+0x316>
 8004f86:	4628      	mov	r0, r5
 8004f88:	f000 fcd8 	bl	800593c <_Balloc>
 8004f8c:	9008      	str	r0, [sp, #32]
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d14d      	bne.n	800502e <_dtoa_r+0x31e>
 8004f92:	4602      	mov	r2, r0
 8004f94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f98:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <_dtoa_r+0x300>)
 8004f9a:	e6cd      	b.n	8004d38 <_dtoa_r+0x28>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e7de      	b.n	8004f5e <_dtoa_r+0x24e>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fa4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fa6:	eb09 0b03 	add.w	fp, r9, r3
 8004faa:	f10b 0301 	add.w	r3, fp, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	9302      	str	r3, [sp, #8]
 8004fb2:	bfb8      	it	lt
 8004fb4:	2301      	movlt	r3, #1
 8004fb6:	e7dd      	b.n	8004f74 <_dtoa_r+0x264>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e7f2      	b.n	8004fa2 <_dtoa_r+0x292>
 8004fbc:	2401      	movs	r4, #1
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	940b      	str	r4, [sp, #44]	; 0x2c
 8004fc2:	9322      	str	r3, [sp, #136]	; 0x88
 8004fc4:	f04f 3bff 	mov.w	fp, #4294967295
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2312      	movs	r3, #18
 8004fcc:	f8cd b008 	str.w	fp, [sp, #8]
 8004fd0:	9223      	str	r2, [sp, #140]	; 0x8c
 8004fd2:	e7cf      	b.n	8004f74 <_dtoa_r+0x264>
 8004fd4:	f3af 8000 	nop.w
 8004fd8:	636f4361 	.word	0x636f4361
 8004fdc:	3fd287a7 	.word	0x3fd287a7
 8004fe0:	8b60c8b3 	.word	0x8b60c8b3
 8004fe4:	3fc68a28 	.word	0x3fc68a28
 8004fe8:	509f79fb 	.word	0x509f79fb
 8004fec:	3fd34413 	.word	0x3fd34413
 8004ff0:	0800a131 	.word	0x0800a131
 8004ff4:	0800a148 	.word	0x0800a148
 8004ff8:	7ff00000 	.word	0x7ff00000
 8004ffc:	0800a12d 	.word	0x0800a12d
 8005000:	0800a124 	.word	0x0800a124
 8005004:	0800a101 	.word	0x0800a101
 8005008:	3ff80000 	.word	0x3ff80000
 800500c:	0800a240 	.word	0x0800a240
 8005010:	0800a1a7 	.word	0x0800a1a7
 8005014:	2301      	movs	r3, #1
 8005016:	930b      	str	r3, [sp, #44]	; 0x2c
 8005018:	e7d4      	b.n	8004fc4 <_dtoa_r+0x2b4>
 800501a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800501e:	465b      	mov	r3, fp
 8005020:	f8cd b008 	str.w	fp, [sp, #8]
 8005024:	e7a6      	b.n	8004f74 <_dtoa_r+0x264>
 8005026:	3101      	adds	r1, #1
 8005028:	6041      	str	r1, [r0, #4]
 800502a:	0052      	lsls	r2, r2, #1
 800502c:	e7a6      	b.n	8004f7c <_dtoa_r+0x26c>
 800502e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005030:	9a08      	ldr	r2, [sp, #32]
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	9b02      	ldr	r3, [sp, #8]
 8005036:	2b0e      	cmp	r3, #14
 8005038:	f200 80a8 	bhi.w	800518c <_dtoa_r+0x47c>
 800503c:	2c00      	cmp	r4, #0
 800503e:	f000 80a5 	beq.w	800518c <_dtoa_r+0x47c>
 8005042:	f1b9 0f00 	cmp.w	r9, #0
 8005046:	dd34      	ble.n	80050b2 <_dtoa_r+0x3a2>
 8005048:	4a9a      	ldr	r2, [pc, #616]	; (80052b4 <_dtoa_r+0x5a4>)
 800504a:	f009 030f 	and.w	r3, r9, #15
 800504e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005052:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005056:	e9d3 3400 	ldrd	r3, r4, [r3]
 800505a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800505e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005062:	d016      	beq.n	8005092 <_dtoa_r+0x382>
 8005064:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005068:	4b93      	ldr	r3, [pc, #588]	; (80052b8 <_dtoa_r+0x5a8>)
 800506a:	2703      	movs	r7, #3
 800506c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005070:	f7fb fb5c 	bl	800072c <__aeabi_ddiv>
 8005074:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005078:	f004 040f 	and.w	r4, r4, #15
 800507c:	4e8e      	ldr	r6, [pc, #568]	; (80052b8 <_dtoa_r+0x5a8>)
 800507e:	b954      	cbnz	r4, 8005096 <_dtoa_r+0x386>
 8005080:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005088:	f7fb fb50 	bl	800072c <__aeabi_ddiv>
 800508c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005090:	e029      	b.n	80050e6 <_dtoa_r+0x3d6>
 8005092:	2702      	movs	r7, #2
 8005094:	e7f2      	b.n	800507c <_dtoa_r+0x36c>
 8005096:	07e1      	lsls	r1, r4, #31
 8005098:	d508      	bpl.n	80050ac <_dtoa_r+0x39c>
 800509a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800509e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050a2:	f7fb fa19 	bl	80004d8 <__aeabi_dmul>
 80050a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050aa:	3701      	adds	r7, #1
 80050ac:	1064      	asrs	r4, r4, #1
 80050ae:	3608      	adds	r6, #8
 80050b0:	e7e5      	b.n	800507e <_dtoa_r+0x36e>
 80050b2:	f000 80a5 	beq.w	8005200 <_dtoa_r+0x4f0>
 80050b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050ba:	f1c9 0400 	rsb	r4, r9, #0
 80050be:	4b7d      	ldr	r3, [pc, #500]	; (80052b4 <_dtoa_r+0x5a4>)
 80050c0:	f004 020f 	and.w	r2, r4, #15
 80050c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f7fb fa04 	bl	80004d8 <__aeabi_dmul>
 80050d0:	2702      	movs	r7, #2
 80050d2:	2300      	movs	r3, #0
 80050d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050d8:	4e77      	ldr	r6, [pc, #476]	; (80052b8 <_dtoa_r+0x5a8>)
 80050da:	1124      	asrs	r4, r4, #4
 80050dc:	2c00      	cmp	r4, #0
 80050de:	f040 8084 	bne.w	80051ea <_dtoa_r+0x4da>
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1d2      	bne.n	800508c <_dtoa_r+0x37c>
 80050e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 808b 	beq.w	8005204 <_dtoa_r+0x4f4>
 80050ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80050f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80050f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050fa:	2200      	movs	r2, #0
 80050fc:	4b6f      	ldr	r3, [pc, #444]	; (80052bc <_dtoa_r+0x5ac>)
 80050fe:	f7fb fc5d 	bl	80009bc <__aeabi_dcmplt>
 8005102:	2800      	cmp	r0, #0
 8005104:	d07e      	beq.n	8005204 <_dtoa_r+0x4f4>
 8005106:	9b02      	ldr	r3, [sp, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d07b      	beq.n	8005204 <_dtoa_r+0x4f4>
 800510c:	f1bb 0f00 	cmp.w	fp, #0
 8005110:	dd38      	ble.n	8005184 <_dtoa_r+0x474>
 8005112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005116:	2200      	movs	r2, #0
 8005118:	4b69      	ldr	r3, [pc, #420]	; (80052c0 <_dtoa_r+0x5b0>)
 800511a:	f7fb f9dd 	bl	80004d8 <__aeabi_dmul>
 800511e:	465c      	mov	r4, fp
 8005120:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005124:	f109 38ff 	add.w	r8, r9, #4294967295
 8005128:	3701      	adds	r7, #1
 800512a:	4638      	mov	r0, r7
 800512c:	f7fb f96a 	bl	8000404 <__aeabi_i2d>
 8005130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005134:	f7fb f9d0 	bl	80004d8 <__aeabi_dmul>
 8005138:	2200      	movs	r2, #0
 800513a:	4b62      	ldr	r3, [pc, #392]	; (80052c4 <_dtoa_r+0x5b4>)
 800513c:	f7fb f816 	bl	800016c <__adddf3>
 8005140:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005144:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005148:	9611      	str	r6, [sp, #68]	; 0x44
 800514a:	2c00      	cmp	r4, #0
 800514c:	d15d      	bne.n	800520a <_dtoa_r+0x4fa>
 800514e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005152:	2200      	movs	r2, #0
 8005154:	4b5c      	ldr	r3, [pc, #368]	; (80052c8 <_dtoa_r+0x5b8>)
 8005156:	f7fb f807 	bl	8000168 <__aeabi_dsub>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005162:	4633      	mov	r3, r6
 8005164:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005166:	f7fb fc47 	bl	80009f8 <__aeabi_dcmpgt>
 800516a:	2800      	cmp	r0, #0
 800516c:	f040 829e 	bne.w	80056ac <_dtoa_r+0x99c>
 8005170:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005174:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005176:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800517a:	f7fb fc1f 	bl	80009bc <__aeabi_dcmplt>
 800517e:	2800      	cmp	r0, #0
 8005180:	f040 8292 	bne.w	80056a8 <_dtoa_r+0x998>
 8005184:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005188:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800518c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800518e:	2b00      	cmp	r3, #0
 8005190:	f2c0 8153 	blt.w	800543a <_dtoa_r+0x72a>
 8005194:	f1b9 0f0e 	cmp.w	r9, #14
 8005198:	f300 814f 	bgt.w	800543a <_dtoa_r+0x72a>
 800519c:	4b45      	ldr	r3, [pc, #276]	; (80052b4 <_dtoa_r+0x5a4>)
 800519e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80051a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80051aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f280 80db 	bge.w	8005368 <_dtoa_r+0x658>
 80051b2:	9b02      	ldr	r3, [sp, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f300 80d7 	bgt.w	8005368 <_dtoa_r+0x658>
 80051ba:	f040 8274 	bne.w	80056a6 <_dtoa_r+0x996>
 80051be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051c2:	2200      	movs	r2, #0
 80051c4:	4b40      	ldr	r3, [pc, #256]	; (80052c8 <_dtoa_r+0x5b8>)
 80051c6:	f7fb f987 	bl	80004d8 <__aeabi_dmul>
 80051ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ce:	f7fb fc09 	bl	80009e4 <__aeabi_dcmpge>
 80051d2:	9c02      	ldr	r4, [sp, #8]
 80051d4:	4626      	mov	r6, r4
 80051d6:	2800      	cmp	r0, #0
 80051d8:	f040 824a 	bne.w	8005670 <_dtoa_r+0x960>
 80051dc:	2331      	movs	r3, #49	; 0x31
 80051de:	9f08      	ldr	r7, [sp, #32]
 80051e0:	f109 0901 	add.w	r9, r9, #1
 80051e4:	f807 3b01 	strb.w	r3, [r7], #1
 80051e8:	e246      	b.n	8005678 <_dtoa_r+0x968>
 80051ea:	07e2      	lsls	r2, r4, #31
 80051ec:	d505      	bpl.n	80051fa <_dtoa_r+0x4ea>
 80051ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051f2:	f7fb f971 	bl	80004d8 <__aeabi_dmul>
 80051f6:	2301      	movs	r3, #1
 80051f8:	3701      	adds	r7, #1
 80051fa:	1064      	asrs	r4, r4, #1
 80051fc:	3608      	adds	r6, #8
 80051fe:	e76d      	b.n	80050dc <_dtoa_r+0x3cc>
 8005200:	2702      	movs	r7, #2
 8005202:	e770      	b.n	80050e6 <_dtoa_r+0x3d6>
 8005204:	46c8      	mov	r8, r9
 8005206:	9c02      	ldr	r4, [sp, #8]
 8005208:	e78f      	b.n	800512a <_dtoa_r+0x41a>
 800520a:	9908      	ldr	r1, [sp, #32]
 800520c:	4b29      	ldr	r3, [pc, #164]	; (80052b4 <_dtoa_r+0x5a4>)
 800520e:	4421      	add	r1, r4
 8005210:	9112      	str	r1, [sp, #72]	; 0x48
 8005212:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005214:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005218:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800521c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005220:	2900      	cmp	r1, #0
 8005222:	d055      	beq.n	80052d0 <_dtoa_r+0x5c0>
 8005224:	2000      	movs	r0, #0
 8005226:	4929      	ldr	r1, [pc, #164]	; (80052cc <_dtoa_r+0x5bc>)
 8005228:	f7fb fa80 	bl	800072c <__aeabi_ddiv>
 800522c:	463b      	mov	r3, r7
 800522e:	4632      	mov	r2, r6
 8005230:	f7fa ff9a 	bl	8000168 <__aeabi_dsub>
 8005234:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005238:	9f08      	ldr	r7, [sp, #32]
 800523a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800523e:	f7fb fbfb 	bl	8000a38 <__aeabi_d2iz>
 8005242:	4604      	mov	r4, r0
 8005244:	f7fb f8de 	bl	8000404 <__aeabi_i2d>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005250:	f7fa ff8a 	bl	8000168 <__aeabi_dsub>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	3430      	adds	r4, #48	; 0x30
 800525a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800525e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005262:	f807 4b01 	strb.w	r4, [r7], #1
 8005266:	f7fb fba9 	bl	80009bc <__aeabi_dcmplt>
 800526a:	2800      	cmp	r0, #0
 800526c:	d174      	bne.n	8005358 <_dtoa_r+0x648>
 800526e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005272:	2000      	movs	r0, #0
 8005274:	4911      	ldr	r1, [pc, #68]	; (80052bc <_dtoa_r+0x5ac>)
 8005276:	f7fa ff77 	bl	8000168 <__aeabi_dsub>
 800527a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800527e:	f7fb fb9d 	bl	80009bc <__aeabi_dcmplt>
 8005282:	2800      	cmp	r0, #0
 8005284:	f040 80b6 	bne.w	80053f4 <_dtoa_r+0x6e4>
 8005288:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800528a:	429f      	cmp	r7, r3
 800528c:	f43f af7a 	beq.w	8005184 <_dtoa_r+0x474>
 8005290:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005294:	2200      	movs	r2, #0
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <_dtoa_r+0x5b0>)
 8005298:	f7fb f91e 	bl	80004d8 <__aeabi_dmul>
 800529c:	2200      	movs	r2, #0
 800529e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <_dtoa_r+0x5b0>)
 80052a8:	f7fb f916 	bl	80004d8 <__aeabi_dmul>
 80052ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052b0:	e7c3      	b.n	800523a <_dtoa_r+0x52a>
 80052b2:	bf00      	nop
 80052b4:	0800a240 	.word	0x0800a240
 80052b8:	0800a218 	.word	0x0800a218
 80052bc:	3ff00000 	.word	0x3ff00000
 80052c0:	40240000 	.word	0x40240000
 80052c4:	401c0000 	.word	0x401c0000
 80052c8:	40140000 	.word	0x40140000
 80052cc:	3fe00000 	.word	0x3fe00000
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fb f900 	bl	80004d8 <__aeabi_dmul>
 80052d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052de:	9c08      	ldr	r4, [sp, #32]
 80052e0:	9314      	str	r3, [sp, #80]	; 0x50
 80052e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052e6:	f7fb fba7 	bl	8000a38 <__aeabi_d2iz>
 80052ea:	9015      	str	r0, [sp, #84]	; 0x54
 80052ec:	f7fb f88a 	bl	8000404 <__aeabi_i2d>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052f8:	f7fa ff36 	bl	8000168 <__aeabi_dsub>
 80052fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052fe:	4606      	mov	r6, r0
 8005300:	3330      	adds	r3, #48	; 0x30
 8005302:	f804 3b01 	strb.w	r3, [r4], #1
 8005306:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005308:	460f      	mov	r7, r1
 800530a:	429c      	cmp	r4, r3
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	d124      	bne.n	800535c <_dtoa_r+0x64c>
 8005312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005316:	4bb3      	ldr	r3, [pc, #716]	; (80055e4 <_dtoa_r+0x8d4>)
 8005318:	f7fa ff28 	bl	800016c <__adddf3>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4630      	mov	r0, r6
 8005322:	4639      	mov	r1, r7
 8005324:	f7fb fb68 	bl	80009f8 <__aeabi_dcmpgt>
 8005328:	2800      	cmp	r0, #0
 800532a:	d162      	bne.n	80053f2 <_dtoa_r+0x6e2>
 800532c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005330:	2000      	movs	r0, #0
 8005332:	49ac      	ldr	r1, [pc, #688]	; (80055e4 <_dtoa_r+0x8d4>)
 8005334:	f7fa ff18 	bl	8000168 <__aeabi_dsub>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4630      	mov	r0, r6
 800533e:	4639      	mov	r1, r7
 8005340:	f7fb fb3c 	bl	80009bc <__aeabi_dcmplt>
 8005344:	2800      	cmp	r0, #0
 8005346:	f43f af1d 	beq.w	8005184 <_dtoa_r+0x474>
 800534a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800534c:	1e7b      	subs	r3, r7, #1
 800534e:	9314      	str	r3, [sp, #80]	; 0x50
 8005350:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005354:	2b30      	cmp	r3, #48	; 0x30
 8005356:	d0f8      	beq.n	800534a <_dtoa_r+0x63a>
 8005358:	46c1      	mov	r9, r8
 800535a:	e03a      	b.n	80053d2 <_dtoa_r+0x6c2>
 800535c:	4ba2      	ldr	r3, [pc, #648]	; (80055e8 <_dtoa_r+0x8d8>)
 800535e:	f7fb f8bb 	bl	80004d8 <__aeabi_dmul>
 8005362:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005366:	e7bc      	b.n	80052e2 <_dtoa_r+0x5d2>
 8005368:	9f08      	ldr	r7, [sp, #32]
 800536a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800536e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005372:	f7fb f9db 	bl	800072c <__aeabi_ddiv>
 8005376:	f7fb fb5f 	bl	8000a38 <__aeabi_d2iz>
 800537a:	4604      	mov	r4, r0
 800537c:	f7fb f842 	bl	8000404 <__aeabi_i2d>
 8005380:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005384:	f7fb f8a8 	bl	80004d8 <__aeabi_dmul>
 8005388:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800538c:	460b      	mov	r3, r1
 800538e:	4602      	mov	r2, r0
 8005390:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005394:	f7fa fee8 	bl	8000168 <__aeabi_dsub>
 8005398:	f807 6b01 	strb.w	r6, [r7], #1
 800539c:	9e08      	ldr	r6, [sp, #32]
 800539e:	9b02      	ldr	r3, [sp, #8]
 80053a0:	1bbe      	subs	r6, r7, r6
 80053a2:	42b3      	cmp	r3, r6
 80053a4:	d13a      	bne.n	800541c <_dtoa_r+0x70c>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	f7fa fedf 	bl	800016c <__adddf3>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053ba:	f7fb fb1d 	bl	80009f8 <__aeabi_dcmpgt>
 80053be:	bb58      	cbnz	r0, 8005418 <_dtoa_r+0x708>
 80053c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053c8:	f7fb faee 	bl	80009a8 <__aeabi_dcmpeq>
 80053cc:	b108      	cbz	r0, 80053d2 <_dtoa_r+0x6c2>
 80053ce:	07e1      	lsls	r1, r4, #31
 80053d0:	d422      	bmi.n	8005418 <_dtoa_r+0x708>
 80053d2:	4628      	mov	r0, r5
 80053d4:	4651      	mov	r1, sl
 80053d6:	f000 faf1 	bl	80059bc <_Bfree>
 80053da:	2300      	movs	r3, #0
 80053dc:	703b      	strb	r3, [r7, #0]
 80053de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80053e0:	f109 0001 	add.w	r0, r9, #1
 80053e4:	6018      	str	r0, [r3, #0]
 80053e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f43f acdf 	beq.w	8004dac <_dtoa_r+0x9c>
 80053ee:	601f      	str	r7, [r3, #0]
 80053f0:	e4dc      	b.n	8004dac <_dtoa_r+0x9c>
 80053f2:	4627      	mov	r7, r4
 80053f4:	463b      	mov	r3, r7
 80053f6:	461f      	mov	r7, r3
 80053f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053fc:	2a39      	cmp	r2, #57	; 0x39
 80053fe:	d107      	bne.n	8005410 <_dtoa_r+0x700>
 8005400:	9a08      	ldr	r2, [sp, #32]
 8005402:	429a      	cmp	r2, r3
 8005404:	d1f7      	bne.n	80053f6 <_dtoa_r+0x6e6>
 8005406:	2230      	movs	r2, #48	; 0x30
 8005408:	9908      	ldr	r1, [sp, #32]
 800540a:	f108 0801 	add.w	r8, r8, #1
 800540e:	700a      	strb	r2, [r1, #0]
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	3201      	adds	r2, #1
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	e79f      	b.n	8005358 <_dtoa_r+0x648>
 8005418:	46c8      	mov	r8, r9
 800541a:	e7eb      	b.n	80053f4 <_dtoa_r+0x6e4>
 800541c:	2200      	movs	r2, #0
 800541e:	4b72      	ldr	r3, [pc, #456]	; (80055e8 <_dtoa_r+0x8d8>)
 8005420:	f7fb f85a 	bl	80004d8 <__aeabi_dmul>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800542c:	2200      	movs	r2, #0
 800542e:	2300      	movs	r3, #0
 8005430:	f7fb faba 	bl	80009a8 <__aeabi_dcmpeq>
 8005434:	2800      	cmp	r0, #0
 8005436:	d098      	beq.n	800536a <_dtoa_r+0x65a>
 8005438:	e7cb      	b.n	80053d2 <_dtoa_r+0x6c2>
 800543a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800543c:	2a00      	cmp	r2, #0
 800543e:	f000 80cd 	beq.w	80055dc <_dtoa_r+0x8cc>
 8005442:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005444:	2a01      	cmp	r2, #1
 8005446:	f300 80af 	bgt.w	80055a8 <_dtoa_r+0x898>
 800544a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800544c:	2a00      	cmp	r2, #0
 800544e:	f000 80a7 	beq.w	80055a0 <_dtoa_r+0x890>
 8005452:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005456:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005458:	9f06      	ldr	r7, [sp, #24]
 800545a:	9a06      	ldr	r2, [sp, #24]
 800545c:	2101      	movs	r1, #1
 800545e:	441a      	add	r2, r3
 8005460:	9206      	str	r2, [sp, #24]
 8005462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005464:	4628      	mov	r0, r5
 8005466:	441a      	add	r2, r3
 8005468:	9209      	str	r2, [sp, #36]	; 0x24
 800546a:	f000 fb61 	bl	8005b30 <__i2b>
 800546e:	4606      	mov	r6, r0
 8005470:	2f00      	cmp	r7, #0
 8005472:	dd0c      	ble.n	800548e <_dtoa_r+0x77e>
 8005474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	dd09      	ble.n	800548e <_dtoa_r+0x77e>
 800547a:	42bb      	cmp	r3, r7
 800547c:	bfa8      	it	ge
 800547e:	463b      	movge	r3, r7
 8005480:	9a06      	ldr	r2, [sp, #24]
 8005482:	1aff      	subs	r7, r7, r3
 8005484:	1ad2      	subs	r2, r2, r3
 8005486:	9206      	str	r2, [sp, #24]
 8005488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	9309      	str	r3, [sp, #36]	; 0x24
 800548e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005490:	b1f3      	cbz	r3, 80054d0 <_dtoa_r+0x7c0>
 8005492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 80a9 	beq.w	80055ec <_dtoa_r+0x8dc>
 800549a:	2c00      	cmp	r4, #0
 800549c:	dd10      	ble.n	80054c0 <_dtoa_r+0x7b0>
 800549e:	4631      	mov	r1, r6
 80054a0:	4622      	mov	r2, r4
 80054a2:	4628      	mov	r0, r5
 80054a4:	f000 fbfe 	bl	8005ca4 <__pow5mult>
 80054a8:	4652      	mov	r2, sl
 80054aa:	4601      	mov	r1, r0
 80054ac:	4606      	mov	r6, r0
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 fb54 	bl	8005b5c <__multiply>
 80054b4:	4680      	mov	r8, r0
 80054b6:	4651      	mov	r1, sl
 80054b8:	4628      	mov	r0, r5
 80054ba:	f000 fa7f 	bl	80059bc <_Bfree>
 80054be:	46c2      	mov	sl, r8
 80054c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c2:	1b1a      	subs	r2, r3, r4
 80054c4:	d004      	beq.n	80054d0 <_dtoa_r+0x7c0>
 80054c6:	4651      	mov	r1, sl
 80054c8:	4628      	mov	r0, r5
 80054ca:	f000 fbeb 	bl	8005ca4 <__pow5mult>
 80054ce:	4682      	mov	sl, r0
 80054d0:	2101      	movs	r1, #1
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 fb2c 	bl	8005b30 <__i2b>
 80054d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054da:	4604      	mov	r4, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f340 8087 	ble.w	80055f0 <_dtoa_r+0x8e0>
 80054e2:	461a      	mov	r2, r3
 80054e4:	4601      	mov	r1, r0
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 fbdc 	bl	8005ca4 <__pow5mult>
 80054ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054ee:	4604      	mov	r4, r0
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	f340 8080 	ble.w	80055f6 <_dtoa_r+0x8e6>
 80054f6:	f04f 0800 	mov.w	r8, #0
 80054fa:	6923      	ldr	r3, [r4, #16]
 80054fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005500:	6918      	ldr	r0, [r3, #16]
 8005502:	f000 fac7 	bl	8005a94 <__hi0bits>
 8005506:	f1c0 0020 	rsb	r0, r0, #32
 800550a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550c:	4418      	add	r0, r3
 800550e:	f010 001f 	ands.w	r0, r0, #31
 8005512:	f000 8092 	beq.w	800563a <_dtoa_r+0x92a>
 8005516:	f1c0 0320 	rsb	r3, r0, #32
 800551a:	2b04      	cmp	r3, #4
 800551c:	f340 808a 	ble.w	8005634 <_dtoa_r+0x924>
 8005520:	f1c0 001c 	rsb	r0, r0, #28
 8005524:	9b06      	ldr	r3, [sp, #24]
 8005526:	4407      	add	r7, r0
 8005528:	4403      	add	r3, r0
 800552a:	9306      	str	r3, [sp, #24]
 800552c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800552e:	4403      	add	r3, r0
 8005530:	9309      	str	r3, [sp, #36]	; 0x24
 8005532:	9b06      	ldr	r3, [sp, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	dd05      	ble.n	8005544 <_dtoa_r+0x834>
 8005538:	4651      	mov	r1, sl
 800553a:	461a      	mov	r2, r3
 800553c:	4628      	mov	r0, r5
 800553e:	f000 fc0b 	bl	8005d58 <__lshift>
 8005542:	4682      	mov	sl, r0
 8005544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	dd05      	ble.n	8005556 <_dtoa_r+0x846>
 800554a:	4621      	mov	r1, r4
 800554c:	461a      	mov	r2, r3
 800554e:	4628      	mov	r0, r5
 8005550:	f000 fc02 	bl	8005d58 <__lshift>
 8005554:	4604      	mov	r4, r0
 8005556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d070      	beq.n	800563e <_dtoa_r+0x92e>
 800555c:	4621      	mov	r1, r4
 800555e:	4650      	mov	r0, sl
 8005560:	f000 fc66 	bl	8005e30 <__mcmp>
 8005564:	2800      	cmp	r0, #0
 8005566:	da6a      	bge.n	800563e <_dtoa_r+0x92e>
 8005568:	2300      	movs	r3, #0
 800556a:	4651      	mov	r1, sl
 800556c:	220a      	movs	r2, #10
 800556e:	4628      	mov	r0, r5
 8005570:	f000 fa46 	bl	8005a00 <__multadd>
 8005574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005576:	4682      	mov	sl, r0
 8005578:	f109 39ff 	add.w	r9, r9, #4294967295
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8193 	beq.w	80058a8 <_dtoa_r+0xb98>
 8005582:	4631      	mov	r1, r6
 8005584:	2300      	movs	r3, #0
 8005586:	220a      	movs	r2, #10
 8005588:	4628      	mov	r0, r5
 800558a:	f000 fa39 	bl	8005a00 <__multadd>
 800558e:	f1bb 0f00 	cmp.w	fp, #0
 8005592:	4606      	mov	r6, r0
 8005594:	f300 8093 	bgt.w	80056be <_dtoa_r+0x9ae>
 8005598:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800559a:	2b02      	cmp	r3, #2
 800559c:	dc57      	bgt.n	800564e <_dtoa_r+0x93e>
 800559e:	e08e      	b.n	80056be <_dtoa_r+0x9ae>
 80055a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80055a6:	e756      	b.n	8005456 <_dtoa_r+0x746>
 80055a8:	9b02      	ldr	r3, [sp, #8]
 80055aa:	1e5c      	subs	r4, r3, #1
 80055ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ae:	42a3      	cmp	r3, r4
 80055b0:	bfb7      	itett	lt
 80055b2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80055b4:	1b1c      	subge	r4, r3, r4
 80055b6:	1ae2      	sublt	r2, r4, r3
 80055b8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80055ba:	bfbe      	ittt	lt
 80055bc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80055be:	189b      	addlt	r3, r3, r2
 80055c0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80055c2:	9b02      	ldr	r3, [sp, #8]
 80055c4:	bfb8      	it	lt
 80055c6:	2400      	movlt	r4, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bfbb      	ittet	lt
 80055cc:	9b06      	ldrlt	r3, [sp, #24]
 80055ce:	9a02      	ldrlt	r2, [sp, #8]
 80055d0:	9f06      	ldrge	r7, [sp, #24]
 80055d2:	1a9f      	sublt	r7, r3, r2
 80055d4:	bfac      	ite	ge
 80055d6:	9b02      	ldrge	r3, [sp, #8]
 80055d8:	2300      	movlt	r3, #0
 80055da:	e73e      	b.n	800545a <_dtoa_r+0x74a>
 80055dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055de:	9f06      	ldr	r7, [sp, #24]
 80055e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80055e2:	e745      	b.n	8005470 <_dtoa_r+0x760>
 80055e4:	3fe00000 	.word	0x3fe00000
 80055e8:	40240000 	.word	0x40240000
 80055ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ee:	e76a      	b.n	80054c6 <_dtoa_r+0x7b6>
 80055f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	dc19      	bgt.n	800562a <_dtoa_r+0x91a>
 80055f6:	9b04      	ldr	r3, [sp, #16]
 80055f8:	b9bb      	cbnz	r3, 800562a <_dtoa_r+0x91a>
 80055fa:	9b05      	ldr	r3, [sp, #20]
 80055fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005600:	b99b      	cbnz	r3, 800562a <_dtoa_r+0x91a>
 8005602:	9b05      	ldr	r3, [sp, #20]
 8005604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005608:	0d1b      	lsrs	r3, r3, #20
 800560a:	051b      	lsls	r3, r3, #20
 800560c:	b183      	cbz	r3, 8005630 <_dtoa_r+0x920>
 800560e:	f04f 0801 	mov.w	r8, #1
 8005612:	9b06      	ldr	r3, [sp, #24]
 8005614:	3301      	adds	r3, #1
 8005616:	9306      	str	r3, [sp, #24]
 8005618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561a:	3301      	adds	r3, #1
 800561c:	9309      	str	r3, [sp, #36]	; 0x24
 800561e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005620:	2b00      	cmp	r3, #0
 8005622:	f47f af6a 	bne.w	80054fa <_dtoa_r+0x7ea>
 8005626:	2001      	movs	r0, #1
 8005628:	e76f      	b.n	800550a <_dtoa_r+0x7fa>
 800562a:	f04f 0800 	mov.w	r8, #0
 800562e:	e7f6      	b.n	800561e <_dtoa_r+0x90e>
 8005630:	4698      	mov	r8, r3
 8005632:	e7f4      	b.n	800561e <_dtoa_r+0x90e>
 8005634:	f43f af7d 	beq.w	8005532 <_dtoa_r+0x822>
 8005638:	4618      	mov	r0, r3
 800563a:	301c      	adds	r0, #28
 800563c:	e772      	b.n	8005524 <_dtoa_r+0x814>
 800563e:	9b02      	ldr	r3, [sp, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	dc36      	bgt.n	80056b2 <_dtoa_r+0x9a2>
 8005644:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005646:	2b02      	cmp	r3, #2
 8005648:	dd33      	ble.n	80056b2 <_dtoa_r+0x9a2>
 800564a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800564e:	f1bb 0f00 	cmp.w	fp, #0
 8005652:	d10d      	bne.n	8005670 <_dtoa_r+0x960>
 8005654:	4621      	mov	r1, r4
 8005656:	465b      	mov	r3, fp
 8005658:	2205      	movs	r2, #5
 800565a:	4628      	mov	r0, r5
 800565c:	f000 f9d0 	bl	8005a00 <__multadd>
 8005660:	4601      	mov	r1, r0
 8005662:	4604      	mov	r4, r0
 8005664:	4650      	mov	r0, sl
 8005666:	f000 fbe3 	bl	8005e30 <__mcmp>
 800566a:	2800      	cmp	r0, #0
 800566c:	f73f adb6 	bgt.w	80051dc <_dtoa_r+0x4cc>
 8005670:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005672:	9f08      	ldr	r7, [sp, #32]
 8005674:	ea6f 0903 	mvn.w	r9, r3
 8005678:	f04f 0800 	mov.w	r8, #0
 800567c:	4621      	mov	r1, r4
 800567e:	4628      	mov	r0, r5
 8005680:	f000 f99c 	bl	80059bc <_Bfree>
 8005684:	2e00      	cmp	r6, #0
 8005686:	f43f aea4 	beq.w	80053d2 <_dtoa_r+0x6c2>
 800568a:	f1b8 0f00 	cmp.w	r8, #0
 800568e:	d005      	beq.n	800569c <_dtoa_r+0x98c>
 8005690:	45b0      	cmp	r8, r6
 8005692:	d003      	beq.n	800569c <_dtoa_r+0x98c>
 8005694:	4641      	mov	r1, r8
 8005696:	4628      	mov	r0, r5
 8005698:	f000 f990 	bl	80059bc <_Bfree>
 800569c:	4631      	mov	r1, r6
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 f98c 	bl	80059bc <_Bfree>
 80056a4:	e695      	b.n	80053d2 <_dtoa_r+0x6c2>
 80056a6:	2400      	movs	r4, #0
 80056a8:	4626      	mov	r6, r4
 80056aa:	e7e1      	b.n	8005670 <_dtoa_r+0x960>
 80056ac:	46c1      	mov	r9, r8
 80056ae:	4626      	mov	r6, r4
 80056b0:	e594      	b.n	80051dc <_dtoa_r+0x4cc>
 80056b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056b4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 80fc 	beq.w	80058b6 <_dtoa_r+0xba6>
 80056be:	2f00      	cmp	r7, #0
 80056c0:	dd05      	ble.n	80056ce <_dtoa_r+0x9be>
 80056c2:	4631      	mov	r1, r6
 80056c4:	463a      	mov	r2, r7
 80056c6:	4628      	mov	r0, r5
 80056c8:	f000 fb46 	bl	8005d58 <__lshift>
 80056cc:	4606      	mov	r6, r0
 80056ce:	f1b8 0f00 	cmp.w	r8, #0
 80056d2:	d05c      	beq.n	800578e <_dtoa_r+0xa7e>
 80056d4:	4628      	mov	r0, r5
 80056d6:	6871      	ldr	r1, [r6, #4]
 80056d8:	f000 f930 	bl	800593c <_Balloc>
 80056dc:	4607      	mov	r7, r0
 80056de:	b928      	cbnz	r0, 80056ec <_dtoa_r+0x9dc>
 80056e0:	4602      	mov	r2, r0
 80056e2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80056e6:	4b7e      	ldr	r3, [pc, #504]	; (80058e0 <_dtoa_r+0xbd0>)
 80056e8:	f7ff bb26 	b.w	8004d38 <_dtoa_r+0x28>
 80056ec:	6932      	ldr	r2, [r6, #16]
 80056ee:	f106 010c 	add.w	r1, r6, #12
 80056f2:	3202      	adds	r2, #2
 80056f4:	0092      	lsls	r2, r2, #2
 80056f6:	300c      	adds	r0, #12
 80056f8:	f000 f912 	bl	8005920 <memcpy>
 80056fc:	2201      	movs	r2, #1
 80056fe:	4639      	mov	r1, r7
 8005700:	4628      	mov	r0, r5
 8005702:	f000 fb29 	bl	8005d58 <__lshift>
 8005706:	46b0      	mov	r8, r6
 8005708:	4606      	mov	r6, r0
 800570a:	9b08      	ldr	r3, [sp, #32]
 800570c:	3301      	adds	r3, #1
 800570e:	9302      	str	r3, [sp, #8]
 8005710:	9b08      	ldr	r3, [sp, #32]
 8005712:	445b      	add	r3, fp
 8005714:	930a      	str	r3, [sp, #40]	; 0x28
 8005716:	9b04      	ldr	r3, [sp, #16]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	9309      	str	r3, [sp, #36]	; 0x24
 800571e:	9b02      	ldr	r3, [sp, #8]
 8005720:	4621      	mov	r1, r4
 8005722:	4650      	mov	r0, sl
 8005724:	f103 3bff 	add.w	fp, r3, #4294967295
 8005728:	f7ff fa62 	bl	8004bf0 <quorem>
 800572c:	4603      	mov	r3, r0
 800572e:	4641      	mov	r1, r8
 8005730:	3330      	adds	r3, #48	; 0x30
 8005732:	9004      	str	r0, [sp, #16]
 8005734:	4650      	mov	r0, sl
 8005736:	930b      	str	r3, [sp, #44]	; 0x2c
 8005738:	f000 fb7a 	bl	8005e30 <__mcmp>
 800573c:	4632      	mov	r2, r6
 800573e:	9006      	str	r0, [sp, #24]
 8005740:	4621      	mov	r1, r4
 8005742:	4628      	mov	r0, r5
 8005744:	f000 fb90 	bl	8005e68 <__mdiff>
 8005748:	68c2      	ldr	r2, [r0, #12]
 800574a:	4607      	mov	r7, r0
 800574c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800574e:	bb02      	cbnz	r2, 8005792 <_dtoa_r+0xa82>
 8005750:	4601      	mov	r1, r0
 8005752:	4650      	mov	r0, sl
 8005754:	f000 fb6c 	bl	8005e30 <__mcmp>
 8005758:	4602      	mov	r2, r0
 800575a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800575c:	4639      	mov	r1, r7
 800575e:	4628      	mov	r0, r5
 8005760:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005764:	f000 f92a 	bl	80059bc <_Bfree>
 8005768:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800576a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800576c:	9f02      	ldr	r7, [sp, #8]
 800576e:	ea43 0102 	orr.w	r1, r3, r2
 8005772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005774:	430b      	orrs	r3, r1
 8005776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005778:	d10d      	bne.n	8005796 <_dtoa_r+0xa86>
 800577a:	2b39      	cmp	r3, #57	; 0x39
 800577c:	d027      	beq.n	80057ce <_dtoa_r+0xabe>
 800577e:	9a06      	ldr	r2, [sp, #24]
 8005780:	2a00      	cmp	r2, #0
 8005782:	dd01      	ble.n	8005788 <_dtoa_r+0xa78>
 8005784:	9b04      	ldr	r3, [sp, #16]
 8005786:	3331      	adds	r3, #49	; 0x31
 8005788:	f88b 3000 	strb.w	r3, [fp]
 800578c:	e776      	b.n	800567c <_dtoa_r+0x96c>
 800578e:	4630      	mov	r0, r6
 8005790:	e7b9      	b.n	8005706 <_dtoa_r+0x9f6>
 8005792:	2201      	movs	r2, #1
 8005794:	e7e2      	b.n	800575c <_dtoa_r+0xa4c>
 8005796:	9906      	ldr	r1, [sp, #24]
 8005798:	2900      	cmp	r1, #0
 800579a:	db04      	blt.n	80057a6 <_dtoa_r+0xa96>
 800579c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800579e:	4301      	orrs	r1, r0
 80057a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057a2:	4301      	orrs	r1, r0
 80057a4:	d120      	bne.n	80057e8 <_dtoa_r+0xad8>
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	ddee      	ble.n	8005788 <_dtoa_r+0xa78>
 80057aa:	4651      	mov	r1, sl
 80057ac:	2201      	movs	r2, #1
 80057ae:	4628      	mov	r0, r5
 80057b0:	9302      	str	r3, [sp, #8]
 80057b2:	f000 fad1 	bl	8005d58 <__lshift>
 80057b6:	4621      	mov	r1, r4
 80057b8:	4682      	mov	sl, r0
 80057ba:	f000 fb39 	bl	8005e30 <__mcmp>
 80057be:	2800      	cmp	r0, #0
 80057c0:	9b02      	ldr	r3, [sp, #8]
 80057c2:	dc02      	bgt.n	80057ca <_dtoa_r+0xaba>
 80057c4:	d1e0      	bne.n	8005788 <_dtoa_r+0xa78>
 80057c6:	07da      	lsls	r2, r3, #31
 80057c8:	d5de      	bpl.n	8005788 <_dtoa_r+0xa78>
 80057ca:	2b39      	cmp	r3, #57	; 0x39
 80057cc:	d1da      	bne.n	8005784 <_dtoa_r+0xa74>
 80057ce:	2339      	movs	r3, #57	; 0x39
 80057d0:	f88b 3000 	strb.w	r3, [fp]
 80057d4:	463b      	mov	r3, r7
 80057d6:	461f      	mov	r7, r3
 80057d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80057dc:	3b01      	subs	r3, #1
 80057de:	2a39      	cmp	r2, #57	; 0x39
 80057e0:	d050      	beq.n	8005884 <_dtoa_r+0xb74>
 80057e2:	3201      	adds	r2, #1
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	e749      	b.n	800567c <_dtoa_r+0x96c>
 80057e8:	2a00      	cmp	r2, #0
 80057ea:	dd03      	ble.n	80057f4 <_dtoa_r+0xae4>
 80057ec:	2b39      	cmp	r3, #57	; 0x39
 80057ee:	d0ee      	beq.n	80057ce <_dtoa_r+0xabe>
 80057f0:	3301      	adds	r3, #1
 80057f2:	e7c9      	b.n	8005788 <_dtoa_r+0xa78>
 80057f4:	9a02      	ldr	r2, [sp, #8]
 80057f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80057fc:	428a      	cmp	r2, r1
 80057fe:	d02a      	beq.n	8005856 <_dtoa_r+0xb46>
 8005800:	4651      	mov	r1, sl
 8005802:	2300      	movs	r3, #0
 8005804:	220a      	movs	r2, #10
 8005806:	4628      	mov	r0, r5
 8005808:	f000 f8fa 	bl	8005a00 <__multadd>
 800580c:	45b0      	cmp	r8, r6
 800580e:	4682      	mov	sl, r0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	f04f 020a 	mov.w	r2, #10
 8005818:	4641      	mov	r1, r8
 800581a:	4628      	mov	r0, r5
 800581c:	d107      	bne.n	800582e <_dtoa_r+0xb1e>
 800581e:	f000 f8ef 	bl	8005a00 <__multadd>
 8005822:	4680      	mov	r8, r0
 8005824:	4606      	mov	r6, r0
 8005826:	9b02      	ldr	r3, [sp, #8]
 8005828:	3301      	adds	r3, #1
 800582a:	9302      	str	r3, [sp, #8]
 800582c:	e777      	b.n	800571e <_dtoa_r+0xa0e>
 800582e:	f000 f8e7 	bl	8005a00 <__multadd>
 8005832:	4631      	mov	r1, r6
 8005834:	4680      	mov	r8, r0
 8005836:	2300      	movs	r3, #0
 8005838:	220a      	movs	r2, #10
 800583a:	4628      	mov	r0, r5
 800583c:	f000 f8e0 	bl	8005a00 <__multadd>
 8005840:	4606      	mov	r6, r0
 8005842:	e7f0      	b.n	8005826 <_dtoa_r+0xb16>
 8005844:	f1bb 0f00 	cmp.w	fp, #0
 8005848:	bfcc      	ite	gt
 800584a:	465f      	movgt	r7, fp
 800584c:	2701      	movle	r7, #1
 800584e:	f04f 0800 	mov.w	r8, #0
 8005852:	9a08      	ldr	r2, [sp, #32]
 8005854:	4417      	add	r7, r2
 8005856:	4651      	mov	r1, sl
 8005858:	2201      	movs	r2, #1
 800585a:	4628      	mov	r0, r5
 800585c:	9302      	str	r3, [sp, #8]
 800585e:	f000 fa7b 	bl	8005d58 <__lshift>
 8005862:	4621      	mov	r1, r4
 8005864:	4682      	mov	sl, r0
 8005866:	f000 fae3 	bl	8005e30 <__mcmp>
 800586a:	2800      	cmp	r0, #0
 800586c:	dcb2      	bgt.n	80057d4 <_dtoa_r+0xac4>
 800586e:	d102      	bne.n	8005876 <_dtoa_r+0xb66>
 8005870:	9b02      	ldr	r3, [sp, #8]
 8005872:	07db      	lsls	r3, r3, #31
 8005874:	d4ae      	bmi.n	80057d4 <_dtoa_r+0xac4>
 8005876:	463b      	mov	r3, r7
 8005878:	461f      	mov	r7, r3
 800587a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800587e:	2a30      	cmp	r2, #48	; 0x30
 8005880:	d0fa      	beq.n	8005878 <_dtoa_r+0xb68>
 8005882:	e6fb      	b.n	800567c <_dtoa_r+0x96c>
 8005884:	9a08      	ldr	r2, [sp, #32]
 8005886:	429a      	cmp	r2, r3
 8005888:	d1a5      	bne.n	80057d6 <_dtoa_r+0xac6>
 800588a:	2331      	movs	r3, #49	; 0x31
 800588c:	f109 0901 	add.w	r9, r9, #1
 8005890:	7013      	strb	r3, [r2, #0]
 8005892:	e6f3      	b.n	800567c <_dtoa_r+0x96c>
 8005894:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <_dtoa_r+0xbd4>)
 8005896:	f7ff baa7 	b.w	8004de8 <_dtoa_r+0xd8>
 800589a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800589c:	2b00      	cmp	r3, #0
 800589e:	f47f aa80 	bne.w	8004da2 <_dtoa_r+0x92>
 80058a2:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <_dtoa_r+0xbd8>)
 80058a4:	f7ff baa0 	b.w	8004de8 <_dtoa_r+0xd8>
 80058a8:	f1bb 0f00 	cmp.w	fp, #0
 80058ac:	dc03      	bgt.n	80058b6 <_dtoa_r+0xba6>
 80058ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	f73f aecc 	bgt.w	800564e <_dtoa_r+0x93e>
 80058b6:	9f08      	ldr	r7, [sp, #32]
 80058b8:	4621      	mov	r1, r4
 80058ba:	4650      	mov	r0, sl
 80058bc:	f7ff f998 	bl	8004bf0 <quorem>
 80058c0:	9a08      	ldr	r2, [sp, #32]
 80058c2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80058c6:	f807 3b01 	strb.w	r3, [r7], #1
 80058ca:	1aba      	subs	r2, r7, r2
 80058cc:	4593      	cmp	fp, r2
 80058ce:	ddb9      	ble.n	8005844 <_dtoa_r+0xb34>
 80058d0:	4651      	mov	r1, sl
 80058d2:	2300      	movs	r3, #0
 80058d4:	220a      	movs	r2, #10
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 f892 	bl	8005a00 <__multadd>
 80058dc:	4682      	mov	sl, r0
 80058de:	e7eb      	b.n	80058b8 <_dtoa_r+0xba8>
 80058e0:	0800a1a7 	.word	0x0800a1a7
 80058e4:	0800a100 	.word	0x0800a100
 80058e8:	0800a124 	.word	0x0800a124

080058ec <_localeconv_r>:
 80058ec:	4800      	ldr	r0, [pc, #0]	; (80058f0 <_localeconv_r+0x4>)
 80058ee:	4770      	bx	lr
 80058f0:	20000180 	.word	0x20000180

080058f4 <malloc>:
 80058f4:	4b02      	ldr	r3, [pc, #8]	; (8005900 <malloc+0xc>)
 80058f6:	4601      	mov	r1, r0
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	f000 bbfb 	b.w	80060f4 <_malloc_r>
 80058fe:	bf00      	nop
 8005900:	2000002c 	.word	0x2000002c

08005904 <memchr>:
 8005904:	4603      	mov	r3, r0
 8005906:	b510      	push	{r4, lr}
 8005908:	b2c9      	uxtb	r1, r1
 800590a:	4402      	add	r2, r0
 800590c:	4293      	cmp	r3, r2
 800590e:	4618      	mov	r0, r3
 8005910:	d101      	bne.n	8005916 <memchr+0x12>
 8005912:	2000      	movs	r0, #0
 8005914:	e003      	b.n	800591e <memchr+0x1a>
 8005916:	7804      	ldrb	r4, [r0, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	428c      	cmp	r4, r1
 800591c:	d1f6      	bne.n	800590c <memchr+0x8>
 800591e:	bd10      	pop	{r4, pc}

08005920 <memcpy>:
 8005920:	440a      	add	r2, r1
 8005922:	4291      	cmp	r1, r2
 8005924:	f100 33ff 	add.w	r3, r0, #4294967295
 8005928:	d100      	bne.n	800592c <memcpy+0xc>
 800592a:	4770      	bx	lr
 800592c:	b510      	push	{r4, lr}
 800592e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005932:	4291      	cmp	r1, r2
 8005934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005938:	d1f9      	bne.n	800592e <memcpy+0xe>
 800593a:	bd10      	pop	{r4, pc}

0800593c <_Balloc>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005940:	4604      	mov	r4, r0
 8005942:	460d      	mov	r5, r1
 8005944:	b976      	cbnz	r6, 8005964 <_Balloc+0x28>
 8005946:	2010      	movs	r0, #16
 8005948:	f7ff ffd4 	bl	80058f4 <malloc>
 800594c:	4602      	mov	r2, r0
 800594e:	6260      	str	r0, [r4, #36]	; 0x24
 8005950:	b920      	cbnz	r0, 800595c <_Balloc+0x20>
 8005952:	2166      	movs	r1, #102	; 0x66
 8005954:	4b17      	ldr	r3, [pc, #92]	; (80059b4 <_Balloc+0x78>)
 8005956:	4818      	ldr	r0, [pc, #96]	; (80059b8 <_Balloc+0x7c>)
 8005958:	f000 fd92 	bl	8006480 <__assert_func>
 800595c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005960:	6006      	str	r6, [r0, #0]
 8005962:	60c6      	str	r6, [r0, #12]
 8005964:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005966:	68f3      	ldr	r3, [r6, #12]
 8005968:	b183      	cbz	r3, 800598c <_Balloc+0x50>
 800596a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005972:	b9b8      	cbnz	r0, 80059a4 <_Balloc+0x68>
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f605 	lsl.w	r6, r1, r5
 800597a:	1d72      	adds	r2, r6, #5
 800597c:	4620      	mov	r0, r4
 800597e:	0092      	lsls	r2, r2, #2
 8005980:	f000 fb5e 	bl	8006040 <_calloc_r>
 8005984:	b160      	cbz	r0, 80059a0 <_Balloc+0x64>
 8005986:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800598a:	e00e      	b.n	80059aa <_Balloc+0x6e>
 800598c:	2221      	movs	r2, #33	; 0x21
 800598e:	2104      	movs	r1, #4
 8005990:	4620      	mov	r0, r4
 8005992:	f000 fb55 	bl	8006040 <_calloc_r>
 8005996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005998:	60f0      	str	r0, [r6, #12]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e4      	bne.n	800596a <_Balloc+0x2e>
 80059a0:	2000      	movs	r0, #0
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	6802      	ldr	r2, [r0, #0]
 80059a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059aa:	2300      	movs	r3, #0
 80059ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059b0:	e7f7      	b.n	80059a2 <_Balloc+0x66>
 80059b2:	bf00      	nop
 80059b4:	0800a131 	.word	0x0800a131
 80059b8:	0800a1b8 	.word	0x0800a1b8

080059bc <_Bfree>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059c0:	4605      	mov	r5, r0
 80059c2:	460c      	mov	r4, r1
 80059c4:	b976      	cbnz	r6, 80059e4 <_Bfree+0x28>
 80059c6:	2010      	movs	r0, #16
 80059c8:	f7ff ff94 	bl	80058f4 <malloc>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6268      	str	r0, [r5, #36]	; 0x24
 80059d0:	b920      	cbnz	r0, 80059dc <_Bfree+0x20>
 80059d2:	218a      	movs	r1, #138	; 0x8a
 80059d4:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <_Bfree+0x3c>)
 80059d6:	4809      	ldr	r0, [pc, #36]	; (80059fc <_Bfree+0x40>)
 80059d8:	f000 fd52 	bl	8006480 <__assert_func>
 80059dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059e0:	6006      	str	r6, [r0, #0]
 80059e2:	60c6      	str	r6, [r0, #12]
 80059e4:	b13c      	cbz	r4, 80059f6 <_Bfree+0x3a>
 80059e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059e8:	6862      	ldr	r2, [r4, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059f0:	6021      	str	r1, [r4, #0]
 80059f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	0800a131 	.word	0x0800a131
 80059fc:	0800a1b8 	.word	0x0800a1b8

08005a00 <__multadd>:
 8005a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a04:	4698      	mov	r8, r3
 8005a06:	460c      	mov	r4, r1
 8005a08:	2300      	movs	r3, #0
 8005a0a:	690e      	ldr	r6, [r1, #16]
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	f101 0014 	add.w	r0, r1, #20
 8005a12:	6805      	ldr	r5, [r0, #0]
 8005a14:	3301      	adds	r3, #1
 8005a16:	b2a9      	uxth	r1, r5
 8005a18:	fb02 8101 	mla	r1, r2, r1, r8
 8005a1c:	0c2d      	lsrs	r5, r5, #16
 8005a1e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005a22:	fb02 c505 	mla	r5, r2, r5, ip
 8005a26:	b289      	uxth	r1, r1
 8005a28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005a2c:	429e      	cmp	r6, r3
 8005a2e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005a32:	f840 1b04 	str.w	r1, [r0], #4
 8005a36:	dcec      	bgt.n	8005a12 <__multadd+0x12>
 8005a38:	f1b8 0f00 	cmp.w	r8, #0
 8005a3c:	d022      	beq.n	8005a84 <__multadd+0x84>
 8005a3e:	68a3      	ldr	r3, [r4, #8]
 8005a40:	42b3      	cmp	r3, r6
 8005a42:	dc19      	bgt.n	8005a78 <__multadd+0x78>
 8005a44:	6861      	ldr	r1, [r4, #4]
 8005a46:	4638      	mov	r0, r7
 8005a48:	3101      	adds	r1, #1
 8005a4a:	f7ff ff77 	bl	800593c <_Balloc>
 8005a4e:	4605      	mov	r5, r0
 8005a50:	b928      	cbnz	r0, 8005a5e <__multadd+0x5e>
 8005a52:	4602      	mov	r2, r0
 8005a54:	21b5      	movs	r1, #181	; 0xb5
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <__multadd+0x8c>)
 8005a58:	480d      	ldr	r0, [pc, #52]	; (8005a90 <__multadd+0x90>)
 8005a5a:	f000 fd11 	bl	8006480 <__assert_func>
 8005a5e:	6922      	ldr	r2, [r4, #16]
 8005a60:	f104 010c 	add.w	r1, r4, #12
 8005a64:	3202      	adds	r2, #2
 8005a66:	0092      	lsls	r2, r2, #2
 8005a68:	300c      	adds	r0, #12
 8005a6a:	f7ff ff59 	bl	8005920 <memcpy>
 8005a6e:	4621      	mov	r1, r4
 8005a70:	4638      	mov	r0, r7
 8005a72:	f7ff ffa3 	bl	80059bc <_Bfree>
 8005a76:	462c      	mov	r4, r5
 8005a78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005a7c:	3601      	adds	r6, #1
 8005a7e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005a82:	6126      	str	r6, [r4, #16]
 8005a84:	4620      	mov	r0, r4
 8005a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a8a:	bf00      	nop
 8005a8c:	0800a1a7 	.word	0x0800a1a7
 8005a90:	0800a1b8 	.word	0x0800a1b8

08005a94 <__hi0bits>:
 8005a94:	0c02      	lsrs	r2, r0, #16
 8005a96:	0412      	lsls	r2, r2, #16
 8005a98:	4603      	mov	r3, r0
 8005a9a:	b9ca      	cbnz	r2, 8005ad0 <__hi0bits+0x3c>
 8005a9c:	0403      	lsls	r3, r0, #16
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005aa4:	bf04      	itt	eq
 8005aa6:	021b      	lsleq	r3, r3, #8
 8005aa8:	3008      	addeq	r0, #8
 8005aaa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005aae:	bf04      	itt	eq
 8005ab0:	011b      	lsleq	r3, r3, #4
 8005ab2:	3004      	addeq	r0, #4
 8005ab4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ab8:	bf04      	itt	eq
 8005aba:	009b      	lsleq	r3, r3, #2
 8005abc:	3002      	addeq	r0, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	db05      	blt.n	8005ace <__hi0bits+0x3a>
 8005ac2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005ac6:	f100 0001 	add.w	r0, r0, #1
 8005aca:	bf08      	it	eq
 8005acc:	2020      	moveq	r0, #32
 8005ace:	4770      	bx	lr
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	e7e5      	b.n	8005aa0 <__hi0bits+0xc>

08005ad4 <__lo0bits>:
 8005ad4:	6803      	ldr	r3, [r0, #0]
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	f013 0007 	ands.w	r0, r3, #7
 8005adc:	d00b      	beq.n	8005af6 <__lo0bits+0x22>
 8005ade:	07d9      	lsls	r1, r3, #31
 8005ae0:	d422      	bmi.n	8005b28 <__lo0bits+0x54>
 8005ae2:	0798      	lsls	r0, r3, #30
 8005ae4:	bf49      	itett	mi
 8005ae6:	085b      	lsrmi	r3, r3, #1
 8005ae8:	089b      	lsrpl	r3, r3, #2
 8005aea:	2001      	movmi	r0, #1
 8005aec:	6013      	strmi	r3, [r2, #0]
 8005aee:	bf5c      	itt	pl
 8005af0:	2002      	movpl	r0, #2
 8005af2:	6013      	strpl	r3, [r2, #0]
 8005af4:	4770      	bx	lr
 8005af6:	b299      	uxth	r1, r3
 8005af8:	b909      	cbnz	r1, 8005afe <__lo0bits+0x2a>
 8005afa:	2010      	movs	r0, #16
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b02:	bf04      	itt	eq
 8005b04:	0a1b      	lsreq	r3, r3, #8
 8005b06:	3008      	addeq	r0, #8
 8005b08:	0719      	lsls	r1, r3, #28
 8005b0a:	bf04      	itt	eq
 8005b0c:	091b      	lsreq	r3, r3, #4
 8005b0e:	3004      	addeq	r0, #4
 8005b10:	0799      	lsls	r1, r3, #30
 8005b12:	bf04      	itt	eq
 8005b14:	089b      	lsreq	r3, r3, #2
 8005b16:	3002      	addeq	r0, #2
 8005b18:	07d9      	lsls	r1, r3, #31
 8005b1a:	d403      	bmi.n	8005b24 <__lo0bits+0x50>
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	f100 0001 	add.w	r0, r0, #1
 8005b22:	d003      	beq.n	8005b2c <__lo0bits+0x58>
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	4770      	bx	lr
 8005b28:	2000      	movs	r0, #0
 8005b2a:	4770      	bx	lr
 8005b2c:	2020      	movs	r0, #32
 8005b2e:	4770      	bx	lr

08005b30 <__i2b>:
 8005b30:	b510      	push	{r4, lr}
 8005b32:	460c      	mov	r4, r1
 8005b34:	2101      	movs	r1, #1
 8005b36:	f7ff ff01 	bl	800593c <_Balloc>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	b928      	cbnz	r0, 8005b4a <__i2b+0x1a>
 8005b3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b42:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <__i2b+0x24>)
 8005b44:	4804      	ldr	r0, [pc, #16]	; (8005b58 <__i2b+0x28>)
 8005b46:	f000 fc9b 	bl	8006480 <__assert_func>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	6144      	str	r4, [r0, #20]
 8005b4e:	6103      	str	r3, [r0, #16]
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	bf00      	nop
 8005b54:	0800a1a7 	.word	0x0800a1a7
 8005b58:	0800a1b8 	.word	0x0800a1b8

08005b5c <__multiply>:
 8005b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b60:	4614      	mov	r4, r2
 8005b62:	690a      	ldr	r2, [r1, #16]
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	460d      	mov	r5, r1
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	bfbe      	ittt	lt
 8005b6c:	460b      	movlt	r3, r1
 8005b6e:	4625      	movlt	r5, r4
 8005b70:	461c      	movlt	r4, r3
 8005b72:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005b76:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005b7a:	68ab      	ldr	r3, [r5, #8]
 8005b7c:	6869      	ldr	r1, [r5, #4]
 8005b7e:	eb0a 0709 	add.w	r7, sl, r9
 8005b82:	42bb      	cmp	r3, r7
 8005b84:	b085      	sub	sp, #20
 8005b86:	bfb8      	it	lt
 8005b88:	3101      	addlt	r1, #1
 8005b8a:	f7ff fed7 	bl	800593c <_Balloc>
 8005b8e:	b930      	cbnz	r0, 8005b9e <__multiply+0x42>
 8005b90:	4602      	mov	r2, r0
 8005b92:	f240 115d 	movw	r1, #349	; 0x15d
 8005b96:	4b41      	ldr	r3, [pc, #260]	; (8005c9c <__multiply+0x140>)
 8005b98:	4841      	ldr	r0, [pc, #260]	; (8005ca0 <__multiply+0x144>)
 8005b9a:	f000 fc71 	bl	8006480 <__assert_func>
 8005b9e:	f100 0614 	add.w	r6, r0, #20
 8005ba2:	4633      	mov	r3, r6
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005baa:	4543      	cmp	r3, r8
 8005bac:	d31e      	bcc.n	8005bec <__multiply+0x90>
 8005bae:	f105 0c14 	add.w	ip, r5, #20
 8005bb2:	f104 0314 	add.w	r3, r4, #20
 8005bb6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005bba:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005bbe:	9202      	str	r2, [sp, #8]
 8005bc0:	ebac 0205 	sub.w	r2, ip, r5
 8005bc4:	3a15      	subs	r2, #21
 8005bc6:	f022 0203 	bic.w	r2, r2, #3
 8005bca:	3204      	adds	r2, #4
 8005bcc:	f105 0115 	add.w	r1, r5, #21
 8005bd0:	458c      	cmp	ip, r1
 8005bd2:	bf38      	it	cc
 8005bd4:	2204      	movcc	r2, #4
 8005bd6:	9201      	str	r2, [sp, #4]
 8005bd8:	9a02      	ldr	r2, [sp, #8]
 8005bda:	9303      	str	r3, [sp, #12]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d808      	bhi.n	8005bf2 <__multiply+0x96>
 8005be0:	2f00      	cmp	r7, #0
 8005be2:	dc55      	bgt.n	8005c90 <__multiply+0x134>
 8005be4:	6107      	str	r7, [r0, #16]
 8005be6:	b005      	add	sp, #20
 8005be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bec:	f843 2b04 	str.w	r2, [r3], #4
 8005bf0:	e7db      	b.n	8005baa <__multiply+0x4e>
 8005bf2:	f8b3 a000 	ldrh.w	sl, [r3]
 8005bf6:	f1ba 0f00 	cmp.w	sl, #0
 8005bfa:	d020      	beq.n	8005c3e <__multiply+0xe2>
 8005bfc:	46b1      	mov	r9, r6
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f105 0e14 	add.w	lr, r5, #20
 8005c04:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005c08:	f8d9 b000 	ldr.w	fp, [r9]
 8005c0c:	b2a1      	uxth	r1, r4
 8005c0e:	fa1f fb8b 	uxth.w	fp, fp
 8005c12:	fb0a b101 	mla	r1, sl, r1, fp
 8005c16:	4411      	add	r1, r2
 8005c18:	f8d9 2000 	ldr.w	r2, [r9]
 8005c1c:	0c24      	lsrs	r4, r4, #16
 8005c1e:	0c12      	lsrs	r2, r2, #16
 8005c20:	fb0a 2404 	mla	r4, sl, r4, r2
 8005c24:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005c28:	b289      	uxth	r1, r1
 8005c2a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c2e:	45f4      	cmp	ip, lr
 8005c30:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005c34:	f849 1b04 	str.w	r1, [r9], #4
 8005c38:	d8e4      	bhi.n	8005c04 <__multiply+0xa8>
 8005c3a:	9901      	ldr	r1, [sp, #4]
 8005c3c:	5072      	str	r2, [r6, r1]
 8005c3e:	9a03      	ldr	r2, [sp, #12]
 8005c40:	3304      	adds	r3, #4
 8005c42:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c46:	f1b9 0f00 	cmp.w	r9, #0
 8005c4a:	d01f      	beq.n	8005c8c <__multiply+0x130>
 8005c4c:	46b6      	mov	lr, r6
 8005c4e:	f04f 0a00 	mov.w	sl, #0
 8005c52:	6834      	ldr	r4, [r6, #0]
 8005c54:	f105 0114 	add.w	r1, r5, #20
 8005c58:	880a      	ldrh	r2, [r1, #0]
 8005c5a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005c5e:	b2a4      	uxth	r4, r4
 8005c60:	fb09 b202 	mla	r2, r9, r2, fp
 8005c64:	4492      	add	sl, r2
 8005c66:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005c6a:	f84e 4b04 	str.w	r4, [lr], #4
 8005c6e:	f851 4b04 	ldr.w	r4, [r1], #4
 8005c72:	f8be 2000 	ldrh.w	r2, [lr]
 8005c76:	0c24      	lsrs	r4, r4, #16
 8005c78:	fb09 2404 	mla	r4, r9, r4, r2
 8005c7c:	458c      	cmp	ip, r1
 8005c7e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005c82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005c86:	d8e7      	bhi.n	8005c58 <__multiply+0xfc>
 8005c88:	9a01      	ldr	r2, [sp, #4]
 8005c8a:	50b4      	str	r4, [r6, r2]
 8005c8c:	3604      	adds	r6, #4
 8005c8e:	e7a3      	b.n	8005bd8 <__multiply+0x7c>
 8005c90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1a5      	bne.n	8005be4 <__multiply+0x88>
 8005c98:	3f01      	subs	r7, #1
 8005c9a:	e7a1      	b.n	8005be0 <__multiply+0x84>
 8005c9c:	0800a1a7 	.word	0x0800a1a7
 8005ca0:	0800a1b8 	.word	0x0800a1b8

08005ca4 <__pow5mult>:
 8005ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ca8:	4615      	mov	r5, r2
 8005caa:	f012 0203 	ands.w	r2, r2, #3
 8005cae:	4606      	mov	r6, r0
 8005cb0:	460f      	mov	r7, r1
 8005cb2:	d007      	beq.n	8005cc4 <__pow5mult+0x20>
 8005cb4:	4c25      	ldr	r4, [pc, #148]	; (8005d4c <__pow5mult+0xa8>)
 8005cb6:	3a01      	subs	r2, #1
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cbe:	f7ff fe9f 	bl	8005a00 <__multadd>
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	10ad      	asrs	r5, r5, #2
 8005cc6:	d03d      	beq.n	8005d44 <__pow5mult+0xa0>
 8005cc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005cca:	b97c      	cbnz	r4, 8005cec <__pow5mult+0x48>
 8005ccc:	2010      	movs	r0, #16
 8005cce:	f7ff fe11 	bl	80058f4 <malloc>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	6270      	str	r0, [r6, #36]	; 0x24
 8005cd6:	b928      	cbnz	r0, 8005ce4 <__pow5mult+0x40>
 8005cd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005cdc:	4b1c      	ldr	r3, [pc, #112]	; (8005d50 <__pow5mult+0xac>)
 8005cde:	481d      	ldr	r0, [pc, #116]	; (8005d54 <__pow5mult+0xb0>)
 8005ce0:	f000 fbce 	bl	8006480 <__assert_func>
 8005ce4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ce8:	6004      	str	r4, [r0, #0]
 8005cea:	60c4      	str	r4, [r0, #12]
 8005cec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005cf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cf4:	b94c      	cbnz	r4, 8005d0a <__pow5mult+0x66>
 8005cf6:	f240 2171 	movw	r1, #625	; 0x271
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f7ff ff18 	bl	8005b30 <__i2b>
 8005d00:	2300      	movs	r3, #0
 8005d02:	4604      	mov	r4, r0
 8005d04:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d08:	6003      	str	r3, [r0, #0]
 8005d0a:	f04f 0900 	mov.w	r9, #0
 8005d0e:	07eb      	lsls	r3, r5, #31
 8005d10:	d50a      	bpl.n	8005d28 <__pow5mult+0x84>
 8005d12:	4639      	mov	r1, r7
 8005d14:	4622      	mov	r2, r4
 8005d16:	4630      	mov	r0, r6
 8005d18:	f7ff ff20 	bl	8005b5c <__multiply>
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	4639      	mov	r1, r7
 8005d20:	4630      	mov	r0, r6
 8005d22:	f7ff fe4b 	bl	80059bc <_Bfree>
 8005d26:	4647      	mov	r7, r8
 8005d28:	106d      	asrs	r5, r5, #1
 8005d2a:	d00b      	beq.n	8005d44 <__pow5mult+0xa0>
 8005d2c:	6820      	ldr	r0, [r4, #0]
 8005d2e:	b938      	cbnz	r0, 8005d40 <__pow5mult+0x9c>
 8005d30:	4622      	mov	r2, r4
 8005d32:	4621      	mov	r1, r4
 8005d34:	4630      	mov	r0, r6
 8005d36:	f7ff ff11 	bl	8005b5c <__multiply>
 8005d3a:	6020      	str	r0, [r4, #0]
 8005d3c:	f8c0 9000 	str.w	r9, [r0]
 8005d40:	4604      	mov	r4, r0
 8005d42:	e7e4      	b.n	8005d0e <__pow5mult+0x6a>
 8005d44:	4638      	mov	r0, r7
 8005d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d4a:	bf00      	nop
 8005d4c:	0800a308 	.word	0x0800a308
 8005d50:	0800a131 	.word	0x0800a131
 8005d54:	0800a1b8 	.word	0x0800a1b8

08005d58 <__lshift>:
 8005d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	4607      	mov	r7, r0
 8005d60:	4691      	mov	r9, r2
 8005d62:	6923      	ldr	r3, [r4, #16]
 8005d64:	6849      	ldr	r1, [r1, #4]
 8005d66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d6a:	68a3      	ldr	r3, [r4, #8]
 8005d6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d70:	f108 0601 	add.w	r6, r8, #1
 8005d74:	42b3      	cmp	r3, r6
 8005d76:	db0b      	blt.n	8005d90 <__lshift+0x38>
 8005d78:	4638      	mov	r0, r7
 8005d7a:	f7ff fddf 	bl	800593c <_Balloc>
 8005d7e:	4605      	mov	r5, r0
 8005d80:	b948      	cbnz	r0, 8005d96 <__lshift+0x3e>
 8005d82:	4602      	mov	r2, r0
 8005d84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005d88:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <__lshift+0xd0>)
 8005d8a:	4828      	ldr	r0, [pc, #160]	; (8005e2c <__lshift+0xd4>)
 8005d8c:	f000 fb78 	bl	8006480 <__assert_func>
 8005d90:	3101      	adds	r1, #1
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	e7ee      	b.n	8005d74 <__lshift+0x1c>
 8005d96:	2300      	movs	r3, #0
 8005d98:	f100 0114 	add.w	r1, r0, #20
 8005d9c:	f100 0210 	add.w	r2, r0, #16
 8005da0:	4618      	mov	r0, r3
 8005da2:	4553      	cmp	r3, sl
 8005da4:	db33      	blt.n	8005e0e <__lshift+0xb6>
 8005da6:	6920      	ldr	r0, [r4, #16]
 8005da8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005dac:	f104 0314 	add.w	r3, r4, #20
 8005db0:	f019 091f 	ands.w	r9, r9, #31
 8005db4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005db8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005dbc:	d02b      	beq.n	8005e16 <__lshift+0xbe>
 8005dbe:	468a      	mov	sl, r1
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f1c9 0e20 	rsb	lr, r9, #32
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	fa00 f009 	lsl.w	r0, r0, r9
 8005dcc:	4302      	orrs	r2, r0
 8005dce:	f84a 2b04 	str.w	r2, [sl], #4
 8005dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd6:	459c      	cmp	ip, r3
 8005dd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ddc:	d8f3      	bhi.n	8005dc6 <__lshift+0x6e>
 8005dde:	ebac 0304 	sub.w	r3, ip, r4
 8005de2:	3b15      	subs	r3, #21
 8005de4:	f023 0303 	bic.w	r3, r3, #3
 8005de8:	3304      	adds	r3, #4
 8005dea:	f104 0015 	add.w	r0, r4, #21
 8005dee:	4584      	cmp	ip, r0
 8005df0:	bf38      	it	cc
 8005df2:	2304      	movcc	r3, #4
 8005df4:	50ca      	str	r2, [r1, r3]
 8005df6:	b10a      	cbz	r2, 8005dfc <__lshift+0xa4>
 8005df8:	f108 0602 	add.w	r6, r8, #2
 8005dfc:	3e01      	subs	r6, #1
 8005dfe:	4638      	mov	r0, r7
 8005e00:	4621      	mov	r1, r4
 8005e02:	612e      	str	r6, [r5, #16]
 8005e04:	f7ff fdda 	bl	80059bc <_Bfree>
 8005e08:	4628      	mov	r0, r5
 8005e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e12:	3301      	adds	r3, #1
 8005e14:	e7c5      	b.n	8005da2 <__lshift+0x4a>
 8005e16:	3904      	subs	r1, #4
 8005e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e1c:	459c      	cmp	ip, r3
 8005e1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e22:	d8f9      	bhi.n	8005e18 <__lshift+0xc0>
 8005e24:	e7ea      	b.n	8005dfc <__lshift+0xa4>
 8005e26:	bf00      	nop
 8005e28:	0800a1a7 	.word	0x0800a1a7
 8005e2c:	0800a1b8 	.word	0x0800a1b8

08005e30 <__mcmp>:
 8005e30:	4603      	mov	r3, r0
 8005e32:	690a      	ldr	r2, [r1, #16]
 8005e34:	6900      	ldr	r0, [r0, #16]
 8005e36:	b530      	push	{r4, r5, lr}
 8005e38:	1a80      	subs	r0, r0, r2
 8005e3a:	d10d      	bne.n	8005e58 <__mcmp+0x28>
 8005e3c:	3314      	adds	r3, #20
 8005e3e:	3114      	adds	r1, #20
 8005e40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e50:	4295      	cmp	r5, r2
 8005e52:	d002      	beq.n	8005e5a <__mcmp+0x2a>
 8005e54:	d304      	bcc.n	8005e60 <__mcmp+0x30>
 8005e56:	2001      	movs	r0, #1
 8005e58:	bd30      	pop	{r4, r5, pc}
 8005e5a:	42a3      	cmp	r3, r4
 8005e5c:	d3f4      	bcc.n	8005e48 <__mcmp+0x18>
 8005e5e:	e7fb      	b.n	8005e58 <__mcmp+0x28>
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295
 8005e64:	e7f8      	b.n	8005e58 <__mcmp+0x28>
	...

08005e68 <__mdiff>:
 8005e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	4606      	mov	r6, r0
 8005e70:	4611      	mov	r1, r2
 8005e72:	4620      	mov	r0, r4
 8005e74:	4692      	mov	sl, r2
 8005e76:	f7ff ffdb 	bl	8005e30 <__mcmp>
 8005e7a:	1e05      	subs	r5, r0, #0
 8005e7c:	d111      	bne.n	8005ea2 <__mdiff+0x3a>
 8005e7e:	4629      	mov	r1, r5
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7ff fd5b 	bl	800593c <_Balloc>
 8005e86:	4602      	mov	r2, r0
 8005e88:	b928      	cbnz	r0, 8005e96 <__mdiff+0x2e>
 8005e8a:	f240 2132 	movw	r1, #562	; 0x232
 8005e8e:	4b3c      	ldr	r3, [pc, #240]	; (8005f80 <__mdiff+0x118>)
 8005e90:	483c      	ldr	r0, [pc, #240]	; (8005f84 <__mdiff+0x11c>)
 8005e92:	f000 faf5 	bl	8006480 <__assert_func>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea2:	bfa4      	itt	ge
 8005ea4:	4653      	movge	r3, sl
 8005ea6:	46a2      	movge	sl, r4
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005eae:	bfa6      	itte	ge
 8005eb0:	461c      	movge	r4, r3
 8005eb2:	2500      	movge	r5, #0
 8005eb4:	2501      	movlt	r5, #1
 8005eb6:	f7ff fd41 	bl	800593c <_Balloc>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	b918      	cbnz	r0, 8005ec6 <__mdiff+0x5e>
 8005ebe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005ec2:	4b2f      	ldr	r3, [pc, #188]	; (8005f80 <__mdiff+0x118>)
 8005ec4:	e7e4      	b.n	8005e90 <__mdiff+0x28>
 8005ec6:	f100 0814 	add.w	r8, r0, #20
 8005eca:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005ece:	60c5      	str	r5, [r0, #12]
 8005ed0:	f04f 0c00 	mov.w	ip, #0
 8005ed4:	f10a 0514 	add.w	r5, sl, #20
 8005ed8:	f10a 0010 	add.w	r0, sl, #16
 8005edc:	46c2      	mov	sl, r8
 8005ede:	6926      	ldr	r6, [r4, #16]
 8005ee0:	f104 0914 	add.w	r9, r4, #20
 8005ee4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005ee8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005eec:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005ef0:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ef4:	fa1f f18b 	uxth.w	r1, fp
 8005ef8:	4461      	add	r1, ip
 8005efa:	fa1f fc83 	uxth.w	ip, r3
 8005efe:	0c1b      	lsrs	r3, r3, #16
 8005f00:	eba1 010c 	sub.w	r1, r1, ip
 8005f04:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f08:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f0c:	b289      	uxth	r1, r1
 8005f0e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f12:	454e      	cmp	r6, r9
 8005f14:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f18:	f84a 3b04 	str.w	r3, [sl], #4
 8005f1c:	d8e6      	bhi.n	8005eec <__mdiff+0x84>
 8005f1e:	1b33      	subs	r3, r6, r4
 8005f20:	3b15      	subs	r3, #21
 8005f22:	f023 0303 	bic.w	r3, r3, #3
 8005f26:	3415      	adds	r4, #21
 8005f28:	3304      	adds	r3, #4
 8005f2a:	42a6      	cmp	r6, r4
 8005f2c:	bf38      	it	cc
 8005f2e:	2304      	movcc	r3, #4
 8005f30:	441d      	add	r5, r3
 8005f32:	4443      	add	r3, r8
 8005f34:	461e      	mov	r6, r3
 8005f36:	462c      	mov	r4, r5
 8005f38:	4574      	cmp	r4, lr
 8005f3a:	d30e      	bcc.n	8005f5a <__mdiff+0xf2>
 8005f3c:	f10e 0103 	add.w	r1, lr, #3
 8005f40:	1b49      	subs	r1, r1, r5
 8005f42:	f021 0103 	bic.w	r1, r1, #3
 8005f46:	3d03      	subs	r5, #3
 8005f48:	45ae      	cmp	lr, r5
 8005f4a:	bf38      	it	cc
 8005f4c:	2100      	movcc	r1, #0
 8005f4e:	4419      	add	r1, r3
 8005f50:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005f54:	b18b      	cbz	r3, 8005f7a <__mdiff+0x112>
 8005f56:	6117      	str	r7, [r2, #16]
 8005f58:	e7a0      	b.n	8005e9c <__mdiff+0x34>
 8005f5a:	f854 8b04 	ldr.w	r8, [r4], #4
 8005f5e:	fa1f f188 	uxth.w	r1, r8
 8005f62:	4461      	add	r1, ip
 8005f64:	1408      	asrs	r0, r1, #16
 8005f66:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005f6a:	b289      	uxth	r1, r1
 8005f6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005f70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f74:	f846 1b04 	str.w	r1, [r6], #4
 8005f78:	e7de      	b.n	8005f38 <__mdiff+0xd0>
 8005f7a:	3f01      	subs	r7, #1
 8005f7c:	e7e8      	b.n	8005f50 <__mdiff+0xe8>
 8005f7e:	bf00      	nop
 8005f80:	0800a1a7 	.word	0x0800a1a7
 8005f84:	0800a1b8 	.word	0x0800a1b8

08005f88 <__d2b>:
 8005f88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005f92:	4690      	mov	r8, r2
 8005f94:	461d      	mov	r5, r3
 8005f96:	f7ff fcd1 	bl	800593c <_Balloc>
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	b930      	cbnz	r0, 8005fac <__d2b+0x24>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	f240 310a 	movw	r1, #778	; 0x30a
 8005fa4:	4b24      	ldr	r3, [pc, #144]	; (8006038 <__d2b+0xb0>)
 8005fa6:	4825      	ldr	r0, [pc, #148]	; (800603c <__d2b+0xb4>)
 8005fa8:	f000 fa6a 	bl	8006480 <__assert_func>
 8005fac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005fb0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005fb4:	bb2d      	cbnz	r5, 8006002 <__d2b+0x7a>
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	f1b8 0300 	subs.w	r3, r8, #0
 8005fbc:	d026      	beq.n	800600c <__d2b+0x84>
 8005fbe:	4668      	mov	r0, sp
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	f7ff fd87 	bl	8005ad4 <__lo0bits>
 8005fc6:	9900      	ldr	r1, [sp, #0]
 8005fc8:	b1f0      	cbz	r0, 8006008 <__d2b+0x80>
 8005fca:	9a01      	ldr	r2, [sp, #4]
 8005fcc:	f1c0 0320 	rsb	r3, r0, #32
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	40c2      	lsrs	r2, r0
 8005fd8:	6163      	str	r3, [r4, #20]
 8005fda:	9201      	str	r2, [sp, #4]
 8005fdc:	9b01      	ldr	r3, [sp, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bf14      	ite	ne
 8005fe2:	2102      	movne	r1, #2
 8005fe4:	2101      	moveq	r1, #1
 8005fe6:	61a3      	str	r3, [r4, #24]
 8005fe8:	6121      	str	r1, [r4, #16]
 8005fea:	b1c5      	cbz	r5, 800601e <__d2b+0x96>
 8005fec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ff0:	4405      	add	r5, r0
 8005ff2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ff6:	603d      	str	r5, [r7, #0]
 8005ff8:	6030      	str	r0, [r6, #0]
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	b002      	add	sp, #8
 8005ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006006:	e7d6      	b.n	8005fb6 <__d2b+0x2e>
 8006008:	6161      	str	r1, [r4, #20]
 800600a:	e7e7      	b.n	8005fdc <__d2b+0x54>
 800600c:	a801      	add	r0, sp, #4
 800600e:	f7ff fd61 	bl	8005ad4 <__lo0bits>
 8006012:	2101      	movs	r1, #1
 8006014:	9b01      	ldr	r3, [sp, #4]
 8006016:	6121      	str	r1, [r4, #16]
 8006018:	6163      	str	r3, [r4, #20]
 800601a:	3020      	adds	r0, #32
 800601c:	e7e5      	b.n	8005fea <__d2b+0x62>
 800601e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006022:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006026:	6038      	str	r0, [r7, #0]
 8006028:	6918      	ldr	r0, [r3, #16]
 800602a:	f7ff fd33 	bl	8005a94 <__hi0bits>
 800602e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006032:	6031      	str	r1, [r6, #0]
 8006034:	e7e1      	b.n	8005ffa <__d2b+0x72>
 8006036:	bf00      	nop
 8006038:	0800a1a7 	.word	0x0800a1a7
 800603c:	0800a1b8 	.word	0x0800a1b8

08006040 <_calloc_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	fb02 f501 	mul.w	r5, r2, r1
 8006046:	4629      	mov	r1, r5
 8006048:	f000 f854 	bl	80060f4 <_malloc_r>
 800604c:	4604      	mov	r4, r0
 800604e:	b118      	cbz	r0, 8006058 <_calloc_r+0x18>
 8006050:	462a      	mov	r2, r5
 8006052:	2100      	movs	r1, #0
 8006054:	f7fe f944 	bl	80042e0 <memset>
 8006058:	4620      	mov	r0, r4
 800605a:	bd38      	pop	{r3, r4, r5, pc}

0800605c <_free_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4605      	mov	r5, r0
 8006060:	2900      	cmp	r1, #0
 8006062:	d043      	beq.n	80060ec <_free_r+0x90>
 8006064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006068:	1f0c      	subs	r4, r1, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	bfb8      	it	lt
 800606e:	18e4      	addlt	r4, r4, r3
 8006070:	f000 fa62 	bl	8006538 <__malloc_lock>
 8006074:	4a1e      	ldr	r2, [pc, #120]	; (80060f0 <_free_r+0x94>)
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	4610      	mov	r0, r2
 800607a:	b933      	cbnz	r3, 800608a <_free_r+0x2e>
 800607c:	6063      	str	r3, [r4, #4]
 800607e:	6014      	str	r4, [r2, #0]
 8006080:	4628      	mov	r0, r5
 8006082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006086:	f000 ba5d 	b.w	8006544 <__malloc_unlock>
 800608a:	42a3      	cmp	r3, r4
 800608c:	d90a      	bls.n	80060a4 <_free_r+0x48>
 800608e:	6821      	ldr	r1, [r4, #0]
 8006090:	1862      	adds	r2, r4, r1
 8006092:	4293      	cmp	r3, r2
 8006094:	bf01      	itttt	eq
 8006096:	681a      	ldreq	r2, [r3, #0]
 8006098:	685b      	ldreq	r3, [r3, #4]
 800609a:	1852      	addeq	r2, r2, r1
 800609c:	6022      	streq	r2, [r4, #0]
 800609e:	6063      	str	r3, [r4, #4]
 80060a0:	6004      	str	r4, [r0, #0]
 80060a2:	e7ed      	b.n	8006080 <_free_r+0x24>
 80060a4:	461a      	mov	r2, r3
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	b10b      	cbz	r3, 80060ae <_free_r+0x52>
 80060aa:	42a3      	cmp	r3, r4
 80060ac:	d9fa      	bls.n	80060a4 <_free_r+0x48>
 80060ae:	6811      	ldr	r1, [r2, #0]
 80060b0:	1850      	adds	r0, r2, r1
 80060b2:	42a0      	cmp	r0, r4
 80060b4:	d10b      	bne.n	80060ce <_free_r+0x72>
 80060b6:	6820      	ldr	r0, [r4, #0]
 80060b8:	4401      	add	r1, r0
 80060ba:	1850      	adds	r0, r2, r1
 80060bc:	4283      	cmp	r3, r0
 80060be:	6011      	str	r1, [r2, #0]
 80060c0:	d1de      	bne.n	8006080 <_free_r+0x24>
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	4401      	add	r1, r0
 80060c8:	6011      	str	r1, [r2, #0]
 80060ca:	6053      	str	r3, [r2, #4]
 80060cc:	e7d8      	b.n	8006080 <_free_r+0x24>
 80060ce:	d902      	bls.n	80060d6 <_free_r+0x7a>
 80060d0:	230c      	movs	r3, #12
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	e7d4      	b.n	8006080 <_free_r+0x24>
 80060d6:	6820      	ldr	r0, [r4, #0]
 80060d8:	1821      	adds	r1, r4, r0
 80060da:	428b      	cmp	r3, r1
 80060dc:	bf01      	itttt	eq
 80060de:	6819      	ldreq	r1, [r3, #0]
 80060e0:	685b      	ldreq	r3, [r3, #4]
 80060e2:	1809      	addeq	r1, r1, r0
 80060e4:	6021      	streq	r1, [r4, #0]
 80060e6:	6063      	str	r3, [r4, #4]
 80060e8:	6054      	str	r4, [r2, #4]
 80060ea:	e7c9      	b.n	8006080 <_free_r+0x24>
 80060ec:	bd38      	pop	{r3, r4, r5, pc}
 80060ee:	bf00      	nop
 80060f0:	20000224 	.word	0x20000224

080060f4 <_malloc_r>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	1ccd      	adds	r5, r1, #3
 80060f8:	f025 0503 	bic.w	r5, r5, #3
 80060fc:	3508      	adds	r5, #8
 80060fe:	2d0c      	cmp	r5, #12
 8006100:	bf38      	it	cc
 8006102:	250c      	movcc	r5, #12
 8006104:	2d00      	cmp	r5, #0
 8006106:	4606      	mov	r6, r0
 8006108:	db01      	blt.n	800610e <_malloc_r+0x1a>
 800610a:	42a9      	cmp	r1, r5
 800610c:	d903      	bls.n	8006116 <_malloc_r+0x22>
 800610e:	230c      	movs	r3, #12
 8006110:	6033      	str	r3, [r6, #0]
 8006112:	2000      	movs	r0, #0
 8006114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006116:	f000 fa0f 	bl	8006538 <__malloc_lock>
 800611a:	4921      	ldr	r1, [pc, #132]	; (80061a0 <_malloc_r+0xac>)
 800611c:	680a      	ldr	r2, [r1, #0]
 800611e:	4614      	mov	r4, r2
 8006120:	b99c      	cbnz	r4, 800614a <_malloc_r+0x56>
 8006122:	4f20      	ldr	r7, [pc, #128]	; (80061a4 <_malloc_r+0xb0>)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	b923      	cbnz	r3, 8006132 <_malloc_r+0x3e>
 8006128:	4621      	mov	r1, r4
 800612a:	4630      	mov	r0, r6
 800612c:	f000 f998 	bl	8006460 <_sbrk_r>
 8006130:	6038      	str	r0, [r7, #0]
 8006132:	4629      	mov	r1, r5
 8006134:	4630      	mov	r0, r6
 8006136:	f000 f993 	bl	8006460 <_sbrk_r>
 800613a:	1c43      	adds	r3, r0, #1
 800613c:	d123      	bne.n	8006186 <_malloc_r+0x92>
 800613e:	230c      	movs	r3, #12
 8006140:	4630      	mov	r0, r6
 8006142:	6033      	str	r3, [r6, #0]
 8006144:	f000 f9fe 	bl	8006544 <__malloc_unlock>
 8006148:	e7e3      	b.n	8006112 <_malloc_r+0x1e>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	1b5b      	subs	r3, r3, r5
 800614e:	d417      	bmi.n	8006180 <_malloc_r+0x8c>
 8006150:	2b0b      	cmp	r3, #11
 8006152:	d903      	bls.n	800615c <_malloc_r+0x68>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	441c      	add	r4, r3
 8006158:	6025      	str	r5, [r4, #0]
 800615a:	e004      	b.n	8006166 <_malloc_r+0x72>
 800615c:	6863      	ldr	r3, [r4, #4]
 800615e:	42a2      	cmp	r2, r4
 8006160:	bf0c      	ite	eq
 8006162:	600b      	streq	r3, [r1, #0]
 8006164:	6053      	strne	r3, [r2, #4]
 8006166:	4630      	mov	r0, r6
 8006168:	f000 f9ec 	bl	8006544 <__malloc_unlock>
 800616c:	f104 000b 	add.w	r0, r4, #11
 8006170:	1d23      	adds	r3, r4, #4
 8006172:	f020 0007 	bic.w	r0, r0, #7
 8006176:	1ac2      	subs	r2, r0, r3
 8006178:	d0cc      	beq.n	8006114 <_malloc_r+0x20>
 800617a:	1a1b      	subs	r3, r3, r0
 800617c:	50a3      	str	r3, [r4, r2]
 800617e:	e7c9      	b.n	8006114 <_malloc_r+0x20>
 8006180:	4622      	mov	r2, r4
 8006182:	6864      	ldr	r4, [r4, #4]
 8006184:	e7cc      	b.n	8006120 <_malloc_r+0x2c>
 8006186:	1cc4      	adds	r4, r0, #3
 8006188:	f024 0403 	bic.w	r4, r4, #3
 800618c:	42a0      	cmp	r0, r4
 800618e:	d0e3      	beq.n	8006158 <_malloc_r+0x64>
 8006190:	1a21      	subs	r1, r4, r0
 8006192:	4630      	mov	r0, r6
 8006194:	f000 f964 	bl	8006460 <_sbrk_r>
 8006198:	3001      	adds	r0, #1
 800619a:	d1dd      	bne.n	8006158 <_malloc_r+0x64>
 800619c:	e7cf      	b.n	800613e <_malloc_r+0x4a>
 800619e:	bf00      	nop
 80061a0:	20000224 	.word	0x20000224
 80061a4:	20000228 	.word	0x20000228

080061a8 <__ssputs_r>:
 80061a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	688e      	ldr	r6, [r1, #8]
 80061ae:	4682      	mov	sl, r0
 80061b0:	429e      	cmp	r6, r3
 80061b2:	460c      	mov	r4, r1
 80061b4:	4690      	mov	r8, r2
 80061b6:	461f      	mov	r7, r3
 80061b8:	d838      	bhi.n	800622c <__ssputs_r+0x84>
 80061ba:	898a      	ldrh	r2, [r1, #12]
 80061bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061c0:	d032      	beq.n	8006228 <__ssputs_r+0x80>
 80061c2:	6825      	ldr	r5, [r4, #0]
 80061c4:	6909      	ldr	r1, [r1, #16]
 80061c6:	3301      	adds	r3, #1
 80061c8:	eba5 0901 	sub.w	r9, r5, r1
 80061cc:	6965      	ldr	r5, [r4, #20]
 80061ce:	444b      	add	r3, r9
 80061d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061d8:	106d      	asrs	r5, r5, #1
 80061da:	429d      	cmp	r5, r3
 80061dc:	bf38      	it	cc
 80061de:	461d      	movcc	r5, r3
 80061e0:	0553      	lsls	r3, r2, #21
 80061e2:	d531      	bpl.n	8006248 <__ssputs_r+0xa0>
 80061e4:	4629      	mov	r1, r5
 80061e6:	f7ff ff85 	bl	80060f4 <_malloc_r>
 80061ea:	4606      	mov	r6, r0
 80061ec:	b950      	cbnz	r0, 8006204 <__ssputs_r+0x5c>
 80061ee:	230c      	movs	r3, #12
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	f8ca 3000 	str.w	r3, [sl]
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061fe:	81a3      	strh	r3, [r4, #12]
 8006200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006204:	464a      	mov	r2, r9
 8006206:	6921      	ldr	r1, [r4, #16]
 8006208:	f7ff fb8a 	bl	8005920 <memcpy>
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006216:	81a3      	strh	r3, [r4, #12]
 8006218:	6126      	str	r6, [r4, #16]
 800621a:	444e      	add	r6, r9
 800621c:	6026      	str	r6, [r4, #0]
 800621e:	463e      	mov	r6, r7
 8006220:	6165      	str	r5, [r4, #20]
 8006222:	eba5 0509 	sub.w	r5, r5, r9
 8006226:	60a5      	str	r5, [r4, #8]
 8006228:	42be      	cmp	r6, r7
 800622a:	d900      	bls.n	800622e <__ssputs_r+0x86>
 800622c:	463e      	mov	r6, r7
 800622e:	4632      	mov	r2, r6
 8006230:	4641      	mov	r1, r8
 8006232:	6820      	ldr	r0, [r4, #0]
 8006234:	f000 f966 	bl	8006504 <memmove>
 8006238:	68a3      	ldr	r3, [r4, #8]
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	1b9b      	subs	r3, r3, r6
 800623e:	4432      	add	r2, r6
 8006240:	2000      	movs	r0, #0
 8006242:	60a3      	str	r3, [r4, #8]
 8006244:	6022      	str	r2, [r4, #0]
 8006246:	e7db      	b.n	8006200 <__ssputs_r+0x58>
 8006248:	462a      	mov	r2, r5
 800624a:	f000 f981 	bl	8006550 <_realloc_r>
 800624e:	4606      	mov	r6, r0
 8006250:	2800      	cmp	r0, #0
 8006252:	d1e1      	bne.n	8006218 <__ssputs_r+0x70>
 8006254:	4650      	mov	r0, sl
 8006256:	6921      	ldr	r1, [r4, #16]
 8006258:	f7ff ff00 	bl	800605c <_free_r>
 800625c:	e7c7      	b.n	80061ee <__ssputs_r+0x46>
	...

08006260 <_svfiprintf_r>:
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	4698      	mov	r8, r3
 8006266:	898b      	ldrh	r3, [r1, #12]
 8006268:	4607      	mov	r7, r0
 800626a:	061b      	lsls	r3, r3, #24
 800626c:	460d      	mov	r5, r1
 800626e:	4614      	mov	r4, r2
 8006270:	b09d      	sub	sp, #116	; 0x74
 8006272:	d50e      	bpl.n	8006292 <_svfiprintf_r+0x32>
 8006274:	690b      	ldr	r3, [r1, #16]
 8006276:	b963      	cbnz	r3, 8006292 <_svfiprintf_r+0x32>
 8006278:	2140      	movs	r1, #64	; 0x40
 800627a:	f7ff ff3b 	bl	80060f4 <_malloc_r>
 800627e:	6028      	str	r0, [r5, #0]
 8006280:	6128      	str	r0, [r5, #16]
 8006282:	b920      	cbnz	r0, 800628e <_svfiprintf_r+0x2e>
 8006284:	230c      	movs	r3, #12
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	e0d1      	b.n	8006432 <_svfiprintf_r+0x1d2>
 800628e:	2340      	movs	r3, #64	; 0x40
 8006290:	616b      	str	r3, [r5, #20]
 8006292:	2300      	movs	r3, #0
 8006294:	9309      	str	r3, [sp, #36]	; 0x24
 8006296:	2320      	movs	r3, #32
 8006298:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800629c:	2330      	movs	r3, #48	; 0x30
 800629e:	f04f 0901 	mov.w	r9, #1
 80062a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80062a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800644c <_svfiprintf_r+0x1ec>
 80062aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062ae:	4623      	mov	r3, r4
 80062b0:	469a      	mov	sl, r3
 80062b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062b6:	b10a      	cbz	r2, 80062bc <_svfiprintf_r+0x5c>
 80062b8:	2a25      	cmp	r2, #37	; 0x25
 80062ba:	d1f9      	bne.n	80062b0 <_svfiprintf_r+0x50>
 80062bc:	ebba 0b04 	subs.w	fp, sl, r4
 80062c0:	d00b      	beq.n	80062da <_svfiprintf_r+0x7a>
 80062c2:	465b      	mov	r3, fp
 80062c4:	4622      	mov	r2, r4
 80062c6:	4629      	mov	r1, r5
 80062c8:	4638      	mov	r0, r7
 80062ca:	f7ff ff6d 	bl	80061a8 <__ssputs_r>
 80062ce:	3001      	adds	r0, #1
 80062d0:	f000 80aa 	beq.w	8006428 <_svfiprintf_r+0x1c8>
 80062d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d6:	445a      	add	r2, fp
 80062d8:	9209      	str	r2, [sp, #36]	; 0x24
 80062da:	f89a 3000 	ldrb.w	r3, [sl]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 80a2 	beq.w	8006428 <_svfiprintf_r+0x1c8>
 80062e4:	2300      	movs	r3, #0
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ee:	f10a 0a01 	add.w	sl, sl, #1
 80062f2:	9304      	str	r3, [sp, #16]
 80062f4:	9307      	str	r3, [sp, #28]
 80062f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062fa:	931a      	str	r3, [sp, #104]	; 0x68
 80062fc:	4654      	mov	r4, sl
 80062fe:	2205      	movs	r2, #5
 8006300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006304:	4851      	ldr	r0, [pc, #324]	; (800644c <_svfiprintf_r+0x1ec>)
 8006306:	f7ff fafd 	bl	8005904 <memchr>
 800630a:	9a04      	ldr	r2, [sp, #16]
 800630c:	b9d8      	cbnz	r0, 8006346 <_svfiprintf_r+0xe6>
 800630e:	06d0      	lsls	r0, r2, #27
 8006310:	bf44      	itt	mi
 8006312:	2320      	movmi	r3, #32
 8006314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006318:	0711      	lsls	r1, r2, #28
 800631a:	bf44      	itt	mi
 800631c:	232b      	movmi	r3, #43	; 0x2b
 800631e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006322:	f89a 3000 	ldrb.w	r3, [sl]
 8006326:	2b2a      	cmp	r3, #42	; 0x2a
 8006328:	d015      	beq.n	8006356 <_svfiprintf_r+0xf6>
 800632a:	4654      	mov	r4, sl
 800632c:	2000      	movs	r0, #0
 800632e:	f04f 0c0a 	mov.w	ip, #10
 8006332:	9a07      	ldr	r2, [sp, #28]
 8006334:	4621      	mov	r1, r4
 8006336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800633a:	3b30      	subs	r3, #48	; 0x30
 800633c:	2b09      	cmp	r3, #9
 800633e:	d94e      	bls.n	80063de <_svfiprintf_r+0x17e>
 8006340:	b1b0      	cbz	r0, 8006370 <_svfiprintf_r+0x110>
 8006342:	9207      	str	r2, [sp, #28]
 8006344:	e014      	b.n	8006370 <_svfiprintf_r+0x110>
 8006346:	eba0 0308 	sub.w	r3, r0, r8
 800634a:	fa09 f303 	lsl.w	r3, r9, r3
 800634e:	4313      	orrs	r3, r2
 8006350:	46a2      	mov	sl, r4
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	e7d2      	b.n	80062fc <_svfiprintf_r+0x9c>
 8006356:	9b03      	ldr	r3, [sp, #12]
 8006358:	1d19      	adds	r1, r3, #4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	9103      	str	r1, [sp, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	bfbb      	ittet	lt
 8006362:	425b      	neglt	r3, r3
 8006364:	f042 0202 	orrlt.w	r2, r2, #2
 8006368:	9307      	strge	r3, [sp, #28]
 800636a:	9307      	strlt	r3, [sp, #28]
 800636c:	bfb8      	it	lt
 800636e:	9204      	strlt	r2, [sp, #16]
 8006370:	7823      	ldrb	r3, [r4, #0]
 8006372:	2b2e      	cmp	r3, #46	; 0x2e
 8006374:	d10c      	bne.n	8006390 <_svfiprintf_r+0x130>
 8006376:	7863      	ldrb	r3, [r4, #1]
 8006378:	2b2a      	cmp	r3, #42	; 0x2a
 800637a:	d135      	bne.n	80063e8 <_svfiprintf_r+0x188>
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	3402      	adds	r4, #2
 8006380:	1d1a      	adds	r2, r3, #4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	9203      	str	r2, [sp, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	bfb8      	it	lt
 800638a:	f04f 33ff 	movlt.w	r3, #4294967295
 800638e:	9305      	str	r3, [sp, #20]
 8006390:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800645c <_svfiprintf_r+0x1fc>
 8006394:	2203      	movs	r2, #3
 8006396:	4650      	mov	r0, sl
 8006398:	7821      	ldrb	r1, [r4, #0]
 800639a:	f7ff fab3 	bl	8005904 <memchr>
 800639e:	b140      	cbz	r0, 80063b2 <_svfiprintf_r+0x152>
 80063a0:	2340      	movs	r3, #64	; 0x40
 80063a2:	eba0 000a 	sub.w	r0, r0, sl
 80063a6:	fa03 f000 	lsl.w	r0, r3, r0
 80063aa:	9b04      	ldr	r3, [sp, #16]
 80063ac:	3401      	adds	r4, #1
 80063ae:	4303      	orrs	r3, r0
 80063b0:	9304      	str	r3, [sp, #16]
 80063b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b6:	2206      	movs	r2, #6
 80063b8:	4825      	ldr	r0, [pc, #148]	; (8006450 <_svfiprintf_r+0x1f0>)
 80063ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063be:	f7ff faa1 	bl	8005904 <memchr>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d038      	beq.n	8006438 <_svfiprintf_r+0x1d8>
 80063c6:	4b23      	ldr	r3, [pc, #140]	; (8006454 <_svfiprintf_r+0x1f4>)
 80063c8:	bb1b      	cbnz	r3, 8006412 <_svfiprintf_r+0x1b2>
 80063ca:	9b03      	ldr	r3, [sp, #12]
 80063cc:	3307      	adds	r3, #7
 80063ce:	f023 0307 	bic.w	r3, r3, #7
 80063d2:	3308      	adds	r3, #8
 80063d4:	9303      	str	r3, [sp, #12]
 80063d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d8:	4433      	add	r3, r6
 80063da:	9309      	str	r3, [sp, #36]	; 0x24
 80063dc:	e767      	b.n	80062ae <_svfiprintf_r+0x4e>
 80063de:	460c      	mov	r4, r1
 80063e0:	2001      	movs	r0, #1
 80063e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80063e6:	e7a5      	b.n	8006334 <_svfiprintf_r+0xd4>
 80063e8:	2300      	movs	r3, #0
 80063ea:	f04f 0c0a 	mov.w	ip, #10
 80063ee:	4619      	mov	r1, r3
 80063f0:	3401      	adds	r4, #1
 80063f2:	9305      	str	r3, [sp, #20]
 80063f4:	4620      	mov	r0, r4
 80063f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063fa:	3a30      	subs	r2, #48	; 0x30
 80063fc:	2a09      	cmp	r2, #9
 80063fe:	d903      	bls.n	8006408 <_svfiprintf_r+0x1a8>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0c5      	beq.n	8006390 <_svfiprintf_r+0x130>
 8006404:	9105      	str	r1, [sp, #20]
 8006406:	e7c3      	b.n	8006390 <_svfiprintf_r+0x130>
 8006408:	4604      	mov	r4, r0
 800640a:	2301      	movs	r3, #1
 800640c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006410:	e7f0      	b.n	80063f4 <_svfiprintf_r+0x194>
 8006412:	ab03      	add	r3, sp, #12
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	462a      	mov	r2, r5
 8006418:	4638      	mov	r0, r7
 800641a:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <_svfiprintf_r+0x1f8>)
 800641c:	a904      	add	r1, sp, #16
 800641e:	f7fe f805 	bl	800442c <_printf_float>
 8006422:	1c42      	adds	r2, r0, #1
 8006424:	4606      	mov	r6, r0
 8006426:	d1d6      	bne.n	80063d6 <_svfiprintf_r+0x176>
 8006428:	89ab      	ldrh	r3, [r5, #12]
 800642a:	065b      	lsls	r3, r3, #25
 800642c:	f53f af2c 	bmi.w	8006288 <_svfiprintf_r+0x28>
 8006430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006432:	b01d      	add	sp, #116	; 0x74
 8006434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006438:	ab03      	add	r3, sp, #12
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	462a      	mov	r2, r5
 800643e:	4638      	mov	r0, r7
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <_svfiprintf_r+0x1f8>)
 8006442:	a904      	add	r1, sp, #16
 8006444:	f7fe fa8e 	bl	8004964 <_printf_i>
 8006448:	e7eb      	b.n	8006422 <_svfiprintf_r+0x1c2>
 800644a:	bf00      	nop
 800644c:	0800a314 	.word	0x0800a314
 8006450:	0800a31e 	.word	0x0800a31e
 8006454:	0800442d 	.word	0x0800442d
 8006458:	080061a9 	.word	0x080061a9
 800645c:	0800a31a 	.word	0x0800a31a

08006460 <_sbrk_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	2300      	movs	r3, #0
 8006464:	4d05      	ldr	r5, [pc, #20]	; (800647c <_sbrk_r+0x1c>)
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	f7fc f818 	bl	80024a0 <_sbrk>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d102      	bne.n	800647a <_sbrk_r+0x1a>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	b103      	cbz	r3, 800647a <_sbrk_r+0x1a>
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	200006dc 	.word	0x200006dc

08006480 <__assert_func>:
 8006480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006482:	4614      	mov	r4, r2
 8006484:	461a      	mov	r2, r3
 8006486:	4b09      	ldr	r3, [pc, #36]	; (80064ac <__assert_func+0x2c>)
 8006488:	4605      	mov	r5, r0
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68d8      	ldr	r0, [r3, #12]
 800648e:	b14c      	cbz	r4, 80064a4 <__assert_func+0x24>
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <__assert_func+0x30>)
 8006492:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006496:	9100      	str	r1, [sp, #0]
 8006498:	462b      	mov	r3, r5
 800649a:	4906      	ldr	r1, [pc, #24]	; (80064b4 <__assert_func+0x34>)
 800649c:	f000 f80e 	bl	80064bc <fiprintf>
 80064a0:	f000 faa2 	bl	80069e8 <abort>
 80064a4:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <__assert_func+0x38>)
 80064a6:	461c      	mov	r4, r3
 80064a8:	e7f3      	b.n	8006492 <__assert_func+0x12>
 80064aa:	bf00      	nop
 80064ac:	2000002c 	.word	0x2000002c
 80064b0:	0800a325 	.word	0x0800a325
 80064b4:	0800a332 	.word	0x0800a332
 80064b8:	0800a360 	.word	0x0800a360

080064bc <fiprintf>:
 80064bc:	b40e      	push	{r1, r2, r3}
 80064be:	b503      	push	{r0, r1, lr}
 80064c0:	4601      	mov	r1, r0
 80064c2:	ab03      	add	r3, sp, #12
 80064c4:	4805      	ldr	r0, [pc, #20]	; (80064dc <fiprintf+0x20>)
 80064c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ca:	6800      	ldr	r0, [r0, #0]
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	f000 f88d 	bl	80065ec <_vfiprintf_r>
 80064d2:	b002      	add	sp, #8
 80064d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064d8:	b003      	add	sp, #12
 80064da:	4770      	bx	lr
 80064dc:	2000002c 	.word	0x2000002c

080064e0 <__ascii_mbtowc>:
 80064e0:	b082      	sub	sp, #8
 80064e2:	b901      	cbnz	r1, 80064e6 <__ascii_mbtowc+0x6>
 80064e4:	a901      	add	r1, sp, #4
 80064e6:	b142      	cbz	r2, 80064fa <__ascii_mbtowc+0x1a>
 80064e8:	b14b      	cbz	r3, 80064fe <__ascii_mbtowc+0x1e>
 80064ea:	7813      	ldrb	r3, [r2, #0]
 80064ec:	600b      	str	r3, [r1, #0]
 80064ee:	7812      	ldrb	r2, [r2, #0]
 80064f0:	1e10      	subs	r0, r2, #0
 80064f2:	bf18      	it	ne
 80064f4:	2001      	movne	r0, #1
 80064f6:	b002      	add	sp, #8
 80064f8:	4770      	bx	lr
 80064fa:	4610      	mov	r0, r2
 80064fc:	e7fb      	b.n	80064f6 <__ascii_mbtowc+0x16>
 80064fe:	f06f 0001 	mvn.w	r0, #1
 8006502:	e7f8      	b.n	80064f6 <__ascii_mbtowc+0x16>

08006504 <memmove>:
 8006504:	4288      	cmp	r0, r1
 8006506:	b510      	push	{r4, lr}
 8006508:	eb01 0402 	add.w	r4, r1, r2
 800650c:	d902      	bls.n	8006514 <memmove+0x10>
 800650e:	4284      	cmp	r4, r0
 8006510:	4623      	mov	r3, r4
 8006512:	d807      	bhi.n	8006524 <memmove+0x20>
 8006514:	1e43      	subs	r3, r0, #1
 8006516:	42a1      	cmp	r1, r4
 8006518:	d008      	beq.n	800652c <memmove+0x28>
 800651a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800651e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006522:	e7f8      	b.n	8006516 <memmove+0x12>
 8006524:	4601      	mov	r1, r0
 8006526:	4402      	add	r2, r0
 8006528:	428a      	cmp	r2, r1
 800652a:	d100      	bne.n	800652e <memmove+0x2a>
 800652c:	bd10      	pop	{r4, pc}
 800652e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006536:	e7f7      	b.n	8006528 <memmove+0x24>

08006538 <__malloc_lock>:
 8006538:	4801      	ldr	r0, [pc, #4]	; (8006540 <__malloc_lock+0x8>)
 800653a:	f000 bc15 	b.w	8006d68 <__retarget_lock_acquire_recursive>
 800653e:	bf00      	nop
 8006540:	200006e4 	.word	0x200006e4

08006544 <__malloc_unlock>:
 8006544:	4801      	ldr	r0, [pc, #4]	; (800654c <__malloc_unlock+0x8>)
 8006546:	f000 bc10 	b.w	8006d6a <__retarget_lock_release_recursive>
 800654a:	bf00      	nop
 800654c:	200006e4 	.word	0x200006e4

08006550 <_realloc_r>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	4607      	mov	r7, r0
 8006554:	4614      	mov	r4, r2
 8006556:	460e      	mov	r6, r1
 8006558:	b921      	cbnz	r1, 8006564 <_realloc_r+0x14>
 800655a:	4611      	mov	r1, r2
 800655c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006560:	f7ff bdc8 	b.w	80060f4 <_malloc_r>
 8006564:	b922      	cbnz	r2, 8006570 <_realloc_r+0x20>
 8006566:	f7ff fd79 	bl	800605c <_free_r>
 800656a:	4625      	mov	r5, r4
 800656c:	4628      	mov	r0, r5
 800656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006570:	f000 fc60 	bl	8006e34 <_malloc_usable_size_r>
 8006574:	42a0      	cmp	r0, r4
 8006576:	d20f      	bcs.n	8006598 <_realloc_r+0x48>
 8006578:	4621      	mov	r1, r4
 800657a:	4638      	mov	r0, r7
 800657c:	f7ff fdba 	bl	80060f4 <_malloc_r>
 8006580:	4605      	mov	r5, r0
 8006582:	2800      	cmp	r0, #0
 8006584:	d0f2      	beq.n	800656c <_realloc_r+0x1c>
 8006586:	4631      	mov	r1, r6
 8006588:	4622      	mov	r2, r4
 800658a:	f7ff f9c9 	bl	8005920 <memcpy>
 800658e:	4631      	mov	r1, r6
 8006590:	4638      	mov	r0, r7
 8006592:	f7ff fd63 	bl	800605c <_free_r>
 8006596:	e7e9      	b.n	800656c <_realloc_r+0x1c>
 8006598:	4635      	mov	r5, r6
 800659a:	e7e7      	b.n	800656c <_realloc_r+0x1c>

0800659c <__sfputc_r>:
 800659c:	6893      	ldr	r3, [r2, #8]
 800659e:	b410      	push	{r4}
 80065a0:	3b01      	subs	r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	6093      	str	r3, [r2, #8]
 80065a6:	da07      	bge.n	80065b8 <__sfputc_r+0x1c>
 80065a8:	6994      	ldr	r4, [r2, #24]
 80065aa:	42a3      	cmp	r3, r4
 80065ac:	db01      	blt.n	80065b2 <__sfputc_r+0x16>
 80065ae:	290a      	cmp	r1, #10
 80065b0:	d102      	bne.n	80065b8 <__sfputc_r+0x1c>
 80065b2:	bc10      	pop	{r4}
 80065b4:	f000 b94a 	b.w	800684c <__swbuf_r>
 80065b8:	6813      	ldr	r3, [r2, #0]
 80065ba:	1c58      	adds	r0, r3, #1
 80065bc:	6010      	str	r0, [r2, #0]
 80065be:	7019      	strb	r1, [r3, #0]
 80065c0:	4608      	mov	r0, r1
 80065c2:	bc10      	pop	{r4}
 80065c4:	4770      	bx	lr

080065c6 <__sfputs_r>:
 80065c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c8:	4606      	mov	r6, r0
 80065ca:	460f      	mov	r7, r1
 80065cc:	4614      	mov	r4, r2
 80065ce:	18d5      	adds	r5, r2, r3
 80065d0:	42ac      	cmp	r4, r5
 80065d2:	d101      	bne.n	80065d8 <__sfputs_r+0x12>
 80065d4:	2000      	movs	r0, #0
 80065d6:	e007      	b.n	80065e8 <__sfputs_r+0x22>
 80065d8:	463a      	mov	r2, r7
 80065da:	4630      	mov	r0, r6
 80065dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e0:	f7ff ffdc 	bl	800659c <__sfputc_r>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d1f3      	bne.n	80065d0 <__sfputs_r+0xa>
 80065e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065ec <_vfiprintf_r>:
 80065ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f0:	460d      	mov	r5, r1
 80065f2:	4614      	mov	r4, r2
 80065f4:	4698      	mov	r8, r3
 80065f6:	4606      	mov	r6, r0
 80065f8:	b09d      	sub	sp, #116	; 0x74
 80065fa:	b118      	cbz	r0, 8006604 <_vfiprintf_r+0x18>
 80065fc:	6983      	ldr	r3, [r0, #24]
 80065fe:	b90b      	cbnz	r3, 8006604 <_vfiprintf_r+0x18>
 8006600:	f000 fb14 	bl	8006c2c <__sinit>
 8006604:	4b89      	ldr	r3, [pc, #548]	; (800682c <_vfiprintf_r+0x240>)
 8006606:	429d      	cmp	r5, r3
 8006608:	d11b      	bne.n	8006642 <_vfiprintf_r+0x56>
 800660a:	6875      	ldr	r5, [r6, #4]
 800660c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800660e:	07d9      	lsls	r1, r3, #31
 8006610:	d405      	bmi.n	800661e <_vfiprintf_r+0x32>
 8006612:	89ab      	ldrh	r3, [r5, #12]
 8006614:	059a      	lsls	r2, r3, #22
 8006616:	d402      	bmi.n	800661e <_vfiprintf_r+0x32>
 8006618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800661a:	f000 fba5 	bl	8006d68 <__retarget_lock_acquire_recursive>
 800661e:	89ab      	ldrh	r3, [r5, #12]
 8006620:	071b      	lsls	r3, r3, #28
 8006622:	d501      	bpl.n	8006628 <_vfiprintf_r+0x3c>
 8006624:	692b      	ldr	r3, [r5, #16]
 8006626:	b9eb      	cbnz	r3, 8006664 <_vfiprintf_r+0x78>
 8006628:	4629      	mov	r1, r5
 800662a:	4630      	mov	r0, r6
 800662c:	f000 f96e 	bl	800690c <__swsetup_r>
 8006630:	b1c0      	cbz	r0, 8006664 <_vfiprintf_r+0x78>
 8006632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006634:	07dc      	lsls	r4, r3, #31
 8006636:	d50e      	bpl.n	8006656 <_vfiprintf_r+0x6a>
 8006638:	f04f 30ff 	mov.w	r0, #4294967295
 800663c:	b01d      	add	sp, #116	; 0x74
 800663e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006642:	4b7b      	ldr	r3, [pc, #492]	; (8006830 <_vfiprintf_r+0x244>)
 8006644:	429d      	cmp	r5, r3
 8006646:	d101      	bne.n	800664c <_vfiprintf_r+0x60>
 8006648:	68b5      	ldr	r5, [r6, #8]
 800664a:	e7df      	b.n	800660c <_vfiprintf_r+0x20>
 800664c:	4b79      	ldr	r3, [pc, #484]	; (8006834 <_vfiprintf_r+0x248>)
 800664e:	429d      	cmp	r5, r3
 8006650:	bf08      	it	eq
 8006652:	68f5      	ldreq	r5, [r6, #12]
 8006654:	e7da      	b.n	800660c <_vfiprintf_r+0x20>
 8006656:	89ab      	ldrh	r3, [r5, #12]
 8006658:	0598      	lsls	r0, r3, #22
 800665a:	d4ed      	bmi.n	8006638 <_vfiprintf_r+0x4c>
 800665c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800665e:	f000 fb84 	bl	8006d6a <__retarget_lock_release_recursive>
 8006662:	e7e9      	b.n	8006638 <_vfiprintf_r+0x4c>
 8006664:	2300      	movs	r3, #0
 8006666:	9309      	str	r3, [sp, #36]	; 0x24
 8006668:	2320      	movs	r3, #32
 800666a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800666e:	2330      	movs	r3, #48	; 0x30
 8006670:	f04f 0901 	mov.w	r9, #1
 8006674:	f8cd 800c 	str.w	r8, [sp, #12]
 8006678:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006838 <_vfiprintf_r+0x24c>
 800667c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006680:	4623      	mov	r3, r4
 8006682:	469a      	mov	sl, r3
 8006684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006688:	b10a      	cbz	r2, 800668e <_vfiprintf_r+0xa2>
 800668a:	2a25      	cmp	r2, #37	; 0x25
 800668c:	d1f9      	bne.n	8006682 <_vfiprintf_r+0x96>
 800668e:	ebba 0b04 	subs.w	fp, sl, r4
 8006692:	d00b      	beq.n	80066ac <_vfiprintf_r+0xc0>
 8006694:	465b      	mov	r3, fp
 8006696:	4622      	mov	r2, r4
 8006698:	4629      	mov	r1, r5
 800669a:	4630      	mov	r0, r6
 800669c:	f7ff ff93 	bl	80065c6 <__sfputs_r>
 80066a0:	3001      	adds	r0, #1
 80066a2:	f000 80aa 	beq.w	80067fa <_vfiprintf_r+0x20e>
 80066a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066a8:	445a      	add	r2, fp
 80066aa:	9209      	str	r2, [sp, #36]	; 0x24
 80066ac:	f89a 3000 	ldrb.w	r3, [sl]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 80a2 	beq.w	80067fa <_vfiprintf_r+0x20e>
 80066b6:	2300      	movs	r3, #0
 80066b8:	f04f 32ff 	mov.w	r2, #4294967295
 80066bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066c0:	f10a 0a01 	add.w	sl, sl, #1
 80066c4:	9304      	str	r3, [sp, #16]
 80066c6:	9307      	str	r3, [sp, #28]
 80066c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066cc:	931a      	str	r3, [sp, #104]	; 0x68
 80066ce:	4654      	mov	r4, sl
 80066d0:	2205      	movs	r2, #5
 80066d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d6:	4858      	ldr	r0, [pc, #352]	; (8006838 <_vfiprintf_r+0x24c>)
 80066d8:	f7ff f914 	bl	8005904 <memchr>
 80066dc:	9a04      	ldr	r2, [sp, #16]
 80066de:	b9d8      	cbnz	r0, 8006718 <_vfiprintf_r+0x12c>
 80066e0:	06d1      	lsls	r1, r2, #27
 80066e2:	bf44      	itt	mi
 80066e4:	2320      	movmi	r3, #32
 80066e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066ea:	0713      	lsls	r3, r2, #28
 80066ec:	bf44      	itt	mi
 80066ee:	232b      	movmi	r3, #43	; 0x2b
 80066f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066f4:	f89a 3000 	ldrb.w	r3, [sl]
 80066f8:	2b2a      	cmp	r3, #42	; 0x2a
 80066fa:	d015      	beq.n	8006728 <_vfiprintf_r+0x13c>
 80066fc:	4654      	mov	r4, sl
 80066fe:	2000      	movs	r0, #0
 8006700:	f04f 0c0a 	mov.w	ip, #10
 8006704:	9a07      	ldr	r2, [sp, #28]
 8006706:	4621      	mov	r1, r4
 8006708:	f811 3b01 	ldrb.w	r3, [r1], #1
 800670c:	3b30      	subs	r3, #48	; 0x30
 800670e:	2b09      	cmp	r3, #9
 8006710:	d94e      	bls.n	80067b0 <_vfiprintf_r+0x1c4>
 8006712:	b1b0      	cbz	r0, 8006742 <_vfiprintf_r+0x156>
 8006714:	9207      	str	r2, [sp, #28]
 8006716:	e014      	b.n	8006742 <_vfiprintf_r+0x156>
 8006718:	eba0 0308 	sub.w	r3, r0, r8
 800671c:	fa09 f303 	lsl.w	r3, r9, r3
 8006720:	4313      	orrs	r3, r2
 8006722:	46a2      	mov	sl, r4
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	e7d2      	b.n	80066ce <_vfiprintf_r+0xe2>
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	1d19      	adds	r1, r3, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	9103      	str	r1, [sp, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	bfbb      	ittet	lt
 8006734:	425b      	neglt	r3, r3
 8006736:	f042 0202 	orrlt.w	r2, r2, #2
 800673a:	9307      	strge	r3, [sp, #28]
 800673c:	9307      	strlt	r3, [sp, #28]
 800673e:	bfb8      	it	lt
 8006740:	9204      	strlt	r2, [sp, #16]
 8006742:	7823      	ldrb	r3, [r4, #0]
 8006744:	2b2e      	cmp	r3, #46	; 0x2e
 8006746:	d10c      	bne.n	8006762 <_vfiprintf_r+0x176>
 8006748:	7863      	ldrb	r3, [r4, #1]
 800674a:	2b2a      	cmp	r3, #42	; 0x2a
 800674c:	d135      	bne.n	80067ba <_vfiprintf_r+0x1ce>
 800674e:	9b03      	ldr	r3, [sp, #12]
 8006750:	3402      	adds	r4, #2
 8006752:	1d1a      	adds	r2, r3, #4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	9203      	str	r2, [sp, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	bfb8      	it	lt
 800675c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006760:	9305      	str	r3, [sp, #20]
 8006762:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006848 <_vfiprintf_r+0x25c>
 8006766:	2203      	movs	r2, #3
 8006768:	4650      	mov	r0, sl
 800676a:	7821      	ldrb	r1, [r4, #0]
 800676c:	f7ff f8ca 	bl	8005904 <memchr>
 8006770:	b140      	cbz	r0, 8006784 <_vfiprintf_r+0x198>
 8006772:	2340      	movs	r3, #64	; 0x40
 8006774:	eba0 000a 	sub.w	r0, r0, sl
 8006778:	fa03 f000 	lsl.w	r0, r3, r0
 800677c:	9b04      	ldr	r3, [sp, #16]
 800677e:	3401      	adds	r4, #1
 8006780:	4303      	orrs	r3, r0
 8006782:	9304      	str	r3, [sp, #16]
 8006784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006788:	2206      	movs	r2, #6
 800678a:	482c      	ldr	r0, [pc, #176]	; (800683c <_vfiprintf_r+0x250>)
 800678c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006790:	f7ff f8b8 	bl	8005904 <memchr>
 8006794:	2800      	cmp	r0, #0
 8006796:	d03f      	beq.n	8006818 <_vfiprintf_r+0x22c>
 8006798:	4b29      	ldr	r3, [pc, #164]	; (8006840 <_vfiprintf_r+0x254>)
 800679a:	bb1b      	cbnz	r3, 80067e4 <_vfiprintf_r+0x1f8>
 800679c:	9b03      	ldr	r3, [sp, #12]
 800679e:	3307      	adds	r3, #7
 80067a0:	f023 0307 	bic.w	r3, r3, #7
 80067a4:	3308      	adds	r3, #8
 80067a6:	9303      	str	r3, [sp, #12]
 80067a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067aa:	443b      	add	r3, r7
 80067ac:	9309      	str	r3, [sp, #36]	; 0x24
 80067ae:	e767      	b.n	8006680 <_vfiprintf_r+0x94>
 80067b0:	460c      	mov	r4, r1
 80067b2:	2001      	movs	r0, #1
 80067b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80067b8:	e7a5      	b.n	8006706 <_vfiprintf_r+0x11a>
 80067ba:	2300      	movs	r3, #0
 80067bc:	f04f 0c0a 	mov.w	ip, #10
 80067c0:	4619      	mov	r1, r3
 80067c2:	3401      	adds	r4, #1
 80067c4:	9305      	str	r3, [sp, #20]
 80067c6:	4620      	mov	r0, r4
 80067c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067cc:	3a30      	subs	r2, #48	; 0x30
 80067ce:	2a09      	cmp	r2, #9
 80067d0:	d903      	bls.n	80067da <_vfiprintf_r+0x1ee>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0c5      	beq.n	8006762 <_vfiprintf_r+0x176>
 80067d6:	9105      	str	r1, [sp, #20]
 80067d8:	e7c3      	b.n	8006762 <_vfiprintf_r+0x176>
 80067da:	4604      	mov	r4, r0
 80067dc:	2301      	movs	r3, #1
 80067de:	fb0c 2101 	mla	r1, ip, r1, r2
 80067e2:	e7f0      	b.n	80067c6 <_vfiprintf_r+0x1da>
 80067e4:	ab03      	add	r3, sp, #12
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	462a      	mov	r2, r5
 80067ea:	4630      	mov	r0, r6
 80067ec:	4b15      	ldr	r3, [pc, #84]	; (8006844 <_vfiprintf_r+0x258>)
 80067ee:	a904      	add	r1, sp, #16
 80067f0:	f7fd fe1c 	bl	800442c <_printf_float>
 80067f4:	4607      	mov	r7, r0
 80067f6:	1c78      	adds	r0, r7, #1
 80067f8:	d1d6      	bne.n	80067a8 <_vfiprintf_r+0x1bc>
 80067fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067fc:	07d9      	lsls	r1, r3, #31
 80067fe:	d405      	bmi.n	800680c <_vfiprintf_r+0x220>
 8006800:	89ab      	ldrh	r3, [r5, #12]
 8006802:	059a      	lsls	r2, r3, #22
 8006804:	d402      	bmi.n	800680c <_vfiprintf_r+0x220>
 8006806:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006808:	f000 faaf 	bl	8006d6a <__retarget_lock_release_recursive>
 800680c:	89ab      	ldrh	r3, [r5, #12]
 800680e:	065b      	lsls	r3, r3, #25
 8006810:	f53f af12 	bmi.w	8006638 <_vfiprintf_r+0x4c>
 8006814:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006816:	e711      	b.n	800663c <_vfiprintf_r+0x50>
 8006818:	ab03      	add	r3, sp, #12
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	462a      	mov	r2, r5
 800681e:	4630      	mov	r0, r6
 8006820:	4b08      	ldr	r3, [pc, #32]	; (8006844 <_vfiprintf_r+0x258>)
 8006822:	a904      	add	r1, sp, #16
 8006824:	f7fe f89e 	bl	8004964 <_printf_i>
 8006828:	e7e4      	b.n	80067f4 <_vfiprintf_r+0x208>
 800682a:	bf00      	nop
 800682c:	0800a48c 	.word	0x0800a48c
 8006830:	0800a4ac 	.word	0x0800a4ac
 8006834:	0800a46c 	.word	0x0800a46c
 8006838:	0800a314 	.word	0x0800a314
 800683c:	0800a31e 	.word	0x0800a31e
 8006840:	0800442d 	.word	0x0800442d
 8006844:	080065c7 	.word	0x080065c7
 8006848:	0800a31a 	.word	0x0800a31a

0800684c <__swbuf_r>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	460e      	mov	r6, r1
 8006850:	4614      	mov	r4, r2
 8006852:	4605      	mov	r5, r0
 8006854:	b118      	cbz	r0, 800685e <__swbuf_r+0x12>
 8006856:	6983      	ldr	r3, [r0, #24]
 8006858:	b90b      	cbnz	r3, 800685e <__swbuf_r+0x12>
 800685a:	f000 f9e7 	bl	8006c2c <__sinit>
 800685e:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <__swbuf_r+0x98>)
 8006860:	429c      	cmp	r4, r3
 8006862:	d12b      	bne.n	80068bc <__swbuf_r+0x70>
 8006864:	686c      	ldr	r4, [r5, #4]
 8006866:	69a3      	ldr	r3, [r4, #24]
 8006868:	60a3      	str	r3, [r4, #8]
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	071a      	lsls	r2, r3, #28
 800686e:	d52f      	bpl.n	80068d0 <__swbuf_r+0x84>
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	b36b      	cbz	r3, 80068d0 <__swbuf_r+0x84>
 8006874:	6923      	ldr	r3, [r4, #16]
 8006876:	6820      	ldr	r0, [r4, #0]
 8006878:	b2f6      	uxtb	r6, r6
 800687a:	1ac0      	subs	r0, r0, r3
 800687c:	6963      	ldr	r3, [r4, #20]
 800687e:	4637      	mov	r7, r6
 8006880:	4283      	cmp	r3, r0
 8006882:	dc04      	bgt.n	800688e <__swbuf_r+0x42>
 8006884:	4621      	mov	r1, r4
 8006886:	4628      	mov	r0, r5
 8006888:	f000 f93c 	bl	8006b04 <_fflush_r>
 800688c:	bb30      	cbnz	r0, 80068dc <__swbuf_r+0x90>
 800688e:	68a3      	ldr	r3, [r4, #8]
 8006890:	3001      	adds	r0, #1
 8006892:	3b01      	subs	r3, #1
 8006894:	60a3      	str	r3, [r4, #8]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	6022      	str	r2, [r4, #0]
 800689c:	701e      	strb	r6, [r3, #0]
 800689e:	6963      	ldr	r3, [r4, #20]
 80068a0:	4283      	cmp	r3, r0
 80068a2:	d004      	beq.n	80068ae <__swbuf_r+0x62>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	07db      	lsls	r3, r3, #31
 80068a8:	d506      	bpl.n	80068b8 <__swbuf_r+0x6c>
 80068aa:	2e0a      	cmp	r6, #10
 80068ac:	d104      	bne.n	80068b8 <__swbuf_r+0x6c>
 80068ae:	4621      	mov	r1, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 f927 	bl	8006b04 <_fflush_r>
 80068b6:	b988      	cbnz	r0, 80068dc <__swbuf_r+0x90>
 80068b8:	4638      	mov	r0, r7
 80068ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <__swbuf_r+0x9c>)
 80068be:	429c      	cmp	r4, r3
 80068c0:	d101      	bne.n	80068c6 <__swbuf_r+0x7a>
 80068c2:	68ac      	ldr	r4, [r5, #8]
 80068c4:	e7cf      	b.n	8006866 <__swbuf_r+0x1a>
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <__swbuf_r+0xa0>)
 80068c8:	429c      	cmp	r4, r3
 80068ca:	bf08      	it	eq
 80068cc:	68ec      	ldreq	r4, [r5, #12]
 80068ce:	e7ca      	b.n	8006866 <__swbuf_r+0x1a>
 80068d0:	4621      	mov	r1, r4
 80068d2:	4628      	mov	r0, r5
 80068d4:	f000 f81a 	bl	800690c <__swsetup_r>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d0cb      	beq.n	8006874 <__swbuf_r+0x28>
 80068dc:	f04f 37ff 	mov.w	r7, #4294967295
 80068e0:	e7ea      	b.n	80068b8 <__swbuf_r+0x6c>
 80068e2:	bf00      	nop
 80068e4:	0800a48c 	.word	0x0800a48c
 80068e8:	0800a4ac 	.word	0x0800a4ac
 80068ec:	0800a46c 	.word	0x0800a46c

080068f0 <__ascii_wctomb>:
 80068f0:	4603      	mov	r3, r0
 80068f2:	4608      	mov	r0, r1
 80068f4:	b141      	cbz	r1, 8006908 <__ascii_wctomb+0x18>
 80068f6:	2aff      	cmp	r2, #255	; 0xff
 80068f8:	d904      	bls.n	8006904 <__ascii_wctomb+0x14>
 80068fa:	228a      	movs	r2, #138	; 0x8a
 80068fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	4770      	bx	lr
 8006904:	2001      	movs	r0, #1
 8006906:	700a      	strb	r2, [r1, #0]
 8006908:	4770      	bx	lr
	...

0800690c <__swsetup_r>:
 800690c:	4b32      	ldr	r3, [pc, #200]	; (80069d8 <__swsetup_r+0xcc>)
 800690e:	b570      	push	{r4, r5, r6, lr}
 8006910:	681d      	ldr	r5, [r3, #0]
 8006912:	4606      	mov	r6, r0
 8006914:	460c      	mov	r4, r1
 8006916:	b125      	cbz	r5, 8006922 <__swsetup_r+0x16>
 8006918:	69ab      	ldr	r3, [r5, #24]
 800691a:	b913      	cbnz	r3, 8006922 <__swsetup_r+0x16>
 800691c:	4628      	mov	r0, r5
 800691e:	f000 f985 	bl	8006c2c <__sinit>
 8006922:	4b2e      	ldr	r3, [pc, #184]	; (80069dc <__swsetup_r+0xd0>)
 8006924:	429c      	cmp	r4, r3
 8006926:	d10f      	bne.n	8006948 <__swsetup_r+0x3c>
 8006928:	686c      	ldr	r4, [r5, #4]
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006930:	0719      	lsls	r1, r3, #28
 8006932:	d42c      	bmi.n	800698e <__swsetup_r+0x82>
 8006934:	06dd      	lsls	r5, r3, #27
 8006936:	d411      	bmi.n	800695c <__swsetup_r+0x50>
 8006938:	2309      	movs	r3, #9
 800693a:	6033      	str	r3, [r6, #0]
 800693c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	81a3      	strh	r3, [r4, #12]
 8006946:	e03e      	b.n	80069c6 <__swsetup_r+0xba>
 8006948:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <__swsetup_r+0xd4>)
 800694a:	429c      	cmp	r4, r3
 800694c:	d101      	bne.n	8006952 <__swsetup_r+0x46>
 800694e:	68ac      	ldr	r4, [r5, #8]
 8006950:	e7eb      	b.n	800692a <__swsetup_r+0x1e>
 8006952:	4b24      	ldr	r3, [pc, #144]	; (80069e4 <__swsetup_r+0xd8>)
 8006954:	429c      	cmp	r4, r3
 8006956:	bf08      	it	eq
 8006958:	68ec      	ldreq	r4, [r5, #12]
 800695a:	e7e6      	b.n	800692a <__swsetup_r+0x1e>
 800695c:	0758      	lsls	r0, r3, #29
 800695e:	d512      	bpl.n	8006986 <__swsetup_r+0x7a>
 8006960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006962:	b141      	cbz	r1, 8006976 <__swsetup_r+0x6a>
 8006964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006968:	4299      	cmp	r1, r3
 800696a:	d002      	beq.n	8006972 <__swsetup_r+0x66>
 800696c:	4630      	mov	r0, r6
 800696e:	f7ff fb75 	bl	800605c <_free_r>
 8006972:	2300      	movs	r3, #0
 8006974:	6363      	str	r3, [r4, #52]	; 0x34
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	2300      	movs	r3, #0
 8006980:	6063      	str	r3, [r4, #4]
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	f043 0308 	orr.w	r3, r3, #8
 800698c:	81a3      	strh	r3, [r4, #12]
 800698e:	6923      	ldr	r3, [r4, #16]
 8006990:	b94b      	cbnz	r3, 80069a6 <__swsetup_r+0x9a>
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800699c:	d003      	beq.n	80069a6 <__swsetup_r+0x9a>
 800699e:	4621      	mov	r1, r4
 80069a0:	4630      	mov	r0, r6
 80069a2:	f000 fa07 	bl	8006db4 <__smakebuf_r>
 80069a6:	89a0      	ldrh	r0, [r4, #12]
 80069a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069ac:	f010 0301 	ands.w	r3, r0, #1
 80069b0:	d00a      	beq.n	80069c8 <__swsetup_r+0xbc>
 80069b2:	2300      	movs	r3, #0
 80069b4:	60a3      	str	r3, [r4, #8]
 80069b6:	6963      	ldr	r3, [r4, #20]
 80069b8:	425b      	negs	r3, r3
 80069ba:	61a3      	str	r3, [r4, #24]
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	b943      	cbnz	r3, 80069d2 <__swsetup_r+0xc6>
 80069c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069c4:	d1ba      	bne.n	800693c <__swsetup_r+0x30>
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	0781      	lsls	r1, r0, #30
 80069ca:	bf58      	it	pl
 80069cc:	6963      	ldrpl	r3, [r4, #20]
 80069ce:	60a3      	str	r3, [r4, #8]
 80069d0:	e7f4      	b.n	80069bc <__swsetup_r+0xb0>
 80069d2:	2000      	movs	r0, #0
 80069d4:	e7f7      	b.n	80069c6 <__swsetup_r+0xba>
 80069d6:	bf00      	nop
 80069d8:	2000002c 	.word	0x2000002c
 80069dc:	0800a48c 	.word	0x0800a48c
 80069e0:	0800a4ac 	.word	0x0800a4ac
 80069e4:	0800a46c 	.word	0x0800a46c

080069e8 <abort>:
 80069e8:	2006      	movs	r0, #6
 80069ea:	b508      	push	{r3, lr}
 80069ec:	f000 fa52 	bl	8006e94 <raise>
 80069f0:	2001      	movs	r0, #1
 80069f2:	f7fb fce1 	bl	80023b8 <_exit>
	...

080069f8 <__sflush_r>:
 80069f8:	898a      	ldrh	r2, [r1, #12]
 80069fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069fe:	4605      	mov	r5, r0
 8006a00:	0710      	lsls	r0, r2, #28
 8006a02:	460c      	mov	r4, r1
 8006a04:	d458      	bmi.n	8006ab8 <__sflush_r+0xc0>
 8006a06:	684b      	ldr	r3, [r1, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dc05      	bgt.n	8006a18 <__sflush_r+0x20>
 8006a0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	dc02      	bgt.n	8006a18 <__sflush_r+0x20>
 8006a12:	2000      	movs	r0, #0
 8006a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a1a:	2e00      	cmp	r6, #0
 8006a1c:	d0f9      	beq.n	8006a12 <__sflush_r+0x1a>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a24:	682f      	ldr	r7, [r5, #0]
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	d032      	beq.n	8006a90 <__sflush_r+0x98>
 8006a2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	075a      	lsls	r2, r3, #29
 8006a30:	d505      	bpl.n	8006a3e <__sflush_r+0x46>
 8006a32:	6863      	ldr	r3, [r4, #4]
 8006a34:	1ac0      	subs	r0, r0, r3
 8006a36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a38:	b10b      	cbz	r3, 8006a3e <__sflush_r+0x46>
 8006a3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a3c:	1ac0      	subs	r0, r0, r3
 8006a3e:	2300      	movs	r3, #0
 8006a40:	4602      	mov	r2, r0
 8006a42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a44:	4628      	mov	r0, r5
 8006a46:	6a21      	ldr	r1, [r4, #32]
 8006a48:	47b0      	blx	r6
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	89a3      	ldrh	r3, [r4, #12]
 8006a4e:	d106      	bne.n	8006a5e <__sflush_r+0x66>
 8006a50:	6829      	ldr	r1, [r5, #0]
 8006a52:	291d      	cmp	r1, #29
 8006a54:	d82c      	bhi.n	8006ab0 <__sflush_r+0xb8>
 8006a56:	4a2a      	ldr	r2, [pc, #168]	; (8006b00 <__sflush_r+0x108>)
 8006a58:	40ca      	lsrs	r2, r1
 8006a5a:	07d6      	lsls	r6, r2, #31
 8006a5c:	d528      	bpl.n	8006ab0 <__sflush_r+0xb8>
 8006a5e:	2200      	movs	r2, #0
 8006a60:	6062      	str	r2, [r4, #4]
 8006a62:	6922      	ldr	r2, [r4, #16]
 8006a64:	04d9      	lsls	r1, r3, #19
 8006a66:	6022      	str	r2, [r4, #0]
 8006a68:	d504      	bpl.n	8006a74 <__sflush_r+0x7c>
 8006a6a:	1c42      	adds	r2, r0, #1
 8006a6c:	d101      	bne.n	8006a72 <__sflush_r+0x7a>
 8006a6e:	682b      	ldr	r3, [r5, #0]
 8006a70:	b903      	cbnz	r3, 8006a74 <__sflush_r+0x7c>
 8006a72:	6560      	str	r0, [r4, #84]	; 0x54
 8006a74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a76:	602f      	str	r7, [r5, #0]
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	d0ca      	beq.n	8006a12 <__sflush_r+0x1a>
 8006a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a80:	4299      	cmp	r1, r3
 8006a82:	d002      	beq.n	8006a8a <__sflush_r+0x92>
 8006a84:	4628      	mov	r0, r5
 8006a86:	f7ff fae9 	bl	800605c <_free_r>
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a8e:	e7c1      	b.n	8006a14 <__sflush_r+0x1c>
 8006a90:	6a21      	ldr	r1, [r4, #32]
 8006a92:	2301      	movs	r3, #1
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b0      	blx	r6
 8006a98:	1c41      	adds	r1, r0, #1
 8006a9a:	d1c7      	bne.n	8006a2c <__sflush_r+0x34>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0c4      	beq.n	8006a2c <__sflush_r+0x34>
 8006aa2:	2b1d      	cmp	r3, #29
 8006aa4:	d001      	beq.n	8006aaa <__sflush_r+0xb2>
 8006aa6:	2b16      	cmp	r3, #22
 8006aa8:	d101      	bne.n	8006aae <__sflush_r+0xb6>
 8006aaa:	602f      	str	r7, [r5, #0]
 8006aac:	e7b1      	b.n	8006a12 <__sflush_r+0x1a>
 8006aae:	89a3      	ldrh	r3, [r4, #12]
 8006ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	e7ad      	b.n	8006a14 <__sflush_r+0x1c>
 8006ab8:	690f      	ldr	r7, [r1, #16]
 8006aba:	2f00      	cmp	r7, #0
 8006abc:	d0a9      	beq.n	8006a12 <__sflush_r+0x1a>
 8006abe:	0793      	lsls	r3, r2, #30
 8006ac0:	bf18      	it	ne
 8006ac2:	2300      	movne	r3, #0
 8006ac4:	680e      	ldr	r6, [r1, #0]
 8006ac6:	bf08      	it	eq
 8006ac8:	694b      	ldreq	r3, [r1, #20]
 8006aca:	eba6 0807 	sub.w	r8, r6, r7
 8006ace:	600f      	str	r7, [r1, #0]
 8006ad0:	608b      	str	r3, [r1, #8]
 8006ad2:	f1b8 0f00 	cmp.w	r8, #0
 8006ad6:	dd9c      	ble.n	8006a12 <__sflush_r+0x1a>
 8006ad8:	4643      	mov	r3, r8
 8006ada:	463a      	mov	r2, r7
 8006adc:	4628      	mov	r0, r5
 8006ade:	6a21      	ldr	r1, [r4, #32]
 8006ae0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ae2:	47b0      	blx	r6
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	dc06      	bgt.n	8006af6 <__sflush_r+0xfe>
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	f04f 30ff 	mov.w	r0, #4294967295
 8006aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	e78e      	b.n	8006a14 <__sflush_r+0x1c>
 8006af6:	4407      	add	r7, r0
 8006af8:	eba8 0800 	sub.w	r8, r8, r0
 8006afc:	e7e9      	b.n	8006ad2 <__sflush_r+0xda>
 8006afe:	bf00      	nop
 8006b00:	20400001 	.word	0x20400001

08006b04 <_fflush_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	690b      	ldr	r3, [r1, #16]
 8006b08:	4605      	mov	r5, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	b913      	cbnz	r3, 8006b14 <_fflush_r+0x10>
 8006b0e:	2500      	movs	r5, #0
 8006b10:	4628      	mov	r0, r5
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	b118      	cbz	r0, 8006b1e <_fflush_r+0x1a>
 8006b16:	6983      	ldr	r3, [r0, #24]
 8006b18:	b90b      	cbnz	r3, 8006b1e <_fflush_r+0x1a>
 8006b1a:	f000 f887 	bl	8006c2c <__sinit>
 8006b1e:	4b14      	ldr	r3, [pc, #80]	; (8006b70 <_fflush_r+0x6c>)
 8006b20:	429c      	cmp	r4, r3
 8006b22:	d11b      	bne.n	8006b5c <_fflush_r+0x58>
 8006b24:	686c      	ldr	r4, [r5, #4]
 8006b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0ef      	beq.n	8006b0e <_fflush_r+0xa>
 8006b2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b30:	07d0      	lsls	r0, r2, #31
 8006b32:	d404      	bmi.n	8006b3e <_fflush_r+0x3a>
 8006b34:	0599      	lsls	r1, r3, #22
 8006b36:	d402      	bmi.n	8006b3e <_fflush_r+0x3a>
 8006b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b3a:	f000 f915 	bl	8006d68 <__retarget_lock_acquire_recursive>
 8006b3e:	4628      	mov	r0, r5
 8006b40:	4621      	mov	r1, r4
 8006b42:	f7ff ff59 	bl	80069f8 <__sflush_r>
 8006b46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b48:	4605      	mov	r5, r0
 8006b4a:	07da      	lsls	r2, r3, #31
 8006b4c:	d4e0      	bmi.n	8006b10 <_fflush_r+0xc>
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	059b      	lsls	r3, r3, #22
 8006b52:	d4dd      	bmi.n	8006b10 <_fflush_r+0xc>
 8006b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b56:	f000 f908 	bl	8006d6a <__retarget_lock_release_recursive>
 8006b5a:	e7d9      	b.n	8006b10 <_fflush_r+0xc>
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <_fflush_r+0x70>)
 8006b5e:	429c      	cmp	r4, r3
 8006b60:	d101      	bne.n	8006b66 <_fflush_r+0x62>
 8006b62:	68ac      	ldr	r4, [r5, #8]
 8006b64:	e7df      	b.n	8006b26 <_fflush_r+0x22>
 8006b66:	4b04      	ldr	r3, [pc, #16]	; (8006b78 <_fflush_r+0x74>)
 8006b68:	429c      	cmp	r4, r3
 8006b6a:	bf08      	it	eq
 8006b6c:	68ec      	ldreq	r4, [r5, #12]
 8006b6e:	e7da      	b.n	8006b26 <_fflush_r+0x22>
 8006b70:	0800a48c 	.word	0x0800a48c
 8006b74:	0800a4ac 	.word	0x0800a4ac
 8006b78:	0800a46c 	.word	0x0800a46c

08006b7c <std>:
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	b510      	push	{r4, lr}
 8006b80:	4604      	mov	r4, r0
 8006b82:	e9c0 3300 	strd	r3, r3, [r0]
 8006b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b8a:	6083      	str	r3, [r0, #8]
 8006b8c:	8181      	strh	r1, [r0, #12]
 8006b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b90:	81c2      	strh	r2, [r0, #14]
 8006b92:	6183      	str	r3, [r0, #24]
 8006b94:	4619      	mov	r1, r3
 8006b96:	2208      	movs	r2, #8
 8006b98:	305c      	adds	r0, #92	; 0x5c
 8006b9a:	f7fd fba1 	bl	80042e0 <memset>
 8006b9e:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <std+0x38>)
 8006ba0:	6224      	str	r4, [r4, #32]
 8006ba2:	6263      	str	r3, [r4, #36]	; 0x24
 8006ba4:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <std+0x3c>)
 8006ba6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ba8:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <std+0x40>)
 8006baa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bac:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <std+0x44>)
 8006bae:	6323      	str	r3, [r4, #48]	; 0x30
 8006bb0:	bd10      	pop	{r4, pc}
 8006bb2:	bf00      	nop
 8006bb4:	08006ecd 	.word	0x08006ecd
 8006bb8:	08006eef 	.word	0x08006eef
 8006bbc:	08006f27 	.word	0x08006f27
 8006bc0:	08006f4b 	.word	0x08006f4b

08006bc4 <_cleanup_r>:
 8006bc4:	4901      	ldr	r1, [pc, #4]	; (8006bcc <_cleanup_r+0x8>)
 8006bc6:	f000 b8af 	b.w	8006d28 <_fwalk_reent>
 8006bca:	bf00      	nop
 8006bcc:	08006b05 	.word	0x08006b05

08006bd0 <__sfmoreglue>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	2568      	movs	r5, #104	; 0x68
 8006bd4:	1e4a      	subs	r2, r1, #1
 8006bd6:	4355      	muls	r5, r2
 8006bd8:	460e      	mov	r6, r1
 8006bda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bde:	f7ff fa89 	bl	80060f4 <_malloc_r>
 8006be2:	4604      	mov	r4, r0
 8006be4:	b140      	cbz	r0, 8006bf8 <__sfmoreglue+0x28>
 8006be6:	2100      	movs	r1, #0
 8006be8:	e9c0 1600 	strd	r1, r6, [r0]
 8006bec:	300c      	adds	r0, #12
 8006bee:	60a0      	str	r0, [r4, #8]
 8006bf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bf4:	f7fd fb74 	bl	80042e0 <memset>
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	bd70      	pop	{r4, r5, r6, pc}

08006bfc <__sfp_lock_acquire>:
 8006bfc:	4801      	ldr	r0, [pc, #4]	; (8006c04 <__sfp_lock_acquire+0x8>)
 8006bfe:	f000 b8b3 	b.w	8006d68 <__retarget_lock_acquire_recursive>
 8006c02:	bf00      	nop
 8006c04:	200006e8 	.word	0x200006e8

08006c08 <__sfp_lock_release>:
 8006c08:	4801      	ldr	r0, [pc, #4]	; (8006c10 <__sfp_lock_release+0x8>)
 8006c0a:	f000 b8ae 	b.w	8006d6a <__retarget_lock_release_recursive>
 8006c0e:	bf00      	nop
 8006c10:	200006e8 	.word	0x200006e8

08006c14 <__sinit_lock_acquire>:
 8006c14:	4801      	ldr	r0, [pc, #4]	; (8006c1c <__sinit_lock_acquire+0x8>)
 8006c16:	f000 b8a7 	b.w	8006d68 <__retarget_lock_acquire_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	200006e3 	.word	0x200006e3

08006c20 <__sinit_lock_release>:
 8006c20:	4801      	ldr	r0, [pc, #4]	; (8006c28 <__sinit_lock_release+0x8>)
 8006c22:	f000 b8a2 	b.w	8006d6a <__retarget_lock_release_recursive>
 8006c26:	bf00      	nop
 8006c28:	200006e3 	.word	0x200006e3

08006c2c <__sinit>:
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	4604      	mov	r4, r0
 8006c30:	f7ff fff0 	bl	8006c14 <__sinit_lock_acquire>
 8006c34:	69a3      	ldr	r3, [r4, #24]
 8006c36:	b11b      	cbz	r3, 8006c40 <__sinit+0x14>
 8006c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c3c:	f7ff bff0 	b.w	8006c20 <__sinit_lock_release>
 8006c40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c44:	6523      	str	r3, [r4, #80]	; 0x50
 8006c46:	4b13      	ldr	r3, [pc, #76]	; (8006c94 <__sinit+0x68>)
 8006c48:	4a13      	ldr	r2, [pc, #76]	; (8006c98 <__sinit+0x6c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c4e:	42a3      	cmp	r3, r4
 8006c50:	bf08      	it	eq
 8006c52:	2301      	moveq	r3, #1
 8006c54:	4620      	mov	r0, r4
 8006c56:	bf08      	it	eq
 8006c58:	61a3      	streq	r3, [r4, #24]
 8006c5a:	f000 f81f 	bl	8006c9c <__sfp>
 8006c5e:	6060      	str	r0, [r4, #4]
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 f81b 	bl	8006c9c <__sfp>
 8006c66:	60a0      	str	r0, [r4, #8]
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 f817 	bl	8006c9c <__sfp>
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2104      	movs	r1, #4
 8006c72:	60e0      	str	r0, [r4, #12]
 8006c74:	6860      	ldr	r0, [r4, #4]
 8006c76:	f7ff ff81 	bl	8006b7c <std>
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	2109      	movs	r1, #9
 8006c7e:	68a0      	ldr	r0, [r4, #8]
 8006c80:	f7ff ff7c 	bl	8006b7c <std>
 8006c84:	2202      	movs	r2, #2
 8006c86:	2112      	movs	r1, #18
 8006c88:	68e0      	ldr	r0, [r4, #12]
 8006c8a:	f7ff ff77 	bl	8006b7c <std>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	61a3      	str	r3, [r4, #24]
 8006c92:	e7d1      	b.n	8006c38 <__sinit+0xc>
 8006c94:	0800a0ec 	.word	0x0800a0ec
 8006c98:	08006bc5 	.word	0x08006bc5

08006c9c <__sfp>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	f7ff ffac 	bl	8006bfc <__sfp_lock_acquire>
 8006ca4:	4b1e      	ldr	r3, [pc, #120]	; (8006d20 <__sfp+0x84>)
 8006ca6:	681e      	ldr	r6, [r3, #0]
 8006ca8:	69b3      	ldr	r3, [r6, #24]
 8006caa:	b913      	cbnz	r3, 8006cb2 <__sfp+0x16>
 8006cac:	4630      	mov	r0, r6
 8006cae:	f7ff ffbd 	bl	8006c2c <__sinit>
 8006cb2:	3648      	adds	r6, #72	; 0x48
 8006cb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	d503      	bpl.n	8006cc4 <__sfp+0x28>
 8006cbc:	6833      	ldr	r3, [r6, #0]
 8006cbe:	b30b      	cbz	r3, 8006d04 <__sfp+0x68>
 8006cc0:	6836      	ldr	r6, [r6, #0]
 8006cc2:	e7f7      	b.n	8006cb4 <__sfp+0x18>
 8006cc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cc8:	b9d5      	cbnz	r5, 8006d00 <__sfp+0x64>
 8006cca:	4b16      	ldr	r3, [pc, #88]	; (8006d24 <__sfp+0x88>)
 8006ccc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cd0:	60e3      	str	r3, [r4, #12]
 8006cd2:	6665      	str	r5, [r4, #100]	; 0x64
 8006cd4:	f000 f847 	bl	8006d66 <__retarget_lock_init_recursive>
 8006cd8:	f7ff ff96 	bl	8006c08 <__sfp_lock_release>
 8006cdc:	2208      	movs	r2, #8
 8006cde:	4629      	mov	r1, r5
 8006ce0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ce4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ce8:	6025      	str	r5, [r4, #0]
 8006cea:	61a5      	str	r5, [r4, #24]
 8006cec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cf0:	f7fd faf6 	bl	80042e0 <memset>
 8006cf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006cf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d00:	3468      	adds	r4, #104	; 0x68
 8006d02:	e7d9      	b.n	8006cb8 <__sfp+0x1c>
 8006d04:	2104      	movs	r1, #4
 8006d06:	4638      	mov	r0, r7
 8006d08:	f7ff ff62 	bl	8006bd0 <__sfmoreglue>
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	6030      	str	r0, [r6, #0]
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d1d5      	bne.n	8006cc0 <__sfp+0x24>
 8006d14:	f7ff ff78 	bl	8006c08 <__sfp_lock_release>
 8006d18:	230c      	movs	r3, #12
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	e7ee      	b.n	8006cfc <__sfp+0x60>
 8006d1e:	bf00      	nop
 8006d20:	0800a0ec 	.word	0x0800a0ec
 8006d24:	ffff0001 	.word	0xffff0001

08006d28 <_fwalk_reent>:
 8006d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	4688      	mov	r8, r1
 8006d30:	2700      	movs	r7, #0
 8006d32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d3a:	f1b9 0901 	subs.w	r9, r9, #1
 8006d3e:	d505      	bpl.n	8006d4c <_fwalk_reent+0x24>
 8006d40:	6824      	ldr	r4, [r4, #0]
 8006d42:	2c00      	cmp	r4, #0
 8006d44:	d1f7      	bne.n	8006d36 <_fwalk_reent+0xe>
 8006d46:	4638      	mov	r0, r7
 8006d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d4c:	89ab      	ldrh	r3, [r5, #12]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d907      	bls.n	8006d62 <_fwalk_reent+0x3a>
 8006d52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d56:	3301      	adds	r3, #1
 8006d58:	d003      	beq.n	8006d62 <_fwalk_reent+0x3a>
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	47c0      	blx	r8
 8006d60:	4307      	orrs	r7, r0
 8006d62:	3568      	adds	r5, #104	; 0x68
 8006d64:	e7e9      	b.n	8006d3a <_fwalk_reent+0x12>

08006d66 <__retarget_lock_init_recursive>:
 8006d66:	4770      	bx	lr

08006d68 <__retarget_lock_acquire_recursive>:
 8006d68:	4770      	bx	lr

08006d6a <__retarget_lock_release_recursive>:
 8006d6a:	4770      	bx	lr

08006d6c <__swhatbuf_r>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	460e      	mov	r6, r1
 8006d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d74:	4614      	mov	r4, r2
 8006d76:	2900      	cmp	r1, #0
 8006d78:	461d      	mov	r5, r3
 8006d7a:	b096      	sub	sp, #88	; 0x58
 8006d7c:	da07      	bge.n	8006d8e <__swhatbuf_r+0x22>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	89b3      	ldrh	r3, [r6, #12]
 8006d84:	061a      	lsls	r2, r3, #24
 8006d86:	d410      	bmi.n	8006daa <__swhatbuf_r+0x3e>
 8006d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d8c:	e00e      	b.n	8006dac <__swhatbuf_r+0x40>
 8006d8e:	466a      	mov	r2, sp
 8006d90:	f000 f902 	bl	8006f98 <_fstat_r>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	dbf2      	blt.n	8006d7e <__swhatbuf_r+0x12>
 8006d98:	9a01      	ldr	r2, [sp, #4]
 8006d9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006da2:	425a      	negs	r2, r3
 8006da4:	415a      	adcs	r2, r3
 8006da6:	602a      	str	r2, [r5, #0]
 8006da8:	e7ee      	b.n	8006d88 <__swhatbuf_r+0x1c>
 8006daa:	2340      	movs	r3, #64	; 0x40
 8006dac:	2000      	movs	r0, #0
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	b016      	add	sp, #88	; 0x58
 8006db2:	bd70      	pop	{r4, r5, r6, pc}

08006db4 <__smakebuf_r>:
 8006db4:	898b      	ldrh	r3, [r1, #12]
 8006db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006db8:	079d      	lsls	r5, r3, #30
 8006dba:	4606      	mov	r6, r0
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	d507      	bpl.n	8006dd0 <__smakebuf_r+0x1c>
 8006dc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	6123      	str	r3, [r4, #16]
 8006dc8:	2301      	movs	r3, #1
 8006dca:	6163      	str	r3, [r4, #20]
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	466a      	mov	r2, sp
 8006dd2:	ab01      	add	r3, sp, #4
 8006dd4:	f7ff ffca 	bl	8006d6c <__swhatbuf_r>
 8006dd8:	9900      	ldr	r1, [sp, #0]
 8006dda:	4605      	mov	r5, r0
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f7ff f989 	bl	80060f4 <_malloc_r>
 8006de2:	b948      	cbnz	r0, 8006df8 <__smakebuf_r+0x44>
 8006de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de8:	059a      	lsls	r2, r3, #22
 8006dea:	d4ef      	bmi.n	8006dcc <__smakebuf_r+0x18>
 8006dec:	f023 0303 	bic.w	r3, r3, #3
 8006df0:	f043 0302 	orr.w	r3, r3, #2
 8006df4:	81a3      	strh	r3, [r4, #12]
 8006df6:	e7e3      	b.n	8006dc0 <__smakebuf_r+0xc>
 8006df8:	4b0d      	ldr	r3, [pc, #52]	; (8006e30 <__smakebuf_r+0x7c>)
 8006dfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	6020      	str	r0, [r4, #0]
 8006e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e04:	81a3      	strh	r3, [r4, #12]
 8006e06:	9b00      	ldr	r3, [sp, #0]
 8006e08:	6120      	str	r0, [r4, #16]
 8006e0a:	6163      	str	r3, [r4, #20]
 8006e0c:	9b01      	ldr	r3, [sp, #4]
 8006e0e:	b15b      	cbz	r3, 8006e28 <__smakebuf_r+0x74>
 8006e10:	4630      	mov	r0, r6
 8006e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e16:	f000 f8d1 	bl	8006fbc <_isatty_r>
 8006e1a:	b128      	cbz	r0, 8006e28 <__smakebuf_r+0x74>
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	f023 0303 	bic.w	r3, r3, #3
 8006e22:	f043 0301 	orr.w	r3, r3, #1
 8006e26:	81a3      	strh	r3, [r4, #12]
 8006e28:	89a0      	ldrh	r0, [r4, #12]
 8006e2a:	4305      	orrs	r5, r0
 8006e2c:	81a5      	strh	r5, [r4, #12]
 8006e2e:	e7cd      	b.n	8006dcc <__smakebuf_r+0x18>
 8006e30:	08006bc5 	.word	0x08006bc5

08006e34 <_malloc_usable_size_r>:
 8006e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e38:	1f18      	subs	r0, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	bfbc      	itt	lt
 8006e3e:	580b      	ldrlt	r3, [r1, r0]
 8006e40:	18c0      	addlt	r0, r0, r3
 8006e42:	4770      	bx	lr

08006e44 <_raise_r>:
 8006e44:	291f      	cmp	r1, #31
 8006e46:	b538      	push	{r3, r4, r5, lr}
 8006e48:	4604      	mov	r4, r0
 8006e4a:	460d      	mov	r5, r1
 8006e4c:	d904      	bls.n	8006e58 <_raise_r+0x14>
 8006e4e:	2316      	movs	r3, #22
 8006e50:	6003      	str	r3, [r0, #0]
 8006e52:	f04f 30ff 	mov.w	r0, #4294967295
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e5a:	b112      	cbz	r2, 8006e62 <_raise_r+0x1e>
 8006e5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e60:	b94b      	cbnz	r3, 8006e76 <_raise_r+0x32>
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f830 	bl	8006ec8 <_getpid_r>
 8006e68:	462a      	mov	r2, r5
 8006e6a:	4601      	mov	r1, r0
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e72:	f000 b817 	b.w	8006ea4 <_kill_r>
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d00a      	beq.n	8006e90 <_raise_r+0x4c>
 8006e7a:	1c59      	adds	r1, r3, #1
 8006e7c:	d103      	bne.n	8006e86 <_raise_r+0x42>
 8006e7e:	2316      	movs	r3, #22
 8006e80:	6003      	str	r3, [r0, #0]
 8006e82:	2001      	movs	r0, #1
 8006e84:	e7e7      	b.n	8006e56 <_raise_r+0x12>
 8006e86:	2400      	movs	r4, #0
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e8e:	4798      	blx	r3
 8006e90:	2000      	movs	r0, #0
 8006e92:	e7e0      	b.n	8006e56 <_raise_r+0x12>

08006e94 <raise>:
 8006e94:	4b02      	ldr	r3, [pc, #8]	; (8006ea0 <raise+0xc>)
 8006e96:	4601      	mov	r1, r0
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	f7ff bfd3 	b.w	8006e44 <_raise_r>
 8006e9e:	bf00      	nop
 8006ea0:	2000002c 	.word	0x2000002c

08006ea4 <_kill_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	4d06      	ldr	r5, [pc, #24]	; (8006ec4 <_kill_r+0x20>)
 8006eaa:	4604      	mov	r4, r0
 8006eac:	4608      	mov	r0, r1
 8006eae:	4611      	mov	r1, r2
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	f7fb fa71 	bl	8002398 <_kill>
 8006eb6:	1c43      	adds	r3, r0, #1
 8006eb8:	d102      	bne.n	8006ec0 <_kill_r+0x1c>
 8006eba:	682b      	ldr	r3, [r5, #0]
 8006ebc:	b103      	cbz	r3, 8006ec0 <_kill_r+0x1c>
 8006ebe:	6023      	str	r3, [r4, #0]
 8006ec0:	bd38      	pop	{r3, r4, r5, pc}
 8006ec2:	bf00      	nop
 8006ec4:	200006dc 	.word	0x200006dc

08006ec8 <_getpid_r>:
 8006ec8:	f7fb ba5f 	b.w	800238a <_getpid>

08006ecc <__sread>:
 8006ecc:	b510      	push	{r4, lr}
 8006ece:	460c      	mov	r4, r1
 8006ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed4:	f000 f894 	bl	8007000 <_read_r>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	bfab      	itete	ge
 8006edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ede:	89a3      	ldrhlt	r3, [r4, #12]
 8006ee0:	181b      	addge	r3, r3, r0
 8006ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ee6:	bfac      	ite	ge
 8006ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006eea:	81a3      	strhlt	r3, [r4, #12]
 8006eec:	bd10      	pop	{r4, pc}

08006eee <__swrite>:
 8006eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef2:	461f      	mov	r7, r3
 8006ef4:	898b      	ldrh	r3, [r1, #12]
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	05db      	lsls	r3, r3, #23
 8006efa:	460c      	mov	r4, r1
 8006efc:	4616      	mov	r6, r2
 8006efe:	d505      	bpl.n	8006f0c <__swrite+0x1e>
 8006f00:	2302      	movs	r3, #2
 8006f02:	2200      	movs	r2, #0
 8006f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f08:	f000 f868 	bl	8006fdc <_lseek_r>
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	4632      	mov	r2, r6
 8006f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f14:	81a3      	strh	r3, [r4, #12]
 8006f16:	4628      	mov	r0, r5
 8006f18:	463b      	mov	r3, r7
 8006f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f22:	f000 b817 	b.w	8006f54 <_write_r>

08006f26 <__sseek>:
 8006f26:	b510      	push	{r4, lr}
 8006f28:	460c      	mov	r4, r1
 8006f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f2e:	f000 f855 	bl	8006fdc <_lseek_r>
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	89a3      	ldrh	r3, [r4, #12]
 8006f36:	bf15      	itete	ne
 8006f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f42:	81a3      	strheq	r3, [r4, #12]
 8006f44:	bf18      	it	ne
 8006f46:	81a3      	strhne	r3, [r4, #12]
 8006f48:	bd10      	pop	{r4, pc}

08006f4a <__sclose>:
 8006f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4e:	f000 b813 	b.w	8006f78 <_close_r>
	...

08006f54 <_write_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	4d05      	ldr	r5, [pc, #20]	; (8006f74 <_write_r+0x20>)
 8006f60:	602a      	str	r2, [r5, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	f7fb fa4f 	bl	8002406 <_write>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d102      	bne.n	8006f72 <_write_r+0x1e>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b103      	cbz	r3, 8006f72 <_write_r+0x1e>
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	200006dc 	.word	0x200006dc

08006f78 <_close_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4d05      	ldr	r5, [pc, #20]	; (8006f94 <_close_r+0x1c>)
 8006f7e:	4604      	mov	r4, r0
 8006f80:	4608      	mov	r0, r1
 8006f82:	602b      	str	r3, [r5, #0]
 8006f84:	f7fb fa5b 	bl	800243e <_close>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_close_r+0x1a>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_close_r+0x1a>
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	200006dc 	.word	0x200006dc

08006f98 <_fstat_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	4d06      	ldr	r5, [pc, #24]	; (8006fb8 <_fstat_r+0x20>)
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	4608      	mov	r0, r1
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	602b      	str	r3, [r5, #0]
 8006fa6:	f7fb fa55 	bl	8002454 <_fstat>
 8006faa:	1c43      	adds	r3, r0, #1
 8006fac:	d102      	bne.n	8006fb4 <_fstat_r+0x1c>
 8006fae:	682b      	ldr	r3, [r5, #0]
 8006fb0:	b103      	cbz	r3, 8006fb4 <_fstat_r+0x1c>
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	bd38      	pop	{r3, r4, r5, pc}
 8006fb6:	bf00      	nop
 8006fb8:	200006dc 	.word	0x200006dc

08006fbc <_isatty_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	4d05      	ldr	r5, [pc, #20]	; (8006fd8 <_isatty_r+0x1c>)
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	f7fb fa53 	bl	8002472 <_isatty>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_isatty_r+0x1a>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_isatty_r+0x1a>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	200006dc 	.word	0x200006dc

08006fdc <_lseek_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	4d05      	ldr	r5, [pc, #20]	; (8006ffc <_lseek_r+0x20>)
 8006fe8:	602a      	str	r2, [r5, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f7fb fa4b 	bl	8002486 <_lseek>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_lseek_r+0x1e>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_lseek_r+0x1e>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	200006dc 	.word	0x200006dc

08007000 <_read_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	4611      	mov	r1, r2
 8007008:	2200      	movs	r2, #0
 800700a:	4d05      	ldr	r5, [pc, #20]	; (8007020 <_read_r+0x20>)
 800700c:	602a      	str	r2, [r5, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	f7fb f9dc 	bl	80023cc <_read>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_read_r+0x1e>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_read_r+0x1e>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	200006dc 	.word	0x200006dc

08007024 <_init>:
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	bf00      	nop
 8007028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702a:	bc08      	pop	{r3}
 800702c:	469e      	mov	lr, r3
 800702e:	4770      	bx	lr

08007030 <_fini>:
 8007030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007032:	bf00      	nop
 8007034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007036:	bc08      	pop	{r3}
 8007038:	469e      	mov	lr, r3
 800703a:	4770      	bx	lr
